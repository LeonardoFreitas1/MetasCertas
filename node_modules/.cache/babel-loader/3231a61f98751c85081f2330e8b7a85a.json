{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _auth0Js = require('auth0-js');\n\nvar _auth0Js2 = _interopRequireDefault(_auth0Js);\n\nvar _qs = require('qs');\n\nvar _qs2 = _interopRequireDefault(_qs);\n\nvar _cordovaAuth0PluginMin = require('auth0-js/dist/cordova-auth0-plugin.min.js');\n\nvar _cordovaAuth0PluginMin2 = _interopRequireDefault(_cordovaAuth0PluginMin);\n\nvar _helper = require('./helper');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Auth0APIClient = function () {\n  function Auth0APIClient(lockID, clientID, domain, opts) {\n    var _extends2, _env;\n\n    _classCallCheck(this, Auth0APIClient);\n\n    this.lockID = lockID;\n    this.client = null;\n    this.authOpt = null;\n    this.domain = domain;\n    this.isUniversalLogin = window.location.host === domain;\n    this._enableIdPInitiatedLogin = !!(opts._enableIdPInitiatedLogin || opts._enableImpersonation);\n\n    var _qs$parse = _qs2.default.parse(window.location.search.substr(1)),\n        auth0Client = _qs$parse.auth0Client;\n\n    var ulpTelemetry = auth0Client && JSON.parse(atob(auth0Client));\n    var lockTelemetryName = this.isUniversalLogin ? 'lock.js-ulp' : 'lock.js';\n    var auth0jsTelemetryName = this.isUniversalLogin ? 'auth0-js-ulp' : 'auth0-js';\n    var default_telemetry = ulpTelemetry ? _extends({}, ulpTelemetry, {\n      env: _extends({}, ulpTelemetry.env, (_extends2 = {}, _extends2[lockTelemetryName] = '11.15.0', _extends2[auth0jsTelemetryName] = _auth0Js2.default.version.raw, _extends2))\n    }) : {\n      name: lockTelemetryName,\n      version: '11.15.0',\n      env: (_env = {}, _env[auth0jsTelemetryName] = _auth0Js2.default.version.raw, _env)\n    };\n    var state = opts.state;\n\n    if (opts.params && opts.params.state) {\n      state = opts.params.state;\n    }\n\n    var nonce = opts.nonce;\n\n    if (opts.params && opts.params.nonce) {\n      nonce = opts.params.nonce;\n    }\n\n    var scope = opts.params && opts.params.scope;\n    this.client = new _auth0Js2.default.WebAuth({\n      clientID: clientID,\n      domain: domain,\n      audience: opts.audience,\n      redirectUri: opts.redirectUrl,\n      responseMode: opts.responseMode,\n      responseType: opts.responseType,\n      leeway: opts.leeway || 1,\n      plugins: opts.plugins || [new _cordovaAuth0PluginMin2.default()],\n      overrides: (0, _helper.webAuthOverrides)(opts.overrides),\n      _sendTelemetry: opts._sendTelemetry === false ? false : true,\n      _telemetryInfo: _extends({}, default_telemetry, {\n        env: _extends({}, default_telemetry.env, opts._telemetryInfo)\n      }),\n      state: state,\n      nonce: nonce,\n      scope: scope\n    });\n    this.authOpt = {\n      popup: !opts.redirect,\n      popupOptions: opts.popupOptions,\n      nonce: nonce,\n      state: state,\n      scope: scope\n    };\n\n    if (this.isUniversalLogin && opts.sso !== undefined) {\n      this.authOpt.sso = opts.sso;\n    }\n  }\n\n  Auth0APIClient.prototype.logIn = function logIn(options, authParams, cb) {\n    // TODO: for passwordless only, try to clean in auth0.js\n    // client._shouldRedirect = redirect || responseType === \"code\" || !!redirectUrl;\n    var f = (0, _helper.loginCallback)(false, this.domain, cb);\n    var loginOptions = (0, _helper.trimAuthParams)((0, _helper.normalizeAuthParams)(_extends({}, options, this.authOpt, authParams)));\n\n    if (options.login_hint) {\n      loginOptions.login_hint = options.login_hint;\n    }\n\n    if (!options.username && !options.email) {\n      if (this.authOpt.popup) {\n        this.client.popup.authorize(_extends({}, loginOptions, {\n          owp: true\n        }), f);\n      } else {\n        this.client.authorize(loginOptions, f);\n      }\n    } else if (this.authOpt.popup) {\n      this.client.popup.loginWithCredentials(loginOptions, f);\n    } else {\n      loginOptions.realm = options.connection;\n      this.client.login(loginOptions, f);\n    }\n  };\n\n  Auth0APIClient.prototype.logout = function logout(query) {\n    this.client.logout(query);\n  };\n\n  Auth0APIClient.prototype.signUp = function signUp(options, cb) {\n    delete options.autoLogin;\n    this.client.signup((0, _helper.trimAuthParams)(options), function (err, result) {\n      return cb(err, result);\n    });\n  };\n\n  Auth0APIClient.prototype.resetPassword = function resetPassword(options, cb) {\n    this.client.changePassword((0, _helper.trimAuthParams)(options), cb);\n  };\n\n  Auth0APIClient.prototype.passwordlessStart = function passwordlessStart(options, cb) {\n    this.client.passwordlessStart((0, _helper.trimAuthParams)(options), function (err) {\n      return cb((0, _helper.normalizeError)(err));\n    });\n  };\n\n  Auth0APIClient.prototype.passwordlessVerify = function passwordlessVerify(options, cb) {\n    var verifyOptions = _extends({}, options, {\n      popup: this.authOpt.popup\n    });\n\n    this.client.passwordlessLogin(verifyOptions, function (err, result) {\n      return cb((0, _helper.normalizeError)(err), result);\n    });\n  };\n\n  Auth0APIClient.prototype.parseHash = function parseHash() {\n    var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var cb = arguments[1];\n    return this.client.parseHash({\n      __enableIdPInitiatedLogin: this._enableIdPInitiatedLogin,\n      hash: hash,\n      nonce: this.authOpt.nonce,\n      state: this.authOpt.state\n    }, cb);\n  };\n\n  Auth0APIClient.prototype.getUserInfo = function getUserInfo(token, callback) {\n    return this.client.client.userInfo(token, callback);\n  };\n\n  Auth0APIClient.prototype.getProfile = function getProfile(token, callback) {\n    this.getUserInfo(token, callback);\n  };\n\n  Auth0APIClient.prototype.getSSOData = function getSSOData() {\n    var _client$client;\n\n    return (_client$client = this.client.client).getSSOData.apply(_client$client, arguments);\n  };\n\n  Auth0APIClient.prototype.getUserCountry = function getUserCountry(cb) {\n    return this.client.client.getUserCountry(cb);\n  };\n\n  Auth0APIClient.prototype.checkSession = function checkSession(options, cb) {\n    return this.client.checkSession(options, cb);\n  };\n\n  return Auth0APIClient;\n}();\n\nexports.default = Auth0APIClient;","map":null,"metadata":{},"sourceType":"script"}