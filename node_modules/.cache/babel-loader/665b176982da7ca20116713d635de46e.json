{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.observe = observe;\nexports.subscribe = subscribe;\nexports.unsubscribe = unsubscribe;\nexports.swap = swap;\nexports.updateEntity = updateEntity;\nexports.setEntity = setEntity;\nexports.read = read;\nexports.getEntity = getEntity;\nexports.removeEntity = removeEntity;\nexports.getCollection = getCollection;\nexports.updateCollection = updateCollection;\nexports.getState = getState;\n\nvar _atom = require('../utils/atom');\n\nvar _atom2 = _interopRequireDefault(_atom);\n\nvar _immutable = require('immutable');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar store = (0, _atom2.default)(new _immutable.Map({}));\n\nfunction observe(key, id, f) {\n  subscribe(key + '-' + id, function (_, oldState, newState) {\n    var m = getEntity(newState, 'lock', id);\n    var oldM = getEntity(oldState, 'lock', id);\n    if (m != oldM) f(m);\n  });\n}\n\nfunction subscribe(key, f) {\n  store.addWatch(key, f);\n}\n\nfunction unsubscribe(key) {\n  store.removeWatch(key);\n}\n\nfunction swap() {\n  return store.swap.apply(store, arguments);\n}\n\nfunction updateEntity(state, coll, id, f) {\n  for (var _len = arguments.length, args = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n    args[_key - 4] = arguments[_key];\n  }\n\n  return state.updateIn([coll, id], new _immutable.Map({}), function (x) {\n    return f.apply(undefined, [x].concat(args));\n  });\n}\n\nfunction setEntity(state, coll, id, m) {\n  return state.setIn([coll, id], m);\n}\n\nfunction read(f) {\n  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  return f.apply(undefined, [store.deref()].concat(args));\n}\n\nfunction getEntity(state, coll) {\n  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return state.getIn([coll, id]);\n}\n\nfunction removeEntity(state, coll) {\n  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return state.removeIn([coll, id]);\n}\n\nfunction getCollection(state, coll) {\n  return state.get(coll, (0, _immutable.Map)()).toList();\n} // TODO: try to remove this fn\n\n\nfunction updateCollection(state, coll, f) {\n  for (var _len3 = arguments.length, args = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n    args[_key3 - 3] = arguments[_key3];\n  }\n\n  return state.update(coll, function (xs) {\n    return f.apply(undefined, [xs].concat(args));\n  });\n}\n\nfunction getState() {\n  return store.deref();\n} // DEV\n// store.addWatch(\"keepHistory\", (key, oldState, newState) => {\n//   if (!global.window.h) global.window.h = []; global.window.h.push(newState);\n//   console.debug(\"something changed\", newState.toJS());\n// });","map":null,"metadata":{},"sourceType":"script"}