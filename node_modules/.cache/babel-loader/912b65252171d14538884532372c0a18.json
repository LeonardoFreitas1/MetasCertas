{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.getUsernameValidation = getUsernameValidation;\nexports.setUsername = setUsername;\nexports.usernameLooksLikeEmail = usernameLooksLikeEmail;\n\nvar _index = require('./index');\n\nvar _email = require('./email');\n\nvar _database = require('../connection/database');\n\nvar _trim = require('trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DEFAULT_CONNECTION_VALIDATION = {\n  username: {\n    min: 1,\n    max: 15\n  }\n};\nvar regExp = /^[a-zA-Z0-9_+\\-.]+$/;\n\nfunction validateUsername(str, validateFormat) {\n  var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_CONNECTION_VALIDATION.username; // If the connection does not have validation settings, it should only check if the field is empty.\n  // validateFormat overrides this logic to disable validation on login (login should never validate format)\n\n  if (!validateFormat || settings == null) {\n    return (0, _trim2.default)(str).length > 0;\n  }\n\n  var lowercased = (0, _trim2.default)(str.toLowerCase()); // chekc min value matched\n\n  if (lowercased.length < settings.min) {\n    return false;\n  } // check max value matched\n\n\n  if (lowercased.length > settings.max) {\n    return false;\n  } // check allowed characters matched\n\n\n  var result = regExp.exec(lowercased);\n  return !!(result && result[0]);\n}\n\nfunction getUsernameValidation(m) {\n  var usernameValidation = (0, _database.databaseConnection)(m).getIn(['validation', 'username']);\n  return usernameValidation ? usernameValidation.toJS() : null;\n}\n\nfunction setUsername(m, str) {\n  var usernameStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'username';\n  var validateUsernameFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var usernameValidation = validateUsernameFormat ? getUsernameValidation(m) : null;\n\n  var validator = function validator(value) {\n    switch (usernameStyle) {\n      case 'email':\n        return (0, _email.validateEmail)(value);\n\n      case 'username':\n        return validateUsername(value, validateUsernameFormat, usernameValidation);\n\n      default:\n        return usernameLooksLikeEmail(value) ? (0, _email.validateEmail)(value) : validateUsername(value, validateUsernameFormat, usernameValidation);\n    }\n  };\n\n  return (0, _index.setField)(m, 'username', str, validator);\n}\n\nfunction usernameLooksLikeEmail(str) {\n  return str.indexOf('@') > -1;\n}","map":null,"metadata":{},"sourceType":"script"}