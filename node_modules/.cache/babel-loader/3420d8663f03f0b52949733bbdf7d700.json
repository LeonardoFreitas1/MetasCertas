{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.STRATEGIES = undefined;\nexports.initEnterprise = initEnterprise;\nexports.defaultEnterpriseConnection = defaultEnterpriseConnection;\nexports.defaultEnterpriseConnectionName = defaultEnterpriseConnectionName;\nexports.enterpriseActiveFlowConnection = enterpriseActiveFlowConnection;\nexports.matchConnection = matchConnection;\nexports.isEnterpriseDomain = isEnterpriseDomain;\nexports.enterpriseDomain = enterpriseDomain;\nexports.quickAuthConnection = quickAuthConnection;\nexports.isADEnabled = isADEnabled;\nexports.findADConnectionWithoutDomain = findADConnectionWithoutDomain;\nexports.isInCorpNetwork = isInCorpNetwork;\nexports.corpNetworkConnection = corpNetworkConnection;\nexports.isSingleHRDConnection = isSingleHRDConnection;\nexports.isHRDDomain = isHRDDomain;\nexports.toggleHRD = toggleHRD;\nexports.isHRDActive = isHRDActive;\nexports.isHRDEmailValid = isHRDEmailValid;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _index = require('../core/index');\n\nvar l = _interopRequireWildcard(_index);\n\nvar _index2 = require('../field/index');\n\nvar c = _interopRequireWildcard(_index2);\n\nvar _data_utils = require('../utils/data_utils');\n\nvar _email = require('../field/email');\n\nvar _username = require('../field/username');\n\nvar _classic = require('../engine/classic');\n\nvar _index3 = require('./database/index');\n\nvar _index4 = require('../store/index');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _dataFns = (0, _data_utils.dataFns)(['enterprise']),\n    get = _dataFns.get,\n    initNS = _dataFns.initNS,\n    tget = _dataFns.tget,\n    tremove = _dataFns.tremove,\n    tset = _dataFns.tset;\n\nvar _dataFns2 = (0, _data_utils.dataFns)(['core']),\n    tremoveCore = _dataFns2.tremove,\n    tsetCore = _dataFns2.tset,\n    tgetCore = _dataFns2.tget; // TODO: Android version also has \"google-opendid\" in the list, but we\n// consider it to be a social connection. See\n// https://github.com/auth0/Lock.Android/blob/98262cb7110e5d1c8a97e1129faf2621c1d8d111/lock/src/main/java/com/auth0/android/lock/utils/Strategies.java\n\n\nvar STRATEGIES = exports.STRATEGIES = {\n  ad: 'AD / LDAP',\n  adfs: 'ADFS',\n  'auth0-adldap': 'AD/LDAP',\n  'auth0-oidc': 'Auth0 OpenID Connect',\n  custom: 'Custom Auth',\n  'google-apps': 'Google Apps',\n  ip: 'IP Address',\n  mscrm: 'Dynamics CRM',\n  office365: 'Office365',\n  pingfederate: 'Ping Federate',\n  samlp: 'SAML',\n  sharepoint: 'SharePoint Apps',\n  waad: 'Windows Azure AD'\n};\n\nfunction initEnterprise(m, opts) {\n  return initNS(m, _immutable2.default.fromJS(processOptions(opts)));\n}\n\nfunction processOptions(opts) {\n  var defaultEnterpriseConnection = opts.defaultEnterpriseConnection;\n\n  if (defaultEnterpriseConnection != undefined && typeof defaultEnterpriseConnection !== 'string') {\n    l.warn(opts, 'The `defaultEnterpriseConnection` option will be ignored, because it is not a string.');\n    defaultEnterpriseConnection = undefined;\n  }\n\n  return defaultEnterpriseConnection === undefined ? {} : {\n    defaultConnectionName: defaultEnterpriseConnection\n  };\n}\n\nfunction defaultEnterpriseConnection(m) {\n  var name = defaultEnterpriseConnectionName(m);\n  return name && findADConnectionWithoutDomain(m, name);\n}\n\nfunction defaultEnterpriseConnectionName(m) {\n  return get(m, 'defaultConnectionName');\n}\n\nfunction enterpriseActiveFlowConnection(m) {\n  if (isHRDActive(m)) {\n    // HRD is active when an email matched or there is only one\n    // connection and it is enterprise\n    var email = tget(m, 'hrdEmail', '');\n    return matchConnection(m, email) || findActiveFlowConnection(m);\n  } else {\n    return defaultEnterpriseConnection(m) || findADConnectionWithoutDomain(m);\n  }\n}\n\nfunction matchConnection(m, email) {\n  var strategies = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var target = (0, _email.emailDomain)(email);\n  if (!target) return false;\n  return l.connections.apply(l, [m, 'enterprise'].concat(strategies)).find(function (x) {\n    return x.get('domains').contains(target);\n  });\n}\n\nfunction isEnterpriseDomain(m, email) {\n  var strategies = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return !!matchConnection(m, email, strategies);\n}\n\nfunction enterpriseDomain(m) {\n  return isSingleHRDConnection(m) ? l.connections(m, 'enterprise').getIn([0, 'domains', 0]) : (0, _email.emailDomain)(tget(m, 'hrdEmail'));\n}\n\nfunction quickAuthConnection(m) {\n  return !isADEnabled(m) && l.hasOneConnection(m, 'enterprise') ? l.connections(m, 'enterprise').get(0) : null;\n} // ad / adldap\n// https://github.com/auth0/Lock.Android/blob/0145b6853a8de0df5e63ef22e4e2bc40be97ad9e/lock/src/main/java/com/auth0/android/lock/utils/Strategy.java#L67\n\n\nfunction isADEnabled(m) {\n  return l.hasSomeConnections(m, 'enterprise', 'ad', 'auth0-adldap');\n}\n\nfunction findADConnectionWithoutDomain(m) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  return l.connections(m, 'enterprise', 'ad', 'auth0-adldap').find(function (x) {\n    return x.get('domains').isEmpty() && (!name || x.get('name') === name);\n  });\n}\n\nfunction findActiveFlowConnection(m) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  return l.connections(m, 'enterprise', 'ad', 'auth0-adldap').find(function (x) {\n    return !name || x.get('name') === name;\n  });\n} // kerberos\n\n\nfunction isInCorpNetwork(m) {\n  return corpNetworkConnection(m) !== undefined;\n}\n\nfunction corpNetworkConnection(m) {\n  // Information about connection is stored in to flat properties connection and strategy.\n  // If connection is present, strategy will always be present as defined by the server.\n  var name = m.getIn(['sso', 'connection']);\n  var strategy = m.getIn(['sso', 'strategy']);\n  return name && strategy && _immutable2.default.Map({\n    name: name,\n    strategy: strategy\n  });\n} // hrd\n\n\nfunction isSingleHRDConnection(m) {\n  return isADEnabled(m) && l.connections(m).count() === 1;\n}\n\nfunction isHRDDomain(m, email) {\n  return isEnterpriseDomain(m, email, ['ad', 'auth0-adldap']);\n}\n\nfunction toggleHRD(m, email) {\n  if (email) {\n    var username = l.defaultADUsernameFromEmailPrefix(m) ? (0, _email.emailLocalPart)(email) : email;\n    m = (0, _username.setUsername)(m, username, 'username', false);\n    m = tset(m, 'hrdEmail', email);\n  } else {\n    var hrdEmail = tget(m, 'hrdEmail');\n\n    if (hrdEmail) {\n      m = (0, _username.setUsername)(m, hrdEmail, 'email', false);\n    }\n\n    m = tremove(m, 'hrdEmail');\n  }\n\n  return tset(m, 'hrd', !!email);\n}\n\nfunction isHRDActive(m) {\n  return tget(m, 'hrd', isSingleHRDConnection(m));\n}\n\nfunction isHRDEmailValid(m, str) {\n  if ((0, _email.isEmail)(str) && !l.hasSomeConnections(m, 'database') && !l.hasSomeConnections(m, 'passwordless') && !findADConnectionWithoutDomain(m) && !(0, _classic.matchesEnterpriseConnection)(m, str)) {\n    return false;\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}