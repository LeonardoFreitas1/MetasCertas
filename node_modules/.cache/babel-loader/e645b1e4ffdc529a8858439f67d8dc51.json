{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _reactAddonsShallowCompare = _interopRequireDefault(require(\"react-addons-shallow-compare\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactMomentProptypes = _interopRequireDefault(require(\"react-moment-proptypes\"));\n\nvar _airbnbPropTypes = require(\"airbnb-prop-types\");\n\nvar _reactWithStyles = require(\"react-with-styles\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _consolidatedEvents = require(\"consolidated-events\");\n\nvar _defaultPhrases = require(\"../defaultPhrases\");\n\nvar _getPhrasePropTypes = _interopRequireDefault(require(\"../utils/getPhrasePropTypes\"));\n\nvar _noflip = _interopRequireDefault(require(\"../utils/noflip\"));\n\nvar _CalendarMonth = _interopRequireDefault(require(\"./CalendarMonth\"));\n\nvar _isTransitionEndSupported = _interopRequireDefault(require(\"../utils/isTransitionEndSupported\"));\n\nvar _getTransformStyles = _interopRequireDefault(require(\"../utils/getTransformStyles\"));\n\nvar _getCalendarMonthWidth = _interopRequireDefault(require(\"../utils/getCalendarMonthWidth\"));\n\nvar _toISOMonthString = _interopRequireDefault(require(\"../utils/toISOMonthString\"));\n\nvar _isPrevMonth = _interopRequireDefault(require(\"../utils/isPrevMonth\"));\n\nvar _isNextMonth = _interopRequireDefault(require(\"../utils/isNextMonth\"));\n\nvar _ModifiersShape = _interopRequireDefault(require(\"../shapes/ModifiersShape\"));\n\nvar _ScrollableOrientationShape = _interopRequireDefault(require(\"../shapes/ScrollableOrientationShape\"));\n\nvar _DayOfWeekShape = _interopRequireDefault(require(\"../shapes/DayOfWeekShape\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function () {\n    function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    }\n\n    return _getPrototypeOf;\n  }();\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function () {\n    function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    }\n\n    return _setPrototypeOf;\n  }();\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar propTypes = process.env.NODE_ENV !== \"production\" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, {\n  enableOutsideDays: _propTypes[\"default\"].bool,\n  firstVisibleMonthIndex: _propTypes[\"default\"].number,\n  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,\n  initialMonth: _reactMomentProptypes[\"default\"].momentObj,\n  isAnimating: _propTypes[\"default\"].bool,\n  numberOfMonths: _propTypes[\"default\"].number,\n  modifiers: _propTypes[\"default\"].objectOf(_propTypes[\"default\"].objectOf(_ModifiersShape[\"default\"])),\n  orientation: _ScrollableOrientationShape[\"default\"],\n  onDayClick: _propTypes[\"default\"].func,\n  onDayMouseEnter: _propTypes[\"default\"].func,\n  onDayMouseLeave: _propTypes[\"default\"].func,\n  onMonthTransitionEnd: _propTypes[\"default\"].func,\n  onMonthChange: _propTypes[\"default\"].func,\n  onYearChange: _propTypes[\"default\"].func,\n  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  renderCalendarDay: _propTypes[\"default\"].func,\n  renderDayContents: _propTypes[\"default\"].func,\n  translationValue: _propTypes[\"default\"].number,\n  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  daySize: _airbnbPropTypes.nonNegativeInteger,\n  focusedDate: _reactMomentProptypes[\"default\"].momentObj,\n  // indicates focusable day\n  isFocused: _propTypes[\"default\"].bool,\n  // indicates whether or not to move focus to focusable day\n  firstDayOfWeek: _DayOfWeekShape[\"default\"],\n  setMonthTitleHeight: _propTypes[\"default\"].func,\n  isRTL: _propTypes[\"default\"].bool,\n  transitionDuration: _airbnbPropTypes.nonNegativeInteger,\n  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,\n  // i18n\n  monthFormat: _propTypes[\"default\"].string,\n  phrases: _propTypes[\"default\"].shape((0, _getPhrasePropTypes[\"default\"])(_defaultPhrases.CalendarDayPhrases)),\n  dayAriaLabelFormat: _propTypes[\"default\"].string\n})) : {};\nvar defaultProps = {\n  enableOutsideDays: false,\n  firstVisibleMonthIndex: 0,\n  horizontalMonthPadding: 13,\n  initialMonth: (0, _moment[\"default\"])(),\n  isAnimating: false,\n  numberOfMonths: 1,\n  modifiers: {},\n  orientation: _constants.HORIZONTAL_ORIENTATION,\n  onDayClick: function () {\n    function onDayClick() {}\n\n    return onDayClick;\n  }(),\n  onDayMouseEnter: function () {\n    function onDayMouseEnter() {}\n\n    return onDayMouseEnter;\n  }(),\n  onDayMouseLeave: function () {\n    function onDayMouseLeave() {}\n\n    return onDayMouseLeave;\n  }(),\n  onMonthChange: function () {\n    function onMonthChange() {}\n\n    return onMonthChange;\n  }(),\n  onYearChange: function () {\n    function onYearChange() {}\n\n    return onYearChange;\n  }(),\n  onMonthTransitionEnd: function () {\n    function onMonthTransitionEnd() {}\n\n    return onMonthTransitionEnd;\n  }(),\n  renderMonthText: null,\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  translationValue: null,\n  renderMonthElement: null,\n  daySize: _constants.DAY_SIZE,\n  focusedDate: null,\n  isFocused: false,\n  firstDayOfWeek: null,\n  setMonthTitleHeight: null,\n  isRTL: false,\n  transitionDuration: 200,\n  verticalBorderSpacing: undefined,\n  // i18n\n  monthFormat: 'MMMM YYYY',\n  // english locale\n  phrases: _defaultPhrases.CalendarDayPhrases,\n  dayAriaLabelFormat: undefined\n};\n\nfunction getMonths(initialMonth, numberOfMonths, withoutTransitionMonths) {\n  var month = initialMonth.clone();\n  if (!withoutTransitionMonths) month = month.subtract(1, 'month');\n  var months = [];\n\n  for (var i = 0; i < (withoutTransitionMonths ? numberOfMonths : numberOfMonths + 2); i += 1) {\n    months.push(month);\n    month = month.clone().add(1, 'month');\n  }\n\n  return months;\n}\n\nvar CalendarMonthGrid =\n/*#__PURE__*/\nfunction (_ref) {\n  _inherits(CalendarMonthGrid, _ref);\n\n  _createClass(CalendarMonthGrid, [{\n    key: !_react[\"default\"].PureComponent && \"shouldComponentUpdate\",\n    value: function () {\n      function value(nextProps, nextState) {\n        return (0, _reactAddonsShallowCompare[\"default\"])(this, nextProps, nextState);\n      }\n\n      return value;\n    }()\n  }]);\n\n  function CalendarMonthGrid(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarMonthGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarMonthGrid).call(this, props));\n    var withoutTransitionMonths = props.orientation === _constants.VERTICAL_SCROLLABLE;\n    _this.state = {\n      months: getMonths(props.initialMonth, props.numberOfMonths, withoutTransitionMonths)\n    };\n    _this.isTransitionEndSupported = (0, _isTransitionEndSupported[\"default\"])();\n    _this.onTransitionEnd = _this.onTransitionEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setContainerRef = _this.setContainerRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.locale = _moment[\"default\"].locale();\n    _this.onMonthSelect = _this.onMonthSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onYearSelect = _this.onYearSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CalendarMonthGrid, [{\n    key: \"componentDidMount\",\n    value: function () {\n      function componentDidMount() {\n        this.removeEventListener = (0, _consolidatedEvents.addEventListener)(this.container, 'transitionend', this.onTransitionEnd);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function () {\n      function componentWillReceiveProps(nextProps) {\n        var _this2 = this;\n\n        var initialMonth = nextProps.initialMonth,\n            numberOfMonths = nextProps.numberOfMonths,\n            orientation = nextProps.orientation;\n        var months = this.state.months;\n        var _this$props = this.props,\n            prevInitialMonth = _this$props.initialMonth,\n            prevNumberOfMonths = _this$props.numberOfMonths;\n        var hasMonthChanged = !prevInitialMonth.isSame(initialMonth, 'month');\n        var hasNumberOfMonthsChanged = prevNumberOfMonths !== numberOfMonths;\n        var newMonths = months;\n\n        if (hasMonthChanged && !hasNumberOfMonthsChanged) {\n          if ((0, _isNextMonth[\"default\"])(prevInitialMonth, initialMonth)) {\n            newMonths = months.slice(1);\n            newMonths.push(months[months.length - 1].clone().add(1, 'month'));\n          } else if ((0, _isPrevMonth[\"default\"])(prevInitialMonth, initialMonth)) {\n            newMonths = months.slice(0, months.length - 1);\n            newMonths.unshift(months[0].clone().subtract(1, 'month'));\n          } else {\n            var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n            newMonths = getMonths(initialMonth, numberOfMonths, withoutTransitionMonths);\n          }\n        }\n\n        if (hasNumberOfMonthsChanged) {\n          var _withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n\n          newMonths = getMonths(initialMonth, numberOfMonths, _withoutTransitionMonths);\n        }\n\n        var momentLocale = _moment[\"default\"].locale();\n\n        if (this.locale !== momentLocale) {\n          this.locale = momentLocale;\n          newMonths = newMonths.map(function (m) {\n            return m.locale(_this2.locale);\n          });\n        }\n\n        this.setState({\n          months: newMonths\n        });\n      }\n\n      return componentWillReceiveProps;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      function componentDidUpdate() {\n        var _this$props2 = this.props,\n            isAnimating = _this$props2.isAnimating,\n            transitionDuration = _this$props2.transitionDuration,\n            onMonthTransitionEnd = _this$props2.onMonthTransitionEnd; // For IE9, immediately call onMonthTransitionEnd instead of\n        // waiting for the animation to complete. Similarly, if transitionDuration\n        // is set to 0, also immediately invoke the onMonthTransitionEnd callback\n\n        if ((!this.isTransitionEndSupported || !transitionDuration) && isAnimating) {\n          onMonthTransitionEnd();\n        }\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function () {\n      function componentWillUnmount() {\n        if (this.removeEventListener) this.removeEventListener();\n      }\n\n      return componentWillUnmount;\n    }()\n  }, {\n    key: \"onTransitionEnd\",\n    value: function () {\n      function onTransitionEnd() {\n        var onMonthTransitionEnd = this.props.onMonthTransitionEnd;\n        onMonthTransitionEnd();\n      }\n\n      return onTransitionEnd;\n    }()\n  }, {\n    key: \"onMonthSelect\",\n    value: function () {\n      function onMonthSelect(currentMonth, newMonthVal) {\n        var newMonth = currentMonth.clone();\n        var _this$props3 = this.props,\n            onMonthChange = _this$props3.onMonthChange,\n            orientation = _this$props3.orientation;\n        var months = this.state.months;\n        var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n        var initialMonthSubtraction = months.indexOf(currentMonth);\n\n        if (!withoutTransitionMonths) {\n          initialMonthSubtraction -= 1;\n        }\n\n        newMonth.set('month', newMonthVal).subtract(initialMonthSubtraction, 'months');\n        onMonthChange(newMonth);\n      }\n\n      return onMonthSelect;\n    }()\n  }, {\n    key: \"onYearSelect\",\n    value: function () {\n      function onYearSelect(currentMonth, newYearVal) {\n        var newMonth = currentMonth.clone();\n        var _this$props4 = this.props,\n            onYearChange = _this$props4.onYearChange,\n            orientation = _this$props4.orientation;\n        var months = this.state.months;\n        var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n        var initialMonthSubtraction = months.indexOf(currentMonth);\n\n        if (!withoutTransitionMonths) {\n          initialMonthSubtraction -= 1;\n        }\n\n        newMonth.set('year', newYearVal).subtract(initialMonthSubtraction, 'months');\n        onYearChange(newMonth);\n      }\n\n      return onYearSelect;\n    }()\n  }, {\n    key: \"setContainerRef\",\n    value: function () {\n      function setContainerRef(ref) {\n        this.container = ref;\n      }\n\n      return setContainerRef;\n    }()\n  }, {\n    key: \"render\",\n    value: function () {\n      function render() {\n        var _this3 = this;\n\n        var _this$props5 = this.props,\n            enableOutsideDays = _this$props5.enableOutsideDays,\n            firstVisibleMonthIndex = _this$props5.firstVisibleMonthIndex,\n            horizontalMonthPadding = _this$props5.horizontalMonthPadding,\n            isAnimating = _this$props5.isAnimating,\n            modifiers = _this$props5.modifiers,\n            numberOfMonths = _this$props5.numberOfMonths,\n            monthFormat = _this$props5.monthFormat,\n            orientation = _this$props5.orientation,\n            translationValue = _this$props5.translationValue,\n            daySize = _this$props5.daySize,\n            onDayMouseEnter = _this$props5.onDayMouseEnter,\n            onDayMouseLeave = _this$props5.onDayMouseLeave,\n            onDayClick = _this$props5.onDayClick,\n            renderMonthText = _this$props5.renderMonthText,\n            renderCalendarDay = _this$props5.renderCalendarDay,\n            renderDayContents = _this$props5.renderDayContents,\n            renderMonthElement = _this$props5.renderMonthElement,\n            onMonthTransitionEnd = _this$props5.onMonthTransitionEnd,\n            firstDayOfWeek = _this$props5.firstDayOfWeek,\n            focusedDate = _this$props5.focusedDate,\n            isFocused = _this$props5.isFocused,\n            isRTL = _this$props5.isRTL,\n            styles = _this$props5.styles,\n            phrases = _this$props5.phrases,\n            dayAriaLabelFormat = _this$props5.dayAriaLabelFormat,\n            transitionDuration = _this$props5.transitionDuration,\n            verticalBorderSpacing = _this$props5.verticalBorderSpacing,\n            setMonthTitleHeight = _this$props5.setMonthTitleHeight;\n        var months = this.state.months;\n        var isVertical = orientation === _constants.VERTICAL_ORIENTATION;\n        var isVerticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;\n        var isHorizontal = orientation === _constants.HORIZONTAL_ORIENTATION;\n        var calendarMonthWidth = (0, _getCalendarMonthWidth[\"default\"])(daySize, horizontalMonthPadding);\n        var width = isVertical || isVerticalScrollable ? calendarMonthWidth : (numberOfMonths + 2) * calendarMonthWidth;\n        var transformType = isVertical || isVerticalScrollable ? 'translateY' : 'translateX';\n        var transformValue = \"\".concat(transformType, \"(\").concat(translationValue, \"px)\");\n        return _react[\"default\"].createElement(\"div\", _extends({}, (0, _reactWithStyles.css)(styles.CalendarMonthGrid, isHorizontal && styles.CalendarMonthGrid__horizontal, isVertical && styles.CalendarMonthGrid__vertical, isVerticalScrollable && styles.CalendarMonthGrid__vertical_scrollable, isAnimating && styles.CalendarMonthGrid__animating, isAnimating && transitionDuration && {\n          transition: \"transform \".concat(transitionDuration, \"ms ease-in-out\")\n        }, _objectSpread({}, (0, _getTransformStyles[\"default\"])(transformValue), {\n          width: width\n        })), {\n          ref: this.setContainerRef,\n          onTransitionEnd: onMonthTransitionEnd\n        }), months.map(function (month, i) {\n          var isVisible = i >= firstVisibleMonthIndex && i < firstVisibleMonthIndex + numberOfMonths;\n          var hideForAnimation = i === 0 && !isVisible;\n          var showForAnimation = i === 0 && isAnimating && isVisible;\n          var monthString = (0, _toISOMonthString[\"default\"])(month);\n          return _react[\"default\"].createElement(\"div\", _extends({\n            key: monthString\n          }, (0, _reactWithStyles.css)(isHorizontal && styles.CalendarMonthGrid_month__horizontal, hideForAnimation && styles.CalendarMonthGrid_month__hideForAnimation, showForAnimation && !isVertical && !isRTL && {\n            position: 'absolute',\n            left: -calendarMonthWidth\n          }, showForAnimation && !isVertical && isRTL && {\n            position: 'absolute',\n            right: 0\n          }, showForAnimation && isVertical && {\n            position: 'absolute',\n            top: -translationValue\n          }, !isVisible && !isAnimating && styles.CalendarMonthGrid_month__hidden)), _react[\"default\"].createElement(_CalendarMonth[\"default\"], {\n            month: month,\n            isVisible: isVisible,\n            enableOutsideDays: enableOutsideDays,\n            modifiers: modifiers[monthString],\n            monthFormat: monthFormat,\n            orientation: orientation,\n            onDayMouseEnter: onDayMouseEnter,\n            onDayMouseLeave: onDayMouseLeave,\n            onDayClick: onDayClick,\n            onMonthSelect: _this3.onMonthSelect,\n            onYearSelect: _this3.onYearSelect,\n            renderMonthText: renderMonthText,\n            renderCalendarDay: renderCalendarDay,\n            renderDayContents: renderDayContents,\n            renderMonthElement: renderMonthElement,\n            firstDayOfWeek: firstDayOfWeek,\n            daySize: daySize,\n            focusedDate: isVisible ? focusedDate : null,\n            isFocused: isFocused,\n            phrases: phrases,\n            setMonthTitleHeight: setMonthTitleHeight,\n            dayAriaLabelFormat: dayAriaLabelFormat,\n            verticalBorderSpacing: verticalBorderSpacing,\n            horizontalMonthPadding: horizontalMonthPadding\n          }));\n        }));\n      }\n\n      return render;\n    }()\n  }]);\n\n  return CalendarMonthGrid;\n}(_react[\"default\"].PureComponent || _react[\"default\"].Component);\n\nCalendarMonthGrid.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nCalendarMonthGrid.defaultProps = defaultProps;\n\nvar _default = (0, _reactWithStyles.withStyles)(function (_ref2) {\n  var _ref2$reactDates = _ref2.reactDates,\n      color = _ref2$reactDates.color,\n      noScrollBarOnVerticalScrollable = _ref2$reactDates.noScrollBarOnVerticalScrollable,\n      spacing = _ref2$reactDates.spacing,\n      zIndex = _ref2$reactDates.zIndex;\n  return {\n    CalendarMonthGrid: {\n      background: color.background,\n      textAlign: (0, _noflip[\"default\"])('left'),\n      zIndex: zIndex\n    },\n    CalendarMonthGrid__animating: {\n      zIndex: zIndex + 1\n    },\n    CalendarMonthGrid__horizontal: {\n      position: 'absolute',\n      left: (0, _noflip[\"default\"])(spacing.dayPickerHorizontalPadding)\n    },\n    CalendarMonthGrid__vertical: {\n      margin: '0 auto'\n    },\n    CalendarMonthGrid__vertical_scrollable: _objectSpread({\n      margin: '0 auto',\n      overflowY: 'scroll'\n    }, noScrollBarOnVerticalScrollable && {\n      '-webkitOverflowScrolling': 'touch',\n      '::-webkit-scrollbar': {\n        '-webkit-appearance': 'none',\n        display: 'none'\n      }\n    }),\n    CalendarMonthGrid_month__horizontal: {\n      display: 'inline-block',\n      verticalAlign: 'top',\n      minHeight: '100%'\n    },\n    CalendarMonthGrid_month__hideForAnimation: {\n      position: 'absolute',\n      zIndex: zIndex - 1,\n      opacity: 0,\n      pointerEvents: 'none'\n    },\n    CalendarMonthGrid_month__hidden: {\n      visibility: 'hidden'\n    }\n  };\n}, {\n  pureComponent: typeof _react[\"default\"].PureComponent !== 'undefined'\n})(CalendarMonthGrid);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}