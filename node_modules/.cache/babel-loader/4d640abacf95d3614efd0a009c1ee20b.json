{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _CSSCore = require('fbjs/lib/CSSCore');\n\nvar _CSSCore2 = _interopRequireDefault(_CSSCore);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Slider = function (_React$Component) {\n  _inherits(Slider, _React$Component);\n\n  function Slider(props) {\n    _classCallCheck(this, Slider);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.state = {\n      children: {\n        current: props.children\n      }\n    };\n    return _this;\n  }\n\n  Slider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    // TODO: take a prop to identify what are we rendering instead of\n    // infering it from children keys so we can accept more than one\n    // child (we are already wrapping them).\n    if (this.state.children.current.key != nextProps.children.key) {\n      this.setState({\n        children: {\n          current: nextProps.children,\n          prev: this.state.children.current\n        },\n        transitionName: this.props.transitionName\n      });\n      this.animate = true;\n    } else if (!this.timeout) {\n      this.setState({\n        children: {\n          current: nextProps.children\n        },\n        transitionName: nextProps.transitionName\n      });\n    }\n  };\n\n  Slider.prototype.componentDidUpdate = function componentDidUpdate() {\n    var _this2 = this;\n\n    if (this.animate) {\n      this.animate = false;\n      var transitionName = this.state.transitionName;\n      var _state$children = this.state.children,\n          current = _state$children.current,\n          prev = _state$children.prev;\n      var reverse = this.props.reverse;\n      var currentComponent = this.refs[current.key];\n      var prevComponent = this.refs[prev.key];\n\n      var transition = function transition(component, className, delay) {\n        // eslint-disable-next-line\n        var node = _reactDom2.default.findDOMNode(component);\n\n        var activeClassName = className + '-active';\n\n        _CSSCore2.default.addClass(node, className);\n\n        setTimeout(function () {\n          return _CSSCore2.default.addClass(node, activeClassName);\n        }, 17);\n\n        if (delay) {\n          setTimeout(function () {\n            _CSSCore2.default.removeClass(node, className);\n\n            _CSSCore2.default.removeClass(node, activeClassName);\n          }, delay);\n        }\n      };\n\n      var callback = function callback(slide) {\n        currentComponent.componentWillSlideIn(slide);\n        var classNamePrefix = reverse ? 'reverse-' : '';\n        transition(currentComponent, '' + classNamePrefix + transitionName + '-enter', _this2.props.delay);\n        transition(prevComponent, '' + classNamePrefix + transitionName + '-exit');\n        _this2.timeout = setTimeout(function () {\n          var _context;\n\n          _this2.setState({\n            children: {\n              current: _this2.state.children.current\n            },\n            transitionName: _this2.props.transitionName\n          });\n\n          currentComponent.componentDidSlideIn((_context = _this2.props).onDidAppear.bind(_context));\n\n          _this2.props.onDidSlide();\n\n          _this2.timeout = null;\n        }, _this2.props.delay);\n      };\n\n      this.props.onWillSlide();\n      prevComponent.componentWillSlideOut(callback);\n    }\n  };\n\n  Slider.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.timeout) clearTimeout(this.timeout);\n  };\n\n  Slider.prototype.render = function render() {\n    var _state$children2 = this.state.children,\n        current = _state$children2.current,\n        prev = _state$children2.prev;\n    var children = prev ? [current, prev] : [current];\n    var childrenToRender = children.map(function (child) {\n      return _react2.default.cloneElement(_react2.default.createElement(Child, {}, child), {\n        ref: child.key,\n        key: child.key\n      });\n    });\n    return _react2.default.createElement(this.props.component, {}, childrenToRender);\n  };\n\n  return Slider;\n}(_react2.default.Component);\n\nexports.default = Slider;\nSlider.propTypes = {\n  children: _propTypes2.default.node.isRequired,\n  component: _propTypes2.default.string,\n  delay: _propTypes2.default.number.isRequired,\n  onDidAppear: _propTypes2.default.func.isRequired,\n  onDidSlide: _propTypes2.default.func.isRequired,\n  onWillSlide: _propTypes2.default.func.isRequired,\n  reverse: _propTypes2.default.bool.isRequired,\n  transitionName: _propTypes2.default.string.isRequired\n};\nSlider.defaultProps = {\n  component: 'span',\n  onDidAppear: function onDidAppear() {},\n  onDidSlide: function onDidSlide() {},\n  onWillSlide: function onWillSlide() {},\n  reverse: false\n};\n\nvar Child = function (_React$Component2) {\n  _inherits(Child, _React$Component2);\n\n  function Child(props) {\n    _classCallCheck(this, Child);\n\n    var _this3 = _possibleConstructorReturn(this, _React$Component2.call(this, props));\n\n    _this3.state = {\n      height: '',\n      originalHeight: '',\n      show: true\n    };\n    return _this3;\n  }\n\n  Child.prototype.componentWillSlideIn = function componentWillSlideIn(slide) {\n    this.setState({\n      height: slide.height,\n      originalHeight: parseInt(window.getComputedStyle(this.node, null).height, 10),\n      show: false\n    });\n  };\n\n  Child.prototype.componentDidSlideIn = function componentDidSlideIn(cb) {\n    var _this4 = this;\n\n    var _state = this.state,\n        height = _state.height,\n        originalHeight = _state.originalHeight;\n\n    if (height === originalHeight) {\n      this.setState({\n        show: true,\n        height: ''\n      });\n      cb();\n    } else {\n      this.cb = cb;\n      var frames = 10;\n      var count = 0;\n      var current = height;\n      var last = originalHeight;\n      var step = Math.abs(current - last) / frames;\n      var dir = current < last ? 1 : -1;\n      var dh = step * dir; // TODO: rAF\n\n      this.t = setInterval(function () {\n        if (count < frames - 1) {\n          _this4.setState({\n            height: current,\n            animating: true\n          });\n\n          current += dh;\n          count++;\n        } else {\n          clearInterval(_this4.t);\n          delete _this4.t;\n\n          _this4.setState({\n            height: '',\n            show: true\n          });\n\n          _this4.cb();\n        }\n      }, 17);\n    }\n  };\n\n  Child.prototype.componentWillSlideOut = function componentWillSlideOut(cb) {\n    var size = window.getComputedStyle(this.node, null).height;\n    cb({\n      height: parseInt(size, 10),\n      reverse: this.reverse\n    });\n  };\n\n  Child.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.t) {\n      clearInterval(this.t);\n      cb();\n    }\n  };\n\n  Child.prototype.render = function render() {\n    var _this5 = this;\n\n    var children = this.props.children;\n    var _state2 = this.state,\n        height = _state2.height,\n        show = _state2.show;\n    return _react2.default.createElement('div', {\n      ref: function ref(node) {\n        return _this5.node = node;\n      },\n      style: height ? {\n        height: height + 'px'\n      } : {}\n    }, _react2.default.createElement('div', {\n      style: {\n        visibility: show ? 'inherit' : 'hidden'\n      }\n    }, children));\n  };\n\n  return Child;\n}(_react2.default.Component);\n\nChild.propTypes = {\n  children: _propTypes2.default.node.isRequired\n};","map":null,"metadata":{},"sourceType":"script"}