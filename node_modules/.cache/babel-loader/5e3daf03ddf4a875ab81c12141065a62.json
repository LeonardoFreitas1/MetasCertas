{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactTransitionGroup = require('react-transition-group');\n\nvar _multisize_slide = require('./multisize_slide');\n\nvar _multisize_slide2 = _interopRequireDefault(_multisize_slide);\n\nvar _global_message = require('./global_message');\n\nvar _global_message2 = _interopRequireDefault(_global_message);\n\nvar _index = require('../../core/index');\n\nvar l = _interopRequireWildcard(_index);\n\nvar _header = require('./header');\n\nvar _header2 = _interopRequireDefault(_header);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar submitSvg = '<svg aria-hidden=\"true\" focusable=\"false\" width=\"43px\" height=\"42px\" viewBox=\"0 0 43 42\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\"><g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\"><g id=\"Lock\" sketch:type=\"MSArtboardGroup\" transform=\"translate(-280.000000, -3592.000000)\"><g id=\"SMS\" sketch:type=\"MSLayerGroup\" transform=\"translate(153.000000, 3207.000000)\"><g id=\"Group\" sketch:type=\"MSShapeGroup\"><g id=\"Login\" transform=\"translate(0.000000, 369.000000)\"><g id=\"Btn\"><g id=\"Oval-302-+-Shape\" transform=\"translate(128.000000, 17.000000)\"><circle id=\"Oval-302\" stroke=\"#FFFFFF\" stroke-width=\"2\" cx=\"20.5\" cy=\"20\" r=\"20\"></circle><path d=\"M17.8,15.4 L19.2,14 L25.2,20 L19.2,26 L17.8,24.6 L22.4,20 L17.8,15.4 Z\" id=\"Shape\" fill=\"#FFFFFF\"></path></g></g></g></g></g></g></g></svg>';\nvar submitText = '<svg aria-hidden=\"true\" focusable=\"false\" class=\"icon-text\" width=\"8px\" height=\"12px\" viewBox=\"0 0 8 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"Symbols\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"><g id=\"Web/Submit/Active\" transform=\"translate(-148.000000, -32.000000)\" fill=\"#FFFFFF\"><polygon id=\"Shape\" points=\"148 33.4 149.4 32 155.4 38 149.4 44 148 42.6 152.6 38\"></polygon></g></g></svg>';\n\nvar SubmitButton = function (_React$Component) {\n  _inherits(SubmitButton, _React$Component);\n\n  function SubmitButton() {\n    _classCallCheck(this, SubmitButton);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  SubmitButton.prototype.handleSubmit = function handleSubmit() {\n    var _props = this.props,\n        label = _props.label,\n        screenName = _props.screenName,\n        contentProps = _props.contentProps;\n    var model = contentProps.model;\n\n    if (screenName === 'main.signUp') {\n      l.emitEvent(model, 'signup submit');\n    } else if (screenName === 'main.login') {\n      l.emitEvent(model, 'signin submit');\n    } else if (screenName === 'forgotPassword') {\n      l.emitEvent(model, 'forgot_password submit');\n    } else if (screenName === 'socialOrEmail') {\n      l.emitEvent(model, 'socialOrEmail submit');\n    } else if (screenName === 'socialOrPhoneNumber') {\n      l.emitEvent(model, 'socialOrPhoneNumber submit');\n    } else if (screenName === 'vcode') {\n      l.emitEvent(model, 'vcode submit');\n    }\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(label, screenName);\n    }\n  };\n\n  SubmitButton.prototype.focus = function focus() {\n    _reactDom2.default.findDOMNode(this).focus();\n  };\n\n  SubmitButton.prototype.render = function render() {\n    var _props2 = this.props,\n        color = _props2.color,\n        disabled = _props2.disabled,\n        label = _props2.label,\n        display = _props2.display;\n    var content = label ? _react2.default.createElement('span', {\n      className: 'auth0-label-submit'\n    }, label, _react2.default.createElement('span', {\n      dangerouslySetInnerHTML: {\n        __html: submitText\n      }\n    })) : _react2.default.createElement('span', {\n      dangerouslySetInnerHTML: {\n        __html: submitSvg\n      }\n    });\n    return _react2.default.createElement('button', {\n      className: 'auth0-lock-submit',\n      disabled: disabled,\n      style: {\n        backgroundColor: color,\n        display: display\n      },\n      onClick: this.handleSubmit.bind(this),\n      name: 'submit',\n      type: 'submit',\n      'aria-label': label ? label : 'Submit'\n    }, _react2.default.createElement('div', {\n      className: 'auth0-loading-container'\n    }, _react2.default.createElement('div', {\n      className: 'auth0-loading'\n    })), content);\n  };\n\n  return SubmitButton;\n}(_react2.default.Component);\n\nSubmitButton.propTypes = {\n  color: _propTypes2.default.string.isRequired,\n  disabled: _propTypes2.default.bool,\n  label: _propTypes2.default.string,\n  screenName: _propTypes2.default.string,\n  onSubmit: _propTypes2.default.func,\n  contentProps: _propTypes2.default.object\n};\nvar MESSAGE_ANIMATION_DURATION = 250;\nvar AUXILIARY_ANIMATION_DURATION = 350;\n\nvar Chrome = function (_React$Component2) {\n  _inherits(Chrome, _React$Component2);\n\n  function Chrome(props) {\n    _classCallCheck(this, Chrome);\n\n    var _this2 = _possibleConstructorReturn(this, _React$Component2.call(this, props));\n\n    _this2.state = {\n      moving: false,\n      reverse: false\n    };\n    return _this2;\n  }\n\n  Chrome.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this3 = this;\n\n    var _props3 = this.props,\n        auxiliaryPane = _props3.auxiliaryPane,\n        showSubmitButton = _props3.showSubmitButton;\n    var delayingShowSubmitButton = this.state.delayingShowSubmitButton;\n\n    if (!showSubmitButton && nextProps.showSubmitButton && !delayingShowSubmitButton) {\n      this.setState({\n        delayingShowSubmitButton: true\n      });\n    }\n\n    if (!auxiliaryPane && nextProps.auxiliaryPane) {\n      this.auxiliaryPaneTriggerInput = global.document.activeElement;\n      this.setState({\n        moving: true\n      });\n    }\n\n    if (auxiliaryPane && !nextProps.auxiliaryPane) {\n      // TODO clear timeout\n      setTimeout(function () {\n        return _this3.setState({\n          moving: false\n        });\n      }, AUXILIARY_ANIMATION_DURATION + 50);\n    }\n  };\n\n  Chrome.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this4 = this;\n\n    var _props4 = this.props,\n        autofocus = _props4.autofocus,\n        auxiliaryPane = _props4.auxiliaryPane,\n        error = _props4.error,\n        screenName = _props4.screenName;\n    if (!autofocus) return;\n\n    if (auxiliaryPane && !prevProps.auxiliaryPane) {\n      var input = this.findAutofocusInput(this.refs.auxiliary);\n\n      if (input) {\n        // TODO clear timeout\n        setTimeout(function () {\n          return input.focus();\n        }, AUXILIARY_ANIMATION_DURATION);\n      }\n\n      return;\n    }\n\n    if (!auxiliaryPane && prevProps.auxiliaryPane) {\n      if (this.auxiliaryPaneTriggerInput) {\n        // TODO clear timeout\n        setTimeout(function () {\n          return _this4.auxiliaryPaneTriggerInput.focus();\n        }, AUXILIARY_ANIMATION_DURATION);\n      }\n\n      return;\n    }\n\n    if (screenName !== prevProps.screenName) {\n      var _input = this.findAutofocusInput();\n\n      if (_input) {\n        if (this.mainScreenName(prevProps.screenName) !== this.mainScreenName()) {\n          this.inputToFocus = _input;\n        } else {\n          // TODO clear timeout\n          setTimeout(function () {\n            return _input.focus();\n          }, 17);\n        }\n      }\n    }\n  };\n\n  Chrome.prototype.onWillSlide = function onWillSlide() {\n    this.setState({\n      moving: true\n    });\n    this.sliding = true;\n  };\n\n  Chrome.prototype.onDidSlide = function onDidSlide() {\n    this.sliding = false;\n    this.setState({\n      reverse: false\n    });\n  };\n\n  Chrome.prototype.onDidAppear = function onDidAppear() {\n    this.setState({\n      moving: false\n    });\n\n    if (this.state.delayingShowSubmitButton) {\n      this.setState({\n        delayingShowSubmitButton: false\n      });\n    }\n\n    if (this.inputToFocus) {\n      this.inputToFocus.focus();\n      delete this.inputToFocus;\n    }\n  };\n\n  Chrome.prototype.mainScreenName = function mainScreenName(str) {\n    return (str || this.props.screenName || '').split('.')[0];\n  };\n\n  Chrome.prototype.findAutofocusInput = function findAutofocusInput(ref) {\n    return _reactDom2.default.findDOMNode(ref || this.refs.screen).querySelector('input');\n  };\n\n  Chrome.prototype.focusError = function focusError() {\n    var node = _reactDom2.default.findDOMNode(this.refs.screen); // TODO: make the error input selector configurable via props.\n\n\n    var error = node.querySelector('.auth0-lock-error input');\n\n    if (error) {\n      error.focus();\n    }\n  };\n\n  Chrome.prototype.render = function render() {\n    var _this5 = this;\n\n    var _props5 = this.props,\n        avatar = _props5.avatar,\n        auxiliaryPane = _props5.auxiliaryPane,\n        backHandler = _props5.backHandler,\n        contentComponent = _props5.contentComponent,\n        contentProps = _props5.contentProps,\n        disableSubmitButton = _props5.disableSubmitButton,\n        error = _props5.error,\n        info = _props5.info,\n        isSubmitting = _props5.isSubmitting,\n        logo = _props5.logo,\n        primaryColor = _props5.primaryColor,\n        screenName = _props5.screenName,\n        showSubmitButton = _props5.showSubmitButton,\n        submitButtonLabel = _props5.submitButtonLabel,\n        success = _props5.success,\n        terms = _props5.terms,\n        title = _props5.title,\n        classNames = _props5.classNames,\n        scrollGlobalMessagesIntoView = _props5.scrollGlobalMessagesIntoView;\n    var _state = this.state,\n        delayingShowSubmitButton = _state.delayingShowSubmitButton,\n        moving = _state.moving,\n        reverse = _state.reverse;\n    var backgroundUrl = void 0,\n        name = void 0;\n\n    if (avatar) {\n      backgroundUrl = avatar;\n      name = title;\n    } else {\n      backgroundUrl = logo;\n      name = '';\n    }\n\n    var shouldShowSubmitButton = showSubmitButton && !delayingShowSubmitButton;\n\n    function wrapGlobalMessage(message) {\n      return typeof message === 'string' ? _react2.default.createElement('span', {\n        dangerouslySetInnerHTML: {\n          __html: message\n        }\n      }) : message;\n    }\n\n    var globalError = error ? _react2.default.createElement(_global_message2.default, {\n      key: 'global-error',\n      message: wrapGlobalMessage(error),\n      type: 'error',\n      scrollIntoView: scrollGlobalMessagesIntoView\n    }) : null;\n    var globalSuccess = success ? _react2.default.createElement(_global_message2.default, {\n      key: 'global-success',\n      message: wrapGlobalMessage(success),\n      type: 'success',\n      scrollIntoView: scrollGlobalMessagesIntoView\n    }) : null;\n    var globalInfo = info ? _react2.default.createElement(_global_message2.default, {\n      key: 'global-info',\n      message: wrapGlobalMessage(info),\n      type: 'info',\n      scrollIntoView: scrollGlobalMessagesIntoView\n    }) : null;\n    var Content = contentComponent;\n    var className = 'auth0-lock-cred-pane';\n    var isQuiet = !moving && !delayingShowSubmitButton;\n    className += isQuiet ? ' auth0-lock-quiet' : ' auth0-lock-moving';\n    return _react2.default.createElement('div', {\n      className: className\n    }, _react2.default.createElement('div', {\n      className: 'auth0-lock-cred-pane-internal-wrapper'\n    }, _react2.default.createElement(_header2.default, {\n      title: title,\n      name: name,\n      backHandler: backHandler && this.handleBack.bind(this),\n      backgroundUrl: backgroundUrl,\n      backgroundColor: primaryColor,\n      logoUrl: logo\n    }), _react2.default.createElement('div', {\n      className: 'auth0-lock-content-wrapper'\n    }, _react2.default.createElement(_reactTransitionGroup.TransitionGroup, null, _react2.default.createElement(_reactTransitionGroup.CSSTransition, {\n      classNames: 'global-message',\n      timeout: MESSAGE_ANIMATION_DURATION\n    }, _react2.default.createElement('div', null, globalSuccess, globalError, globalInfo))), _react2.default.createElement('div', {\n      style: {\n        position: 'relative'\n      },\n      ref: 'screen'\n    }, _react2.default.createElement(_multisize_slide2.default, {\n      delay: 550,\n      onDidAppear: this.onDidAppear.bind(this),\n      onDidSlide: this.onDidSlide.bind(this),\n      onWillSlide: this.onWillSlide.bind(this),\n      transitionName: classNames,\n      reverse: reverse\n    }, _react2.default.createElement('div', {\n      key: this.mainScreenName(),\n      className: 'auth0-lock-view-content'\n    }, _react2.default.createElement('div', {\n      style: {\n        position: 'relative'\n      }\n    }, _react2.default.createElement('div', {\n      className: 'auth0-lock-body-content'\n    }, _react2.default.createElement('div', {\n      className: 'auth0-lock-content'\n    }, _react2.default.createElement('div', {\n      className: 'auth0-lock-form'\n    }, _react2.default.createElement(Content, _extends({\n      focusSubmit: this.focusSubmit.bind(this)\n    }, contentProps)))), terms && _react2.default.createElement('small', {\n      className: 'auth0-lock-terms'\n    }, terms))))))), _react2.default.createElement(SubmitButton, {\n      color: primaryColor,\n      disabled: disableSubmitButton,\n      screenName: screenName,\n      contentProps: contentProps,\n      label: submitButtonLabel,\n      ref: function ref(el) {\n        return _this5.submitButton = el;\n      },\n      display: shouldShowSubmitButton ? 'block' : 'none'\n    }), auxiliaryPane && _react2.default.createElement(_reactTransitionGroup.TransitionGroup, null, _react2.default.createElement(_reactTransitionGroup.CSSTransition, {\n      ref: 'auxiliary',\n      classNames: 'slide',\n      timeout: AUXILIARY_ANIMATION_DURATION\n    }, auxiliaryPane))));\n  };\n\n  Chrome.prototype.focusSubmit = function focusSubmit() {\n    this.submitButton.focus();\n  };\n\n  Chrome.prototype.handleBack = function handleBack() {\n    if (this.sliding) return;\n    var backHandler = this.props.backHandler;\n    this.setState({\n      reverse: true\n    });\n    backHandler();\n  };\n\n  return Chrome;\n}(_react2.default.Component);\n\nexports.default = Chrome;\nChrome.propTypes = {\n  autofocus: _propTypes2.default.bool.isRequired,\n  avatar: _propTypes2.default.string,\n  auxiliaryPane: _propTypes2.default.element,\n  backHandler: _propTypes2.default.func,\n  contentComponent: _propTypes2.default.func.isRequired,\n  // TODO: it also can be a class component\n  contentProps: _propTypes2.default.object.isRequired,\n  disableSubmitButton: _propTypes2.default.bool.isRequired,\n  error: _propTypes2.default.node,\n  info: _propTypes2.default.node,\n  isSubmitting: _propTypes2.default.bool.isRequired,\n  logo: _propTypes2.default.string.isRequired,\n  primaryColor: _propTypes2.default.string.isRequired,\n  screenName: _propTypes2.default.string.isRequired,\n  showSubmitButton: _propTypes2.default.bool.isRequired,\n  submitButtonLabel: _propTypes2.default.string,\n  success: _propTypes2.default.node,\n  terms: _propTypes2.default.element,\n  title: _propTypes2.default.string,\n  classNames: _propTypes2.default.string.isRequired,\n  scrollGlobalMessagesIntoView: _propTypes2.default.bool\n};\nChrome.defaultProps = {\n  autofocus: false,\n  disableSubmitButton: false,\n  showSubmitButton: true,\n  scrollGlobalMessagesIntoView: true\n};","map":null,"metadata":{},"sourceType":"script"}