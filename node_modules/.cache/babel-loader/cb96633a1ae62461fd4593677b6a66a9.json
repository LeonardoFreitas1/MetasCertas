{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.setupLock = setupLock;\nexports.handleAuthCallback = handleAuthCallback;\nexports.resumeAuth = resumeAuth;\nexports.openLock = openLock;\nexports.closeLock = closeLock;\nexports.removeLock = removeLock;\nexports.updateLock = updateLock;\nexports.pinLoadingPane = pinLoadingPane;\nexports.unpinLoadingPane = unpinLoadingPane;\nexports.validateAndSubmit = validateAndSubmit;\nexports.logIn = logIn;\nexports.checkSession = checkSession;\nexports.logInSuccess = logInSuccess;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _web_api = require('./web_api');\n\nvar _web_api2 = _interopRequireDefault(_web_api);\n\nvar _index = require('../store/index');\n\nvar _remote_data = require('./remote_data');\n\nvar _index2 = require('./index');\n\nvar l = _interopRequireWildcard(_index2);\n\nvar _preload_utils = require('../utils/preload_utils');\n\nvar _container = require('../ui/box/container');\n\nvar _index3 = require('../field/index');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction setupLock(id, clientID, domain, options, hookRunner, emitEventFn) {\n  var m = l.setup(id, clientID, domain, options, hookRunner, emitEventFn);\n  m = (0, _remote_data.syncRemoteData)(m);\n  (0, _preload_utils.img)(l.ui.logo(m) || _container.defaultProps.logo);\n\n  _web_api2.default.setupClient(id, clientID, domain, l.withAuthOptions(m, _extends({}, options, {\n    popupOptions: l.ui.popupOptions(m)\n  })));\n\n  m = l.runHook(m, 'didInitialize', options);\n  (0, _index.swap)(_index.setEntity, 'lock', id, m);\n  return m;\n}\n\nfunction handleAuthCallback() {\n  var ms = (0, _index.read)(_index.getCollection, 'lock');\n  var keepHash = ms.filter(function (m) {\n    return !l.hashCleanup(m);\n  }).size > 0;\n  var urlWithoutHash = global.location.href.split('#')[0];\n\n  var callback = function callback(error, authResult) {\n    var parsed = !!(error || authResult);\n\n    if (parsed && !keepHash) {\n      global.history.replaceState(null, '', urlWithoutHash);\n    }\n  };\n\n  resumeAuth(global.location.hash, callback);\n}\n\nfunction resumeAuth(hash, callback) {\n  var ms = (0, _index.read)(_index.getCollection, 'lock');\n  ms.forEach(function (m) {\n    return l.auth.redirect(m) && parseHash(m, hash, callback);\n  });\n}\n\nfunction parseHash(m, hash, cb) {\n  _web_api2.default.parseHash(l.id(m), hash, function (error, authResult) {\n    if (error) {\n      l.emitHashParsedEvent(m, error);\n    } else {\n      l.emitHashParsedEvent(m, authResult);\n    }\n\n    if (error) {\n      l.emitAuthorizationErrorEvent(m, error);\n    } else if (authResult) {\n      l.emitAuthenticatedEvent(m, authResult);\n    }\n\n    cb(error, authResult);\n  });\n}\n\nfunction openLock(id, opts) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n\n  if (!m) {\n    throw new Error(\"The Lock can't be opened again after it has been destroyed\");\n  }\n\n  if (l.rendering(m)) {\n    return false;\n  }\n\n  if (opts.flashMessage) {\n    var supportedTypes = ['error', 'success', 'info'];\n\n    if (!opts.flashMessage.type || supportedTypes.indexOf(opts.flashMessage.type) === -1) {\n      return l.emitUnrecoverableErrorEvent(m, \"'flashMessage' must provide a valid type ['error','success','info']\");\n    }\n\n    if (!opts.flashMessage.text) {\n      return l.emitUnrecoverableErrorEvent(m, \"'flashMessage' must provide a text\");\n    }\n  }\n\n  l.emitEvent(m, 'show');\n  (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n    m = l.overrideOptions(m, opts);\n    m = l.filterConnections(m);\n    m = l.runHook(m, 'willShow', opts);\n    return l.render(m);\n  });\n  return true;\n}\n\nfunction closeLock(id) {\n  var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {}; // Do nothing when the Lock can't be closed, unless closing is forced.\n\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n\n  if (!l.ui.closable(m) && !force || !l.rendering(m)) {\n    return;\n  }\n\n  l.emitEvent(m, 'hide'); // If it is a modal, stop rendering an reset after a second,\n  // otherwise just reset.\n\n  if (l.ui.appendContainer(m)) {\n    (0, _index.swap)(_index.updateEntity, 'lock', id, l.stopRendering);\n    setTimeout(function () {\n      (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n        m = (0, _index3.hideInvalidFields)(m);\n        m = l.reset(m);\n        m = (0, _index3.clearFields)(m);\n        return m;\n      });\n      m = (0, _index.read)(_index.getEntity, 'lock', id);\n      callback(m);\n    }, 1000);\n  } else {\n    (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n      m = (0, _index3.hideInvalidFields)(m);\n      m = l.reset(m);\n      m = (0, _index3.clearFields)(m);\n      return m;\n    });\n    callback(m);\n  }\n}\n\nfunction removeLock(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, l.stopRendering);\n  (0, _index.swap)(_index.removeEntity, 'lock', id);\n}\n\nfunction updateLock(id, f) {\n  return (0, _index.swap)(_index.updateEntity, 'lock', id, f);\n}\n\nfunction pinLoadingPane(id) {\n  var lock = (0, _index.read)(_index.getEntity, 'lock', id);\n\n  if (!lock.get('isLoadingPanePinned')) {\n    (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n      return m.set('isLoadingPanePinned', true);\n    });\n  }\n}\n\nfunction unpinLoadingPane(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n    return m.set('isLoadingPanePinned', false);\n  });\n}\n\nfunction validateAndSubmit(id) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var f = arguments[2];\n  (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n    var allFieldsValid = fields.reduce(function (r, x) {\n      return r && (0, _index3.isFieldValid)(m, x);\n    }, true);\n    return allFieldsValid ? l.setSubmitting(m, true) : fields.reduce(function (r, x) {\n      return (0, _index3.showInvalidField)(r, x);\n    }, m);\n  });\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n\n  if (l.submitting(m)) {\n    f(m);\n  }\n}\n\nfunction logIn(id, fields) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var logInErrorHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (_id, error, _fields, next) {\n    return next();\n  };\n  validateAndSubmit(id, fields, function (m) {\n    _web_api2.default.logIn(id, params, l.auth.params(m).toJS(), function (error, result) {\n      if (error) {\n        setTimeout(function () {\n          return logInError(id, fields, error, logInErrorHandler);\n        }, 250);\n      } else {\n        logInSuccess(id, result);\n      }\n    });\n  });\n}\n\nfunction checkSession(id) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n    return l.setSubmitting(m, true);\n  });\n\n  _web_api2.default.checkSession(id, params, function (err, result) {\n    if (err) {\n      return logInError(id, [], err);\n    }\n\n    return logInSuccess(id, result);\n  });\n}\n\nfunction logInSuccess(id, result) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n\n  if (!l.ui.autoclose(m)) {\n    (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n      m = l.setSubmitting(m, false);\n      return l.setLoggedIn(m, true);\n    });\n    l.emitAuthenticatedEvent(m, result);\n  } else {\n    closeLock(id, false, function (m1) {\n      return l.emitAuthenticatedEvent(m1, result);\n    });\n  }\n}\n\nfunction logInError(id, fields, error) {\n  var localHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (_id, _error, _fields, next) {\n    return next();\n  };\n  var errorCode = error.error || error.code;\n  localHandler(id, error, fields, function () {\n    return setTimeout(function () {\n      var m = (0, _index.read)(_index.getEntity, 'lock', id);\n      var errorMessage = l.loginErrorMessage(m, error, loginType(fields));\n      var errorCodesThatEmitAuthorizationErrorEvent = ['blocked_user', 'rule_error', 'lock.unauthorized', 'invalid_user_password', 'login_required'];\n\n      if (errorCodesThatEmitAuthorizationErrorEvent.indexOf(errorCode) > -1) {\n        l.emitAuthorizationErrorEvent(m, error);\n      }\n\n      (0, _index.swap)(_index.updateEntity, 'lock', id, l.setSubmitting, false, errorMessage);\n    }, 0);\n  });\n  (0, _index.swap)(_index.updateEntity, 'lock', id, l.setSubmitting, false);\n}\n\nfunction loginType(fields) {\n  if (!fields) return;\n  if (~fields.indexOf('vcode')) return 'code';\n  if (~fields.indexOf('username')) return 'username';\n  if (~fields.indexOf('email')) return 'email';\n}","map":null,"metadata":{},"sourceType":"script"}