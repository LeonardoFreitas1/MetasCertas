{"ast":null,"code":"var charsets = require('./lib/rules/contains').charsets;\n\nvar upperCase = charsets.upperCase;\nvar lowerCase = charsets.lowerCase;\nvar numbers = charsets.numbers;\nvar specialCharacters = charsets.specialCharacters;\n\nvar PasswordPolicy = require('./lib/policy');\n\nvar none = new PasswordPolicy({\n  length: {\n    minLength: 1\n  }\n});\nvar low = new PasswordPolicy({\n  length: {\n    minLength: 6\n  }\n});\nvar fair = new PasswordPolicy({\n  length: {\n    minLength: 8\n  },\n  contains: {\n    expressions: [lowerCase, upperCase, numbers]\n  }\n});\nvar good = new PasswordPolicy({\n  length: {\n    minLength: 8\n  },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  }\n});\nvar excellent = new PasswordPolicy({\n  length: {\n    minLength: 10\n  },\n  containsAtLeast: {\n    atLeast: 3,\n    expressions: [lowerCase, upperCase, numbers, specialCharacters]\n  },\n  identicalChars: {\n    max: 2\n  }\n});\nvar policiesByName = {\n  none: none,\n  low: low,\n  fair: fair,\n  good: good,\n  excellent: excellent\n};\n/**\n * Creates a password policy.\n *\n * @param {String} policyName Name of policy to use.\n */\n\nmodule.exports = function (policyName) {\n  var policy = policiesByName[policyName] || policiesByName.none;\n  return {\n    /**\n     * Checks that a password meets this policy\n     *\n     * @method check\n     * @param {String} password\n     */\n    check: function check(password) {\n      return policy.check(password);\n    },\n\n    /**\n     * @method assert\n     * Asserts that a passord meets this policy else throws an exception.\n     *\n     * @param {String} password\n     */\n    assert: function assert(password) {\n      return policy.assert(password);\n    },\n    missing: function missing(password) {\n      return policy.missing(password);\n    },\n    missingAsMarkdown: function missingAsMarkdown(password) {\n      return policy.missingAsMarkdown(password);\n    },\n    explain: function explain() {\n      return policy.explain();\n    },\n\n    /**\n     * Friendly string representation of the policy\n     * @method toString\n     */\n    toString: function toString() {\n      return policy.toString();\n    }\n  };\n};\n\nmodule.exports.PasswordPolicy = PasswordPolicy;\nmodule.exports.charsets = charsets; // module.exports.rulesToApply = rulesToApply;","map":null,"metadata":{},"sourceType":"script"}