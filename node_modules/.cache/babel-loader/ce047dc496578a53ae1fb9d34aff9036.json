{"ast":null,"code":"var _ = {};\nvar root = typeof self == 'object' && self.self === self && self || typeof global == 'object' && global.global === global && global || this || {};\nvar nativeIsArray = Array.isArray;\nvar nativeKeys = Object.keys;\nvar ObjProto = Object.prototype;\nvar toString = ObjProto.toString;\n\nvar shallowProperty = function shallowProperty(key) {\n  return function (obj) {\n    return obj == null ? void 0 : obj[key];\n  };\n};\n\nvar MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\nvar getLength = shallowProperty('length');\n\nvar isArrayLike = function isArrayLike(collection) {\n  var length = getLength(collection);\n  return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n}; // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n\n\nvar typeNames = ['Arguments', 'Function', 'String', 'Number'];\n\nfunction loopAsign(name) {\n  _['is' + name] = function (obj) {\n    return toString.call(obj) === '[object ' + name + ']';\n  };\n}\n\nfor (var a = 0; a < typeNames.length; a++) {\n  loopAsign(typeNames[a]);\n}\n\nvar nodelist = root.document && root.document.childNodes;\n\nif (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n  _.isFunction = function (obj) {\n    return typeof obj == 'function' || false;\n  };\n}\n\n_.identity = function (value) {\n  return value;\n};\n\n_.keys = function (obj) {\n  if (!_.isObject(obj)) return [];\n  if (nativeKeys) return nativeKeys(obj);\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n\n_.isObject = function (obj) {\n  var type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n};\n\n_.isArray = nativeIsArray || function (obj) {\n  return toString.call(obj) === '[object Array]';\n};\n\n_.isEmpty = function (obj) {\n  if (obj == null) return true;\n  if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n  return _.keys(obj).length === 0;\n};\n\n_.isNaN = function (obj) {\n  return _.isNumber(obj) && isNaN(obj);\n};\n\nmodule.exports = _;","map":null,"metadata":{},"sourceType":"script"}