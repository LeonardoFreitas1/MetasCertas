{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.STRATEGIES = undefined;\nexports.initSocial = initSocial;\nexports.displayName = displayName;\nexports.processSocialOptions = processSocialOptions;\nexports.socialConnections = socialConnections;\nexports.authButtonsTheme = authButtonsTheme;\nexports.useBigButtons = useBigButtons;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _index = require('../../core/index');\n\nvar l = _interopRequireWildcard(_index);\n\nvar _data_utils = require('../../utils/data_utils');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // TODO: Android version also has \"unknonwn-social\", \"evernote\" and\n// \"evernote-sandbox\"\"evernote\" in the list, considers \"google-openid\"\n// to be enterprise and doesn't contain \"salesforce-community\". See\n// https://github.com/auth0/Lock.Android/blob/98262cb7110e5d1c8a97e1129faf2621c1d8d111/lock/src/main/java/com/auth0/android/lock/utils/Strategies.java\n\n\nvar STRATEGIES = exports.STRATEGIES = {\n  amazon: 'Amazon',\n  aol: 'Aol',\n  baidu: '百度',\n  bitbucket: 'Bitbucket',\n  box: 'Box',\n  dropbox: 'Dropbox',\n  dwolla: 'Dwolla',\n  ebay: 'ebay',\n  exact: 'Exact',\n  facebook: 'Facebook',\n  fitbit: 'Fitbit',\n  github: 'GitHub',\n  'google-openid': 'Google OpenId',\n  'google-oauth2': 'Google',\n  instagram: 'Instagram',\n  linkedin: 'LinkedIn',\n  miicard: 'miiCard',\n  paypal: 'PayPal',\n  'paypal-sandbox': 'PayPal Sandbox',\n  planningcenter: 'Planning Center',\n  renren: '人人',\n  salesforce: 'Salesforce',\n  'salesforce-community': 'Salesforce Community',\n  'salesforce-sandbox': 'Salesforce (sandbox)',\n  evernote: 'Evernote',\n  'evernote-sandbox': 'Evernote (sandbox)',\n  shopify: 'Shopify',\n  soundcloud: 'Soundcloud',\n  thecity: 'The City',\n  'thecity-sandbox': 'The City (sandbox)',\n  thirtysevensignals: '37 Signals',\n  twitter: 'Twitter',\n  vkontakte: 'vKontakte',\n  windowslive: 'Microsoft Account',\n  wordpress: 'Wordpress',\n  yahoo: 'Yahoo!',\n  yammer: 'Yammer',\n  yandex: 'Yandex',\n  weibo: '新浪微博'\n};\n\nvar _dataFns = (0, _data_utils.dataFns)(['social']),\n    get = _dataFns.get,\n    tget = _dataFns.tget,\n    initNS = _dataFns.initNS;\n\nfunction initSocial(m, options) {\n  return initNS(m, _immutable2.default.fromJS(processSocialOptions(options)));\n}\n\nfunction displayName(connection) {\n  if (['oauth1', 'oauth2'].indexOf(connection.get('strategy')) !== -1) {\n    return connection.get('name');\n  }\n\n  return STRATEGIES[connection.get('strategy')];\n}\n\nfunction processSocialOptions(options) {\n  var result = {};\n  var socialButtonStyle = options.socialButtonStyle; // TODO: emit warnings\n\n  if (['big', 'small'].indexOf(socialButtonStyle) > -1) {\n    result.socialButtonStyle = socialButtonStyle;\n  }\n\n  return result;\n}\n\nfunction socialConnections(m) {\n  return l.connections(m, 'social');\n}\n\nfunction authButtonsTheme(m) {\n  return l.ui.authButtonsTheme(m);\n}\n\nfunction useBigButtons(m, notFoundLimit) {\n  var style = tget(m, 'socialButtonStyle') || get(m, 'socialButtonStyle');\n  return style ? style === 'big' : l.connections(m, 'social').count() <= notFoundLimit;\n}","map":null,"metadata":{},"sourceType":"script"}