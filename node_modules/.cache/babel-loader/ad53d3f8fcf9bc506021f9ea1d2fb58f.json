{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.initDatabase = initDatabase;\nexports.overrideDatabaseOptions = overrideDatabaseOptions;\nexports.defaultDatabaseConnection = defaultDatabaseConnection;\nexports.defaultDatabaseConnectionName = defaultDatabaseConnectionName;\nexports.databaseConnection = databaseConnection;\nexports.databaseConnectionName = databaseConnectionName;\nexports.forgotPasswordLink = forgotPasswordLink;\nexports.signUpLink = signUpLink;\nexports.setScreen = setScreen;\nexports.getScreen = getScreen;\nexports.availableScreens = availableScreens;\nexports.getInitialScreen = getInitialScreen;\nexports.hasInitialScreen = hasInitialScreen;\nexports.databaseConnectionRequiresUsername = databaseConnectionRequiresUsername;\nexports.databaseUsernameStyle = databaseUsernameStyle;\nexports.databaseLogInWithEmail = databaseLogInWithEmail;\nexports.databaseUsernameValue = databaseUsernameValue;\nexports.authWithUsername = authWithUsername;\nexports.hasScreen = hasScreen;\nexports.shouldAutoLogin = shouldAutoLogin;\nexports.passwordStrengthPolicy = passwordStrengthPolicy;\nexports.additionalSignUpFields = additionalSignUpFields;\nexports.showTerms = showTerms;\nexports.mustAcceptTerms = mustAcceptTerms;\nexports.termsAccepted = termsAccepted;\nexports.toggleTermsAcceptance = toggleTermsAcceptance;\nexports.resolveAdditionalSignUpFields = resolveAdditionalSignUpFields;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _index = require('../../core/index');\n\nvar l = _interopRequireWildcard(_index);\n\nvar _index2 = require('../../field/index');\n\nvar _data_utils = require('../../utils/data_utils');\n\nvar _sync = require('../../sync');\n\nvar _sync2 = _interopRequireDefault(_sync);\n\nvar _trim = require('trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _tenant = require('../../core/tenant');\n\nvar _enterprise = require('../../connection/enterprise');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _dataFns = (0, _data_utils.dataFns)(['database']),\n    get = _dataFns.get,\n    initNS = _dataFns.initNS,\n    tget = _dataFns.tget,\n    tset = _dataFns.tset;\n\nfunction initDatabase(m, options) {\n  m = initNS(m, _immutable2.default.fromJS(processDatabaseOptions(options)));\n  m = resolveAdditionalSignUpFields(m);\n  return m;\n}\n\nfunction assertMaybeBoolean(opts, name) {\n  var valid = opts[name] === undefined || typeof opts[name] === 'boolean';\n  if (!valid) l.warn(opts, 'The `' + name + '` option will be ignored, because it is not a booelan.');\n  return valid;\n}\n\nfunction assertMaybeEnum(opts, name, a) {\n  var valid = opts[name] === undefined || a.indexOf(opts[name]) > -1;\n  if (!valid) l.warn(opts, 'The `' + name + '` option will be ignored, because it is not one of the following allowed values: ' + a.map(function (x) {\n    return JSON.stringify(x);\n  }).join(', ') + '.');\n  return valid;\n}\n\nfunction assertMaybeString(opts, name) {\n  var valid = opts[name] === undefined || typeof opts[name] === 'string' && (0, _trim2.default)(opts[name]).length > 0;\n  if (!valid) l.warn(opts, 'The `' + name + '` option will be ignored, because it is not a non-empty string.');\n  return valid;\n}\n\nfunction assertMaybeArray(opts, name) {\n  var valid = opts[name] === undefined || global.Array.isArray(opts[name]);\n  if (!valid) l.warn(opts, 'The `' + name + '` option will be ignored, because it is not an array.');\n  return valid;\n}\n\nfunction processDatabaseOptions(opts) {\n  var additionalSignUpFields = opts.additionalSignUpFields,\n      defaultDatabaseConnection = opts.defaultDatabaseConnection,\n      forgotPasswordLink = opts.forgotPasswordLink,\n      loginAfterSignUp = opts.loginAfterSignUp,\n      mustAcceptTerms = opts.mustAcceptTerms,\n      showTerms = opts.showTerms,\n      signUpLink = opts.signUpLink,\n      usernameStyle = opts.usernameStyle;\n\n  var _processScreenOptions = processScreenOptions(opts),\n      initialScreen = _processScreenOptions.initialScreen,\n      screens = _processScreenOptions.screens;\n\n  if (!assertMaybeEnum(opts, 'usernameStyle', ['email', 'username'])) {\n    usernameStyle = undefined;\n  }\n\n  if (!assertMaybeString(opts, 'defaultDatabaseConnection')) {\n    defaultDatabaseConnection = undefined;\n  }\n\n  if (!assertMaybeString(opts, 'forgotPasswordLink')) {\n    forgotPasswordLink = undefined;\n  }\n\n  if (!assertMaybeString(opts, 'signUpLink')) {\n    signUpLink = undefined;\n  }\n\n  if (!assertMaybeBoolean(opts, 'mustAcceptTerms')) {\n    mustAcceptTerms = undefined;\n  }\n\n  if (!assertMaybeBoolean(opts, 'showTerms')) {\n    showTerms = true;\n  }\n\n  if (!assertMaybeArray(opts, 'additionalSignUpFields')) {\n    additionalSignUpFields = undefined;\n  } else if (additionalSignUpFields) {\n    additionalSignUpFields = additionalSignUpFields.reduce(function (r, x) {\n      var icon = x.icon,\n          name = x.name,\n          options = x.options,\n          placeholder = x.placeholder,\n          prefill = x.prefill,\n          type = x.type,\n          validator = x.validator,\n          value = x.value;\n      var filter = true;\n      var reservedNames = ['email', 'username', 'password'];\n\n      if (typeof name != 'string' || !name.match(/^[a-zA-Z0-9_]+$/) || reservedNames.indexOf(name) > -1) {\n        l.warn(opts, 'Ignoring an element of `additionalSignUpFields` because it does not contain valid `name` property. Every element of `additionalSignUpFields` must be an object with a `name` property that is a non-empty string consisting of letters, numbers and underscores. The following names are reserved, and therefore, cannot be used: ' + reservedNames.join(', ') + '.');\n        filter = false;\n      }\n\n      if (type !== 'hidden' && (typeof placeholder != 'string' || !placeholder)) {\n        l.warn(opts, 'Ignoring an element of `additionalSignUpFields` (' + name + ') because it does not contain a valid `placeholder` property. Every element of `additionalSignUpFields` must have a `placeholder` property that is a non-empty string.');\n        filter = false;\n      }\n\n      if (icon != undefined && (typeof icon != 'string' || !icon)) {\n        l.warn(opts, 'When provided, the `icon` property of an element of `additionalSignUpFields` must be a non-empty string.');\n        icon = undefined;\n      }\n\n      if (prefill != undefined && (typeof prefill != 'string' || !prefill) && typeof prefill != 'function') {\n        l.warn(opts, 'When provided, the `prefill` property of an element of `additionalSignUpFields` must be a non-empty string or a function.');\n        prefill = undefined;\n      }\n\n      var types = ['select', 'text', 'checkbox', 'hidden'];\n\n      if (type != undefined && (typeof type != 'string' || types.indexOf(type) === -1)) {\n        l.warn(opts, 'When provided, the `type` property of an element of `additionalSignUpFields` must be one of the following strings: \"' + types.join('\", \"') + '\".');\n        type = undefined;\n      }\n\n      if (validator != undefined && type === 'select') {\n        l.warn(opts, 'Elements of `additionalSignUpFields` with a \"select\" `type` cannot specify a `validator` function, all of its `options` are assumed to be valid.');\n        validator = undefined;\n      }\n\n      if (validator != undefined && typeof validator != 'function') {\n        l.warn(opts, 'When provided, the `validator` property of an element of `additionalSignUpFields` must be a function.');\n        validator = undefined;\n      }\n\n      if (options != undefined && type != 'select') {\n        l.warn(opts, 'The `options` property can only by provided for an element of `additionalSignUpFields` when its `type` equals to \"select\"');\n        options = undefined;\n      }\n\n      if (options != undefined && !global.Array.isArray(options) && typeof options != 'function' || type === 'select' && options === undefined) {\n        l.warn(opts, 'Ignoring an element of `additionalSignUpFields` (' + name + ') because it has a \"select\" `type` but does not specify an `options` property that is an Array or a function.');\n        filter = false;\n      }\n\n      if (type === 'hidden' && !value) {\n        l.warn(opts, 'Ignoring an element of `additionalSignUpFields` (' + name + ') because it has a \"hidden\" `type` but does not specify a `value` string.');\n        filter = false;\n      }\n\n      return filter ? r.concat([{\n        icon: icon,\n        name: name,\n        options: options,\n        placeholder: placeholder,\n        prefill: prefill,\n        type: type,\n        validator: validator,\n        value: value\n      }]) : r;\n    }, []);\n    additionalSignUpFields = _immutable2.default.fromJS(additionalSignUpFields).map(function (x) {\n      return x.filter(function (y) {\n        return y !== undefined;\n      });\n    });\n  } // TODO: add a warning if it is not a boolean, leave it undefined,\n  // and change accessor fn.\n\n\n  loginAfterSignUp = loginAfterSignUp === false ? false : true;\n  return (0, _immutable.Map)({\n    additionalSignUpFields: additionalSignUpFields,\n    defaultConnectionName: defaultDatabaseConnection,\n    forgotPasswordLink: forgotPasswordLink,\n    initialScreen: initialScreen,\n    loginAfterSignUp: loginAfterSignUp,\n    mustAcceptTerms: mustAcceptTerms,\n    showTerms: showTerms,\n    screens: screens,\n    signUpLink: signUpLink,\n    usernameStyle: usernameStyle\n  }).filter(function (x) {\n    return typeof x !== 'undefined';\n  }).toJS();\n}\n\nfunction processScreenOptions(opts) {\n  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    allowLogin: true,\n    allowSignUp: true,\n    allowForgotPassword: true,\n    initialScreen: undefined\n  };\n  var allowForgotPassword = opts.allowForgotPassword,\n      allowLogin = opts.allowLogin,\n      allowSignUp = opts.allowSignUp,\n      initialScreen = opts.initialScreen;\n  var screens = [];\n\n  if (allowLogin === true || !assertMaybeBoolean(opts, 'allowLogin') && defaults.allowLogin || allowLogin === undefined && defaults.allowLogin) {\n    screens.push('login');\n  }\n\n  if (allowSignUp === true || !assertMaybeBoolean(opts, 'allowSignUp') && defaults.allowSignUp || allowSignUp === undefined && defaults.allowSignUp) {\n    screens.push('signUp');\n  }\n\n  if (allowForgotPassword === true || !assertMaybeBoolean(opts, 'allowForgotPassword') && defaults.allowForgotPassword || allowForgotPassword === undefined && defaults.allowForgotPassword) {\n    screens.push('forgotPassword');\n  }\n\n  screens.push('mfaLogin');\n\n  if (!assertMaybeEnum(opts, 'initialScreen', screens)) {\n    initialScreen = undefined;\n  }\n\n  if (initialScreen === undefined) {\n    initialScreen = defaults.initialScreen || screens[0];\n  }\n\n  return {\n    initialScreen: initialScreen,\n    screens: new _immutable.List(screens)\n  };\n}\n\nfunction overrideDatabaseOptions(m, opts) {\n  var _processScreenOptions2 = processScreenOptions(opts, {\n    allowLogin: availableScreens(m).contains('login'),\n    allowSignUp: availableScreens(m).contains('signUp'),\n    allowForgotPassword: availableScreens(m).contains('forgotPassword'),\n    initialScreen: get(m, 'initialScreen')\n  }),\n      initialScreen = _processScreenOptions2.initialScreen,\n      screens = _processScreenOptions2.screens;\n\n  m = tset(m, 'initialScreen', initialScreen);\n  m = tset(m, 'screens', screens);\n  return m;\n}\n\nfunction defaultDatabaseConnection(m) {\n  var name = defaultDatabaseConnectionName(m);\n  return name && l.findConnection(m, name);\n}\n\nfunction defaultDatabaseConnectionName(m) {\n  return get(m, 'defaultConnectionName');\n}\n\nfunction databaseConnection(m) {\n  return l.resolvedConnection(m) || (0, _tenant.defaultDirectory)(m) || defaultDatabaseConnection(m) || l.connection(m, 'database');\n}\n\nfunction databaseConnectionName(m) {\n  return (databaseConnection(m) || (0, _immutable.Map)()).get('name');\n}\n\nfunction forgotPasswordLink(m) {\n  var notFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return get(m, 'forgotPasswordLink', notFound);\n}\n\nfunction signUpLink(m) {\n  var notFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return get(m, 'signUpLink', notFound);\n}\n\nfunction setScreen(m, name) {\n  var fields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : []; // TODO: the lock/index module should provide a way to clear\n  // everything that needs the be cleared when changing screens, other\n  // modules should not care.\n\n  m = l.clearGlobalError(m);\n  m = l.clearGlobalSuccess(m);\n  m = (0, _index2.hideInvalidFields)(m, fields);\n  m = (0, _index2.clearFields)(m, fields);\n  return tset(m, 'screen', name);\n}\n\nfunction getScreen(m) {\n  var screen = tget(m, 'screen');\n  var initialScreen = getInitialScreen(m);\n  var screens = [screen, initialScreen, 'login', 'signUp', 'forgotPassword', 'mfaLogin'];\n  var availableScreens = screens.filter(function (x) {\n    return hasScreen(m, x);\n  });\n  return availableScreens[0];\n}\n\nfunction availableScreens(m) {\n  return tget(m, 'screens') || get(m, 'screens', new _immutable.List());\n}\n\nfunction getInitialScreen(m) {\n  return tget(m, 'initialScreen') || get(m, 'initialScreen');\n}\n\nfunction hasInitialScreen(m, str) {\n  return getInitialScreen(m) === str;\n}\n\nfunction databaseConnectionRequiresUsername(m) {\n  return (databaseConnection(m) || (0, _immutable.Map)()).toJS().requireUsername;\n}\n\nfunction databaseUsernameStyle(m) {\n  if (l.hasSomeConnections(m, 'database')) {\n    return databaseConnectionRequiresUsername(m) ? get(m, 'usernameStyle', 'any') : 'email';\n  }\n\n  return l.hasSomeConnections(m, 'enterprise') && (0, _enterprise.findADConnectionWithoutDomain)(m) ? 'username' : 'email';\n}\n\nfunction databaseLogInWithEmail(m) {\n  return databaseUsernameStyle(m) === 'email';\n}\n\nfunction databaseUsernameValue(m) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isEmailOnly = databaseLogInWithEmail(m);\n\n  if (isEmailOnly) {\n    return (0, _index2.getFieldValue)(m, 'email');\n  }\n\n  if (options.emailFirst) {\n    return (0, _index2.getFieldValue)(m, 'email') || (0, _index2.getFieldValue)(m, 'username');\n  }\n\n  return (0, _index2.getFieldValue)(m, 'username') || (0, _index2.getFieldValue)(m, 'email');\n}\n\nfunction authWithUsername(m) {\n  return databaseConnectionRequiresUsername(m) || get(m, 'usernameStyle', 'email') === 'username';\n}\n\nfunction hasScreen(m, s) {\n  var _toJS = (databaseConnection(m) || (0, _immutable.Map)()).toJS(),\n      allowForgot = _toJS.allowForgot,\n      allowSignup = _toJS.allowSignup;\n\n  return !(allowForgot === false && s === 'forgotPassword') && !(allowSignup === false && s === 'signUp') && availableScreens(m).contains(s);\n}\n\nfunction shouldAutoLogin(m) {\n  return get(m, 'loginAfterSignUp');\n}\n\nfunction passwordStrengthPolicy(m) {\n  return (databaseConnection(m) || (0, _immutable.Map)()).get('passwordPolicy', 'none');\n}\n\nfunction additionalSignUpFields(m) {\n  return get(m, 'additionalSignUpFields', (0, _immutable.List)());\n}\n\nfunction showTerms(m) {\n  return get(m, 'showTerms', true);\n}\n\nfunction mustAcceptTerms(m) {\n  return get(m, 'mustAcceptTerms', false);\n}\n\nfunction termsAccepted(m) {\n  return !mustAcceptTerms(m) || tget(m, 'termsAccepted', false);\n}\n\nfunction toggleTermsAcceptance(m) {\n  return tset(m, 'termsAccepted', !termsAccepted(m));\n}\n\nfunction resolveAdditionalSignUpFields(m) {\n  return additionalSignUpFields(m).reduce(function (r, x) {\n    switch (x.get('type')) {\n      case 'select':\n        return resolveAdditionalSignUpSelectField(r, x);\n\n      case 'hidden':\n        return resolveAdditionalSignUpHiddenField(r, x);\n\n      default:\n        return resolveAdditionalSignUpTextField(r, x);\n    }\n  }, m);\n}\n\nfunction resolveAdditionalSignUpSelectField(m, x) {\n  var name = x.get('name');\n  var keyNs = ['additionalSignUpField', name];\n  var prefill = x.get('prefill');\n  var options = x.get('options');\n  var resolvedPrefill = typeof prefill === 'function' ? undefined : prefill || '';\n  var resolvedOptions = typeof options === 'function' ? undefined : options;\n\n  var register = function register(m) {\n    return resolvedPrefill !== undefined && resolvedOptions !== undefined ? (0, _index2.registerOptionField)(m, name, _immutable2.default.fromJS(resolvedOptions), resolvedPrefill) : m;\n  };\n\n  if (resolvedPrefill === undefined) {\n    m = (0, _sync2.default)(m, keyNs.concat('prefill'), {\n      recoverResult: '',\n      successFn: function successFn(m, result) {\n        resolvedPrefill = result;\n        return register(m);\n      },\n      syncFn: function syncFn(m, cb) {\n        return prefill(cb);\n      }\n    });\n  }\n\n  if (resolvedOptions === undefined) {\n    m = (0, _sync2.default)(m, keyNs.concat('options'), {\n      successFn: function successFn(m, result) {\n        resolvedOptions = result;\n        return register(m);\n      },\n      syncFn: function syncFn(m, cb) {\n        return options(cb);\n      }\n    });\n  }\n\n  if (resolvedPrefill !== undefined && resolvedOptions !== undefined) {\n    m = (0, _index2.registerOptionField)(m, name, _immutable2.default.fromJS(resolvedOptions), resolvedPrefill);\n  }\n\n  return m;\n}\n\nfunction resolveAdditionalSignUpTextField(m, x) {\n  var name = x.get('name');\n  var key = ['additionalSignUpField', name, 'prefill'];\n  var prefill = x.get('prefill');\n  var validator = x.get('validator');\n  var resolvedPrefill = typeof prefill === 'function' ? undefined : prefill || '';\n\n  if (resolvedPrefill === undefined) {\n    m = (0, _sync2.default)(m, key, {\n      recoverResult: '',\n      successFn: function successFn(m, result) {\n        return (0, _index2.setField)(m, name, result, validator);\n      },\n      syncFn: function syncFn(m, cb) {\n        return prefill(cb);\n      }\n    });\n  } else {\n    m = (0, _index2.setField)(m, name, resolvedPrefill, validator);\n  }\n\n  return m;\n}\n\nfunction resolveAdditionalSignUpHiddenField(m, x) {\n  return (0, _index2.setField)(m, x.get('name'), x.get('value'));\n}","map":null,"metadata":{},"sourceType":"script"}