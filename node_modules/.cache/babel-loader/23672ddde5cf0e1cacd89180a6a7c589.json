{"ast":null,"code":"/**\n * jquery.mask.js\n * @version: v1.14.15\n * @author: Igor Escobar\n *\n * Created by Igor Escobar on 2012-03-10. Please report any bug at github.com/igorescobar/jQuery-Mask-Plugin\n *\n * Copyright (c) 2012 Igor Escobar http://igorescobar.com\n *\n * The MIT License (http://www.opensource.org/licenses/mit-license.php)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* jshint laxbreak: true */\n\n/* jshint maxcomplexity:17 */\n\n/* global define */\n// UMD (Universal Module Definition) patterns for JavaScript modules that work everywhere.\n// https://github.com/umdjs/umd/blob/master/templates/jqueryPlugin.js\n(function (factory, jQuery, Zepto) {\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('jquery'));\n  } else {\n    factory(jQuery || Zepto);\n  }\n})(function ($) {\n  'use strict';\n\n  var Mask = function Mask(el, mask, options) {\n    var p = {\n      invalid: [],\n      getCaret: function getCaret() {\n        try {\n          var sel,\n              pos = 0,\n              ctrl = el.get(0),\n              dSel = document.selection,\n              cSelStart = ctrl.selectionStart; // IE Support\n\n          if (dSel && navigator.appVersion.indexOf('MSIE 10') === -1) {\n            sel = dSel.createRange();\n            sel.moveStart('character', -p.val().length);\n            pos = sel.text.length;\n          } // Firefox support\n          else if (cSelStart || cSelStart === '0') {\n              pos = cSelStart;\n            }\n\n          return pos;\n        } catch (e) {}\n      },\n      setCaret: function setCaret(pos) {\n        try {\n          if (el.is(':focus')) {\n            var range,\n                ctrl = el.get(0); // Firefox, WebKit, etc..\n\n            if (ctrl.setSelectionRange) {\n              ctrl.setSelectionRange(pos, pos);\n            } else {\n              // IE\n              range = ctrl.createTextRange();\n              range.collapse(true);\n              range.moveEnd('character', pos);\n              range.moveStart('character', pos);\n              range.select();\n            }\n          }\n        } catch (e) {}\n      },\n      events: function events() {\n        el.on('keydown.mask', function (e) {\n          el.data('mask-keycode', e.keyCode || e.which);\n          el.data('mask-previus-value', el.val());\n          el.data('mask-previus-caret-pos', p.getCaret());\n          p.maskDigitPosMapOld = p.maskDigitPosMap;\n        }).on($.jMaskGlobals.useInput ? 'input.mask' : 'keyup.mask', p.behaviour).on('paste.mask drop.mask', function () {\n          setTimeout(function () {\n            el.keydown().keyup();\n          }, 100);\n        }).on('change.mask', function () {\n          el.data('changed', true);\n        }).on('blur.mask', function () {\n          if (oldValue !== p.val() && !el.data('changed')) {\n            el.trigger('change');\n          }\n\n          el.data('changed', false);\n        }) // it's very important that this callback remains in this position\n        // otherwhise oldValue it's going to work buggy\n        .on('blur.mask', function () {\n          oldValue = p.val();\n        }) // select all text on focus\n        .on('focus.mask', function (e) {\n          if (options.selectOnFocus === true) {\n            $(e.target).select();\n          }\n        }) // clear the value if it not complete the mask\n        .on('focusout.mask', function () {\n          if (options.clearIfNotMatch && !regexMask.test(p.val())) {\n            p.val('');\n          }\n        });\n      },\n      getRegexMask: function getRegexMask() {\n        var maskChunks = [],\n            translation,\n            pattern,\n            optional,\n            recursive,\n            oRecursive,\n            r;\n\n        for (var i = 0; i < mask.length; i++) {\n          translation = jMask.translation[mask.charAt(i)];\n\n          if (translation) {\n            pattern = translation.pattern.toString().replace(/.{1}$|^.{1}/g, '');\n            optional = translation.optional;\n            recursive = translation.recursive;\n\n            if (recursive) {\n              maskChunks.push(mask.charAt(i));\n              oRecursive = {\n                digit: mask.charAt(i),\n                pattern: pattern\n              };\n            } else {\n              maskChunks.push(!optional && !recursive ? pattern : pattern + '?');\n            }\n          } else {\n            maskChunks.push(mask.charAt(i).replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'));\n          }\n        }\n\n        r = maskChunks.join('');\n\n        if (oRecursive) {\n          r = r.replace(new RegExp('(' + oRecursive.digit + '(.*' + oRecursive.digit + ')?)'), '($1)?').replace(new RegExp(oRecursive.digit, 'g'), oRecursive.pattern);\n        }\n\n        return new RegExp(r);\n      },\n      destroyEvents: function destroyEvents() {\n        el.off(['input', 'keydown', 'keyup', 'paste', 'drop', 'blur', 'focusout', ''].join('.mask '));\n      },\n      val: function val(v) {\n        var isInput = el.is('input'),\n            method = isInput ? 'val' : 'text',\n            r;\n\n        if (arguments.length > 0) {\n          if (el[method]() !== v) {\n            el[method](v);\n          }\n\n          r = el;\n        } else {\n          r = el[method]();\n        }\n\n        return r;\n      },\n      calculateCaretPosition: function calculateCaretPosition() {\n        var oldVal = el.data('mask-previus-value') || '',\n            newVal = p.getMasked(),\n            caretPosNew = p.getCaret();\n\n        if (oldVal !== newVal) {\n          var caretPosOld = el.data('mask-previus-caret-pos') || 0,\n              newValL = newVal.length,\n              oldValL = oldVal.length,\n              maskDigitsBeforeCaret = 0,\n              maskDigitsAfterCaret = 0,\n              maskDigitsBeforeCaretAll = 0,\n              maskDigitsBeforeCaretAllOld = 0,\n              i = 0;\n\n          for (i = caretPosNew; i < newValL; i++) {\n            if (!p.maskDigitPosMap[i]) {\n              break;\n            }\n\n            maskDigitsAfterCaret++;\n          }\n\n          for (i = caretPosNew - 1; i >= 0; i--) {\n            if (!p.maskDigitPosMap[i]) {\n              break;\n            }\n\n            maskDigitsBeforeCaret++;\n          }\n\n          for (i = caretPosNew - 1; i >= 0; i--) {\n            if (p.maskDigitPosMap[i]) {\n              maskDigitsBeforeCaretAll++;\n            }\n          }\n\n          for (i = caretPosOld - 1; i >= 0; i--) {\n            if (p.maskDigitPosMapOld[i]) {\n              maskDigitsBeforeCaretAllOld++;\n            }\n          } // if the cursor is at the end keep it there\n\n\n          if (caretPosNew > oldValL) {\n            caretPosNew = newValL * 10;\n          } else if (caretPosOld >= caretPosNew && caretPosOld !== oldValL) {\n            if (!p.maskDigitPosMapOld[caretPosNew]) {\n              var caretPos = caretPosNew;\n              caretPosNew -= maskDigitsBeforeCaretAllOld - maskDigitsBeforeCaretAll;\n              caretPosNew -= maskDigitsBeforeCaret;\n\n              if (p.maskDigitPosMap[caretPosNew]) {\n                caretPosNew = caretPos;\n              }\n            }\n          } else if (caretPosNew > caretPosOld) {\n            caretPosNew += maskDigitsBeforeCaretAll - maskDigitsBeforeCaretAllOld;\n            caretPosNew += maskDigitsAfterCaret;\n          }\n        }\n\n        return caretPosNew;\n      },\n      behaviour: function behaviour(e) {\n        e = e || window.event;\n        p.invalid = [];\n        var keyCode = el.data('mask-keycode');\n\n        if ($.inArray(keyCode, jMask.byPassKeys) === -1) {\n          var newVal = p.getMasked(),\n              caretPos = p.getCaret(); // this is a compensation to devices/browsers that don't compensate\n          // caret positioning the right way\n\n          setTimeout(function () {\n            p.setCaret(p.calculateCaretPosition());\n          }, $.jMaskGlobals.keyStrokeCompensation);\n          p.val(newVal);\n          p.setCaret(caretPos);\n          return p.callbacks(e);\n        }\n      },\n      getMasked: function getMasked(skipMaskChars, val) {\n        var buf = [],\n            value = val === undefined ? p.val() : val + '',\n            m = 0,\n            maskLen = mask.length,\n            v = 0,\n            valLen = value.length,\n            offset = 1,\n            addMethod = 'push',\n            resetPos = -1,\n            maskDigitCount = 0,\n            maskDigitPosArr = [],\n            lastMaskChar,\n            check;\n\n        if (options.reverse) {\n          addMethod = 'unshift';\n          offset = -1;\n          lastMaskChar = 0;\n          m = maskLen - 1;\n          v = valLen - 1;\n\n          check = function check() {\n            return m > -1 && v > -1;\n          };\n        } else {\n          lastMaskChar = maskLen - 1;\n\n          check = function check() {\n            return m < maskLen && v < valLen;\n          };\n        }\n\n        var lastUntranslatedMaskChar;\n\n        while (check()) {\n          var maskDigit = mask.charAt(m),\n              valDigit = value.charAt(v),\n              translation = jMask.translation[maskDigit];\n\n          if (translation) {\n            if (valDigit.match(translation.pattern)) {\n              buf[addMethod](valDigit);\n\n              if (translation.recursive) {\n                if (resetPos === -1) {\n                  resetPos = m;\n                } else if (m === lastMaskChar && m !== resetPos) {\n                  m = resetPos - offset;\n                }\n\n                if (lastMaskChar === resetPos) {\n                  m -= offset;\n                }\n              }\n\n              m += offset;\n            } else if (valDigit === lastUntranslatedMaskChar) {\n              // matched the last untranslated (raw) mask character that we encountered\n              // likely an insert offset the mask character from the last entry; fall\n              // through and only increment v\n              maskDigitCount--;\n              lastUntranslatedMaskChar = undefined;\n            } else if (translation.optional) {\n              m += offset;\n              v -= offset;\n            } else if (translation.fallback) {\n              buf[addMethod](translation.fallback);\n              m += offset;\n              v -= offset;\n            } else {\n              p.invalid.push({\n                p: v,\n                v: valDigit,\n                e: translation.pattern\n              });\n            }\n\n            v += offset;\n          } else {\n            if (!skipMaskChars) {\n              buf[addMethod](maskDigit);\n            }\n\n            if (valDigit === maskDigit) {\n              maskDigitPosArr.push(v);\n              v += offset;\n            } else {\n              lastUntranslatedMaskChar = maskDigit;\n              maskDigitPosArr.push(v + maskDigitCount);\n              maskDigitCount++;\n            }\n\n            m += offset;\n          }\n        }\n\n        var lastMaskCharDigit = mask.charAt(lastMaskChar);\n\n        if (maskLen === valLen + 1 && !jMask.translation[lastMaskCharDigit]) {\n          buf.push(lastMaskCharDigit);\n        }\n\n        var newVal = buf.join('');\n        p.mapMaskdigitPositions(newVal, maskDigitPosArr, valLen);\n        return newVal;\n      },\n      mapMaskdigitPositions: function mapMaskdigitPositions(newVal, maskDigitPosArr, valLen) {\n        var maskDiff = options.reverse ? newVal.length - valLen : 0;\n        p.maskDigitPosMap = {};\n\n        for (var i = 0; i < maskDigitPosArr.length; i++) {\n          p.maskDigitPosMap[maskDigitPosArr[i] + maskDiff] = 1;\n        }\n      },\n      callbacks: function callbacks(e) {\n        var val = p.val(),\n            changed = val !== oldValue,\n            defaultArgs = [val, e, el, options],\n            callback = function callback(name, criteria, args) {\n          if (typeof options[name] === 'function' && criteria) {\n            options[name].apply(this, args);\n          }\n        };\n\n        callback('onChange', changed === true, defaultArgs);\n        callback('onKeyPress', changed === true, defaultArgs);\n        callback('onComplete', val.length === mask.length, defaultArgs);\n        callback('onInvalid', p.invalid.length > 0, [val, e, el, p.invalid, options]);\n      }\n    };\n    el = $(el);\n    var jMask = this,\n        oldValue = p.val(),\n        regexMask;\n    mask = typeof mask === 'function' ? mask(p.val(), undefined, el, options) : mask; // public methods\n\n    jMask.mask = mask;\n    jMask.options = options;\n\n    jMask.remove = function () {\n      var caret = p.getCaret();\n\n      if (jMask.options.placeholder) {\n        el.removeAttr('placeholder');\n      }\n\n      if (el.data('mask-maxlength')) {\n        el.removeAttr('maxlength');\n      }\n\n      p.destroyEvents();\n      p.val(jMask.getCleanVal());\n      p.setCaret(caret);\n      return el;\n    }; // get value without mask\n\n\n    jMask.getCleanVal = function () {\n      return p.getMasked(true);\n    }; // get masked value without the value being in the input or element\n\n\n    jMask.getMaskedVal = function (val) {\n      return p.getMasked(false, val);\n    };\n\n    jMask.init = function (onlyMask) {\n      onlyMask = onlyMask || false;\n      options = options || {};\n      jMask.clearIfNotMatch = $.jMaskGlobals.clearIfNotMatch;\n      jMask.byPassKeys = $.jMaskGlobals.byPassKeys;\n      jMask.translation = $.extend({}, $.jMaskGlobals.translation, options.translation);\n      jMask = $.extend(true, {}, jMask, options);\n      regexMask = p.getRegexMask();\n\n      if (onlyMask) {\n        p.events();\n        p.val(p.getMasked());\n      } else {\n        if (options.placeholder) {\n          el.attr('placeholder', options.placeholder);\n        } // this is necessary, otherwise if the user submit the form\n        // and then press the \"back\" button, the autocomplete will erase\n        // the data. Works fine on IE9+, FF, Opera, Safari.\n\n\n        if (el.data('mask')) {\n          el.attr('autocomplete', 'off');\n        } // detect if is necessary let the user type freely.\n        // for is a lot faster than forEach.\n\n\n        for (var i = 0, maxlength = true; i < mask.length; i++) {\n          var translation = jMask.translation[mask.charAt(i)];\n\n          if (translation && translation.recursive) {\n            maxlength = false;\n            break;\n          }\n        }\n\n        if (maxlength) {\n          el.attr('maxlength', mask.length).data('mask-maxlength', true);\n        }\n\n        p.destroyEvents();\n        p.events();\n        var caret = p.getCaret();\n        p.val(p.getMasked());\n        p.setCaret(caret);\n      }\n    };\n\n    jMask.init(!el.is('input'));\n  };\n\n  $.maskWatchers = {};\n\n  var HTMLAttributes = function HTMLAttributes() {\n    var input = $(this),\n        options = {},\n        prefix = 'data-mask-',\n        mask = input.attr('data-mask');\n\n    if (input.attr(prefix + 'reverse')) {\n      options.reverse = true;\n    }\n\n    if (input.attr(prefix + 'clearifnotmatch')) {\n      options.clearIfNotMatch = true;\n    }\n\n    if (input.attr(prefix + 'selectonfocus') === 'true') {\n      options.selectOnFocus = true;\n    }\n\n    if (notSameMaskObject(input, mask, options)) {\n      return input.data('mask', new Mask(this, mask, options));\n    }\n  },\n      notSameMaskObject = function notSameMaskObject(field, mask, options) {\n    options = options || {};\n    var maskObject = $(field).data('mask'),\n        stringify = JSON.stringify,\n        value = $(field).val() || $(field).text();\n\n    try {\n      if (typeof mask === 'function') {\n        mask = mask(value);\n      }\n\n      return typeof maskObject !== 'object' || stringify(maskObject.options) !== stringify(options) || maskObject.mask !== mask;\n    } catch (e) {}\n  },\n      eventSupported = function eventSupported(eventName) {\n    var el = document.createElement('div'),\n        isSupported;\n    eventName = 'on' + eventName;\n    isSupported = eventName in el;\n\n    if (!isSupported) {\n      el.setAttribute(eventName, 'return;');\n      isSupported = typeof el[eventName] === 'function';\n    }\n\n    el = null;\n    return isSupported;\n  };\n\n  $.fn.mask = function (mask, options) {\n    options = options || {};\n\n    var selector = this.selector,\n        globals = $.jMaskGlobals,\n        interval = globals.watchInterval,\n        watchInputs = options.watchInputs || globals.watchInputs,\n        maskFunction = function maskFunction() {\n      if (notSameMaskObject(this, mask, options)) {\n        return $(this).data('mask', new Mask(this, mask, options));\n      }\n    };\n\n    $(this).each(maskFunction);\n\n    if (selector && selector !== '' && watchInputs) {\n      clearInterval($.maskWatchers[selector]);\n      $.maskWatchers[selector] = setInterval(function () {\n        $(document).find(selector).each(maskFunction);\n      }, interval);\n    }\n\n    return this;\n  };\n\n  $.fn.masked = function (val) {\n    return this.data('mask').getMaskedVal(val);\n  };\n\n  $.fn.unmask = function () {\n    clearInterval($.maskWatchers[this.selector]);\n    delete $.maskWatchers[this.selector];\n    return this.each(function () {\n      var dataMask = $(this).data('mask');\n\n      if (dataMask) {\n        dataMask.remove().removeData('mask');\n      }\n    });\n  };\n\n  $.fn.cleanVal = function () {\n    return this.data('mask').getCleanVal();\n  };\n\n  $.applyDataMask = function (selector) {\n    selector = selector || $.jMaskGlobals.maskElements;\n    var $selector = selector instanceof $ ? selector : $(selector);\n    $selector.filter($.jMaskGlobals.dataMaskAttr).each(HTMLAttributes);\n  };\n\n  var globals = {\n    maskElements: 'input,td,span,div',\n    dataMaskAttr: '*[data-mask]',\n    dataMask: true,\n    watchInterval: 300,\n    watchInputs: true,\n    keyStrokeCompensation: 10,\n    // old versions of chrome dont work great with input event\n    useInput: !/Chrome\\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent) && eventSupported('input'),\n    watchDataMask: false,\n    byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91],\n    translation: {\n      '0': {\n        pattern: /\\d/\n      },\n      '9': {\n        pattern: /\\d/,\n        optional: true\n      },\n      '#': {\n        pattern: /\\d/,\n        recursive: true\n      },\n      'A': {\n        pattern: /[a-zA-Z0-9]/\n      },\n      'S': {\n        pattern: /[a-zA-Z]/\n      }\n    }\n  };\n  $.jMaskGlobals = $.jMaskGlobals || {};\n  globals = $.jMaskGlobals = $.extend(true, {}, globals, $.jMaskGlobals); // looking for inputs with data-mask attribute\n\n  if (globals.dataMask) {\n    $.applyDataMask();\n  }\n\n  setInterval(function () {\n    if ($.jMaskGlobals.watchDataMask) {\n      $.applyDataMask();\n    }\n  }, globals.watchInterval);\n}, window.jQuery, window.Zepto);","map":null,"metadata":{},"sourceType":"script"}