{"ast":null,"code":"var _ = require('../helper');\n/* OWASP Special Characters: https://www.owasp.org/index.php/Password_special_characters */\n\n\nvar specialCharacters = [' ', '!', '\"', '#', '\\\\$', '%', '&', '\\'', '\\\\(', '\\\\)', '\\\\*', '\\\\+', ',', '-', '\\\\.', '/', ':', ';', '<', '=', '>', '\\\\?', '@', '\\\\[', '\\\\\\\\', '\\\\]', '\\\\^', '_', '`', '{', '\\\\|', '}', '~'].join('|');\nvar specialCharactersRegexp = new RegExp(specialCharacters);\nmodule.exports = {\n  validate: function validate(options) {\n    if (!_.isObject(options)) {\n      throw new Error('options should be an object');\n    }\n\n    if (!_.isArray(options.expressions) || _.isEmpty(options.expressions)) {\n      throw new Error('contains expects expressions to be a non-empty array');\n    }\n\n    var ok = options.expressions.every(function (expression) {\n      return _.isFunction(expression.explain) && _.isFunction(expression.test);\n    });\n\n    if (!ok) {\n      throw new Error('contains expressions are invalid: An explain and a test function should be provided');\n    }\n\n    return true;\n  },\n  explain: function explain(options) {\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      items: options.expressions.map(function (expression) {\n        return expression.explain();\n      })\n    };\n  },\n  missing: function missing(options, password) {\n    var expressions = options.expressions.map(function (expression) {\n      var explained = expression.explain();\n      explained.verified = expression.test(password);\n      return explained;\n    });\n    var verified = expressions.every(function (expression) {\n      return expression.verified;\n    });\n    return {\n      message: 'Should contain:',\n      code: 'shouldContain',\n      verified: verified,\n      items: expressions\n    };\n  },\n  assert: function assert(options, password) {\n    if (!password) {\n      return false;\n    }\n\n    return options.expressions.every(function (expression) {\n      var result = expression.test(password);\n      return result;\n    });\n  },\n  charsets: {\n    upperCase: {\n      explain: function explain() {\n        return {\n          message: 'upper case letters (A-Z)',\n          code: 'upperCase'\n        };\n      },\n      test: function test(password) {\n        return /[A-Z]/.test(password);\n      }\n    },\n    lowerCase: {\n      explain: function explain() {\n        return {\n          message: 'lower case letters (a-z)',\n          code: 'lowerCase'\n        };\n      },\n      test: function test(password) {\n        return /[a-z]/.test(password);\n      }\n    },\n    specialCharacters: {\n      explain: function explain() {\n        return {\n          message: 'special characters (e.g. !@#$%^&*)',\n          code: 'specialCharacters'\n        };\n      },\n      test: function test(password) {\n        return specialCharactersRegexp.test(password);\n      }\n    },\n    numbers: {\n      explain: function explain() {\n        return {\n          message: 'numbers (i.e. 0-9)',\n          code: 'numbers'\n        };\n      },\n      test: function test(password) {\n        return /\\d/.test(password);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}