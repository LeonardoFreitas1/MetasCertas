{"ast":null,"code":"import _toConsumableArray from \"/home/leonardo_freitas/Desktop/Programa\\xE7\\xE3o/MetasCertas/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/leonardo_freitas/Desktop/Programa\\xE7\\xE3o/MetasCertas/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport clone from \"clone\";\nimport actions from \"./actions\";\nvar initState = {\n  users: null,\n  chatRooms: [],\n  messages: [],\n  selectedChatRoom: null,\n  openCompose: false,\n  viewProfile: false,\n  composedId: null,\n  loading: true,\n  error: false,\n  mobileActiveList: true,\n  mobileActiveProfile: false,\n  restoringData: false,\n  addNewUsersProp: {\n    modalActive: false\n  }\n};\n\nvar sortTimeStamp = function sortTimeStamp(optionA, optionB) {\n  return optionB.lastMessageTime - optionA.lastMessageTime;\n};\n\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.CHAT_INIT_SAGA:\n      {\n        return _objectSpread({}, state, {\n          userId: action.userId,\n          user: action.user,\n          users: action.users,\n          chatRooms: action.chatRooms,\n          messages: action.messages,\n          selectedChatRoom: action.chatRooms[0],\n          loading: false\n        });\n      }\n\n    case actions.CHAT_UPDATE_CHATROOM:\n      {\n        var chatRooms = clone(state.chatRooms);\n        var chatRoom = action.chatRoom,\n            messages = action.messages,\n            selected = action.selected;\n        var id = chatRoom.id,\n            lastMessage = chatRoom.lastMessage,\n            lastMessageTime = chatRoom.lastMessageTime;\n        chatRooms.forEach(function (chatroom, index) {\n          if (chatroom.id === id) {\n            chatRooms[index].lastMessage = lastMessage;\n            chatRooms[index].lastMessageTime = lastMessageTime;\n          }\n        });\n        return _objectSpread({}, state, {\n          chatRooms: chatRooms.sort(sortTimeStamp),\n          composedId: null,\n          openCompose: false,\n          selectedChatRoom: selected ? chatRoom : state.selectedChatRoom,\n          viewProfile: selected ? false : state.viewProfile,\n          messages: messages ? messages : state.messages\n        });\n      }\n\n    case actions.CHAT_TOGGLE_COMPOSE:\n      return _objectSpread({}, state, {\n        openCompose: !state.openCompose,\n        viewProfile: false\n      });\n\n    case actions.CHAT_SET_TOGGLE_COMPOSED_ID:\n      return _objectSpread({}, state, {\n        composedId: action.id\n      });\n\n    case actions.CHAT_SET_TOGGLE_VIEW_PROFILE:\n      return _objectSpread({}, state, {\n        viewProfile: action.viewProfile\n      });\n\n    case actions.TOGGLE_MOBILE_LIST:\n      return _objectSpread({}, state, {\n        mobileActiveList: action.mobileActiveList\n      });\n\n    case actions.TOGGLE_MOBILE_PROFILE:\n      return _objectSpread({}, state, {\n        mobileActiveProfile: action.mobileActiveProfile\n      });\n\n    case actions.RESTORE_DEMO_DATA:\n      return _objectSpread({}, state, {\n        restoringData: true\n      });\n\n    case actions.RESTORE_DEMO_DATA_DONE:\n      return _objectSpread({}, state, {\n        restoringData: false\n      });\n\n    case actions.UPDATE_NEW_USER_PROPS:\n      return _objectSpread({}, state, {\n        addNewUsersProp: action.addNewUsersProp\n      });\n\n    case actions.NEW_MESSAGE_SUCCESFULL:\n      return _objectSpread({}, state, {\n        openCompose: false,\n        composedId: null\n      });\n\n    case actions.ADD_NEW_USER_SAGA:\n      {\n        var users = state.users;\n\n        var _chatRooms = [action.newChatroom].concat(_toConsumableArray(state.chatRooms));\n\n        users.push(action.newUser);\n        return _objectSpread({}, state, {\n          addNewUsersProp: {\n            modalActive: false\n          },\n          users: users,\n          chatRooms: _chatRooms\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/leonardo_freitas/Desktop/Programação/MetasCertas/src/redux/chat/reducers.js"],"names":["clone","actions","initState","users","chatRooms","messages","selectedChatRoom","openCompose","viewProfile","composedId","loading","error","mobileActiveList","mobileActiveProfile","restoringData","addNewUsersProp","modalActive","sortTimeStamp","optionA","optionB","lastMessageTime","reducer","state","action","type","CHAT_INIT_SAGA","userId","user","CHAT_UPDATE_CHATROOM","chatRoom","selected","id","lastMessage","forEach","chatroom","index","sort","CHAT_TOGGLE_COMPOSE","CHAT_SET_TOGGLE_COMPOSED_ID","CHAT_SET_TOGGLE_VIEW_PROFILE","TOGGLE_MOBILE_LIST","TOGGLE_MOBILE_PROFILE","RESTORE_DEMO_DATA","RESTORE_DEMO_DATA_DONE","UPDATE_NEW_USER_PROPS","NEW_MESSAGE_SUCCESFULL","ADD_NEW_USER_SAGA","newChatroom","push","newUser"],"mappings":"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","sourcesContent":["import clone from \"clone\";\nimport actions from \"./actions\";\n\nconst initState = {\n  users: null,\n  chatRooms: [],\n  messages: [],\n  selectedChatRoom: null,\n  openCompose: false,\n  viewProfile: false,\n  composedId: null,\n  loading: true,\n  error: false,\n  mobileActiveList: true,\n  mobileActiveProfile: false,\n  restoringData: false,\n  addNewUsersProp: {\n    modalActive: false\n  }\n};\nconst sortTimeStamp = (optionA, optionB) =>\n  optionB.lastMessageTime - optionA.lastMessageTime;\nexport default function reducer(state = initState, action) {\n  switch (action.type) {\n    case actions.CHAT_INIT_SAGA: {\n      return {\n        ...state,\n        userId: action.userId,\n        user: action.user,\n        users: action.users,\n        chatRooms: action.chatRooms,\n        messages: action.messages,\n        selectedChatRoom: action.chatRooms[0],\n        loading: false\n      };\n    }\n    case actions.CHAT_UPDATE_CHATROOM: {\n      const chatRooms = clone(state.chatRooms);\n      const { chatRoom, messages, selected } = action;\n      const { id, lastMessage, lastMessageTime } = chatRoom;\n      chatRooms.forEach((chatroom, index) => {\n        if (chatroom.id === id) {\n          chatRooms[index].lastMessage = lastMessage;\n          chatRooms[index].lastMessageTime = lastMessageTime;\n        }\n      });\n      return {\n        ...state,\n        chatRooms: chatRooms.sort(sortTimeStamp),\n        composedId: null,\n        openCompose: false,\n        selectedChatRoom: selected ? chatRoom : state.selectedChatRoom,\n        viewProfile: selected ? false : state.viewProfile,\n        messages: messages ? messages : state.messages\n      };\n    }\n    case actions.CHAT_TOGGLE_COMPOSE:\n      return {\n        ...state,\n        openCompose: !state.openCompose,\n        viewProfile: false\n      };\n    case actions.CHAT_SET_TOGGLE_COMPOSED_ID:\n      return {\n        ...state,\n        composedId: action.id\n      };\n    case actions.CHAT_SET_TOGGLE_VIEW_PROFILE:\n      return {\n        ...state,\n        viewProfile: action.viewProfile\n      };\n    case actions.TOGGLE_MOBILE_LIST:\n      return {\n        ...state,\n        mobileActiveList: action.mobileActiveList\n      };\n    case actions.TOGGLE_MOBILE_PROFILE:\n      return {\n        ...state,\n        mobileActiveProfile: action.mobileActiveProfile\n      };\n    case actions.RESTORE_DEMO_DATA:\n      return {\n        ...state,\n        restoringData: true\n      };\n    case actions.RESTORE_DEMO_DATA_DONE:\n      return {\n        ...state,\n        restoringData: false\n      };\n    case actions.UPDATE_NEW_USER_PROPS:\n      return {\n        ...state,\n        addNewUsersProp: action.addNewUsersProp\n      };\n    case actions.NEW_MESSAGE_SUCCESFULL:\n      return {\n        ...state,\n        openCompose: false,\n        composedId: null\n      };\n    case actions.ADD_NEW_USER_SAGA: {\n      const users = state.users;\n      const chatRooms = [action.newChatroom, ...state.chatRooms];\n      users.push(action.newUser);\n      return {\n        ...state,\n        addNewUsersProp: { modalActive: false },\n        users,\n        chatRooms\n      };\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}