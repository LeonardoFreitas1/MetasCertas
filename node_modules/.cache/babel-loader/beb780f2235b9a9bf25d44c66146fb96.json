{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.PureDateRangePicker = void 0;\n\nvar _reactAddonsShallowCompare = _interopRequireDefault(require(\"react-addons-shallow-compare\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _reactWithStyles = require(\"react-with-styles\");\n\nvar _reactPortal = require(\"react-portal\");\n\nvar _airbnbPropTypes = require(\"airbnb-prop-types\");\n\nvar _consolidatedEvents = require(\"consolidated-events\");\n\nvar _isTouchDevice = _interopRequireDefault(require(\"is-touch-device\"));\n\nvar _reactOutsideClickHandler = _interopRequireDefault(require(\"react-outside-click-handler\"));\n\nvar _DateRangePickerShape = _interopRequireDefault(require(\"../shapes/DateRangePickerShape\"));\n\nvar _defaultPhrases = require(\"../defaultPhrases\");\n\nvar _getResponsiveContainerStyles = _interopRequireDefault(require(\"../utils/getResponsiveContainerStyles\"));\n\nvar _getDetachedContainerStyles = _interopRequireDefault(require(\"../utils/getDetachedContainerStyles\"));\n\nvar _getInputHeight = _interopRequireDefault(require(\"../utils/getInputHeight\"));\n\nvar _isInclusivelyAfterDay = _interopRequireDefault(require(\"../utils/isInclusivelyAfterDay\"));\n\nvar _disableScroll2 = _interopRequireDefault(require(\"../utils/disableScroll\"));\n\nvar _noflip = _interopRequireDefault(require(\"../utils/noflip\"));\n\nvar _DateRangePickerInputController = _interopRequireDefault(require(\"./DateRangePickerInputController\"));\n\nvar _DayPickerRangeController = _interopRequireDefault(require(\"./DayPickerRangeController\"));\n\nvar _CloseButton = _interopRequireDefault(require(\"./CloseButton\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function () {\n    function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    }\n\n    return _getPrototypeOf;\n  }();\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function () {\n    function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    }\n\n    return _setPrototypeOf;\n  }();\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar propTypes = process.env.NODE_ENV !== \"production\" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, _DateRangePickerShape[\"default\"])) : {};\nvar defaultProps = {\n  // required props for a functional interactive DateRangePicker\n  startDate: null,\n  endDate: null,\n  focusedInput: null,\n  // input related props\n  startDatePlaceholderText: 'Start Date',\n  endDatePlaceholderText: 'End Date',\n  startDateOffset: undefined,\n  endDateOffset: undefined,\n  disabled: false,\n  required: false,\n  readOnly: false,\n  screenReaderInputMessage: '',\n  showClearDates: false,\n  showDefaultInputIcon: false,\n  inputIconPosition: _constants.ICON_BEFORE_POSITION,\n  customInputIcon: null,\n  customArrowIcon: null,\n  customCloseIcon: null,\n  noBorder: false,\n  block: false,\n  small: false,\n  regular: false,\n  keepFocusOnInput: false,\n  // calendar presentation and interaction related props\n  renderMonthText: null,\n  orientation: _constants.HORIZONTAL_ORIENTATION,\n  anchorDirection: _constants.ANCHOR_LEFT,\n  openDirection: _constants.OPEN_DOWN,\n  horizontalMargin: 0,\n  withPortal: false,\n  withFullScreenPortal: false,\n  appendToBody: false,\n  disableScroll: false,\n  initialVisibleMonth: null,\n  numberOfMonths: 2,\n  keepOpenOnDateSelect: false,\n  reopenPickerOnClearDates: false,\n  renderCalendarInfo: null,\n  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,\n  hideKeyboardShortcutsPanel: false,\n  daySize: _constants.DAY_SIZE,\n  isRTL: false,\n  firstDayOfWeek: null,\n  verticalHeight: null,\n  transitionDuration: undefined,\n  verticalSpacing: _constants.DEFAULT_VERTICAL_SPACING,\n  horizontalMonthPadding: undefined,\n  // navigation related props\n  navPrev: null,\n  navNext: null,\n  onPrevMonthClick: function () {\n    function onPrevMonthClick() {}\n\n    return onPrevMonthClick;\n  }(),\n  onNextMonthClick: function () {\n    function onNextMonthClick() {}\n\n    return onNextMonthClick;\n  }(),\n  onClose: function () {\n    function onClose() {}\n\n    return onClose;\n  }(),\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  renderMonthElement: null,\n  minimumNights: 1,\n  enableOutsideDays: false,\n  isDayBlocked: function () {\n    function isDayBlocked() {\n      return false;\n    }\n\n    return isDayBlocked;\n  }(),\n  isOutsideRange: function () {\n    function isOutsideRange(day) {\n      return !(0, _isInclusivelyAfterDay[\"default\"])(day, (0, _moment[\"default\"])());\n    }\n\n    return isOutsideRange;\n  }(),\n  isDayHighlighted: function () {\n    function isDayHighlighted() {\n      return false;\n    }\n\n    return isDayHighlighted;\n  }(),\n  // internationalization\n  displayFormat: function () {\n    function displayFormat() {\n      return _moment[\"default\"].localeData().longDateFormat('L');\n    }\n\n    return displayFormat;\n  }(),\n  monthFormat: 'MMMM YYYY',\n  weekDayFormat: 'dd',\n  phrases: _defaultPhrases.DateRangePickerPhrases,\n  dayAriaLabelFormat: undefined\n};\n\nvar DateRangePicker =\n/*#__PURE__*/\nfunction (_ref) {\n  _inherits(DateRangePicker, _ref);\n\n  _createClass(DateRangePicker, [{\n    key: !_react[\"default\"].PureComponent && \"shouldComponentUpdate\",\n    value: function () {\n      function value(nextProps, nextState) {\n        return (0, _reactAddonsShallowCompare[\"default\"])(this, nextProps, nextState);\n      }\n\n      return value;\n    }()\n  }]);\n\n  function DateRangePicker(props) {\n    var _this;\n\n    _classCallCheck(this, DateRangePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateRangePicker).call(this, props));\n    _this.state = {\n      dayPickerContainerStyles: {},\n      isDateRangePickerInputFocused: false,\n      isDayPickerFocused: false,\n      showKeyboardShortcuts: false\n    };\n    _this.isTouchDevice = false;\n    _this.onOutsideClick = _this.onOutsideClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDateRangePickerInputFocus = _this.onDateRangePickerInputFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDayPickerFocus = _this.onDayPickerFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDayPickerFocusOut = _this.onDayPickerFocusOut.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDayPickerBlur = _this.onDayPickerBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showKeyboardShortcutsPanel = _this.showKeyboardShortcutsPanel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.responsivizePickerPosition = _this.responsivizePickerPosition.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.disableScroll = _this.disableScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setDayPickerContainerRef = _this.setDayPickerContainerRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setContainerRef = _this.setContainerRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DateRangePicker, [{\n    key: \"componentDidMount\",\n    value: function () {\n      function componentDidMount() {\n        this.removeEventListener = (0, _consolidatedEvents.addEventListener)(window, 'resize', this.responsivizePickerPosition, {\n          passive: true\n        });\n        this.responsivizePickerPosition();\n        this.disableScroll();\n        var focusedInput = this.props.focusedInput;\n\n        if (focusedInput) {\n          this.setState({\n            isDateRangePickerInputFocused: true\n          });\n        }\n\n        this.isTouchDevice = (0, _isTouchDevice[\"default\"])();\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      function componentDidUpdate(prevProps) {\n        var focusedInput = this.props.focusedInput;\n\n        if (!prevProps.focusedInput && focusedInput && this.isOpened()) {\n          // The date picker just changed from being closed to being open.\n          this.responsivizePickerPosition();\n          this.disableScroll();\n        } else if (prevProps.focusedInput && !focusedInput && !this.isOpened()) {\n          // The date picker just changed from being open to being closed.\n          if (this.enableScroll) this.enableScroll();\n        }\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function () {\n      function componentWillUnmount() {\n        this.removeDayPickerEventListeners();\n        if (this.removeEventListener) this.removeEventListener();\n        if (this.enableScroll) this.enableScroll();\n      }\n\n      return componentWillUnmount;\n    }()\n  }, {\n    key: \"onOutsideClick\",\n    value: function () {\n      function onOutsideClick(event) {\n        var _this$props = this.props,\n            onFocusChange = _this$props.onFocusChange,\n            onClose = _this$props.onClose,\n            startDate = _this$props.startDate,\n            endDate = _this$props.endDate,\n            appendToBody = _this$props.appendToBody;\n        if (!this.isOpened()) return;\n        if (appendToBody && this.dayPickerContainer.contains(event.target)) return;\n        this.setState({\n          isDateRangePickerInputFocused: false,\n          isDayPickerFocused: false,\n          showKeyboardShortcuts: false\n        });\n        onFocusChange(null);\n        onClose({\n          startDate: startDate,\n          endDate: endDate\n        });\n      }\n\n      return onOutsideClick;\n    }()\n  }, {\n    key: \"onDateRangePickerInputFocus\",\n    value: function () {\n      function onDateRangePickerInputFocus(focusedInput) {\n        var _this$props2 = this.props,\n            onFocusChange = _this$props2.onFocusChange,\n            readOnly = _this$props2.readOnly,\n            withPortal = _this$props2.withPortal,\n            withFullScreenPortal = _this$props2.withFullScreenPortal,\n            keepFocusOnInput = _this$props2.keepFocusOnInput;\n\n        if (focusedInput) {\n          var withAnyPortal = withPortal || withFullScreenPortal;\n          var moveFocusToDayPicker = withAnyPortal || readOnly && !keepFocusOnInput || this.isTouchDevice && !keepFocusOnInput;\n\n          if (moveFocusToDayPicker) {\n            this.onDayPickerFocus();\n          } else {\n            this.onDayPickerBlur();\n          }\n        }\n\n        onFocusChange(focusedInput);\n      }\n\n      return onDateRangePickerInputFocus;\n    }()\n  }, {\n    key: \"onDayPickerFocus\",\n    value: function () {\n      function onDayPickerFocus() {\n        var _this$props3 = this.props,\n            focusedInput = _this$props3.focusedInput,\n            onFocusChange = _this$props3.onFocusChange;\n        if (!focusedInput) onFocusChange(_constants.START_DATE);\n        this.setState({\n          isDateRangePickerInputFocused: false,\n          isDayPickerFocused: true,\n          showKeyboardShortcuts: false\n        });\n      }\n\n      return onDayPickerFocus;\n    }()\n  }, {\n    key: \"onDayPickerFocusOut\",\n    value: function () {\n      function onDayPickerFocusOut(event) {\n        // In cases where **relatedTarget** is not null, it points to the right\n        // element here. However, in cases where it is null (such as clicking on a\n        // specific day) or it is **document.body** (IE11), the appropriate value is **event.target**.\n        //\n        // We handle both situations here by using the ` || ` operator to fallback\n        // to *event.target** when **relatedTarget** is not provided.\n        var relatedTarget = event.relatedTarget === document.body ? event.target : event.relatedTarget || event.target;\n        if (this.dayPickerContainer.contains(relatedTarget)) return;\n        this.onOutsideClick(event);\n      }\n\n      return onDayPickerFocusOut;\n    }()\n  }, {\n    key: \"onDayPickerBlur\",\n    value: function () {\n      function onDayPickerBlur() {\n        this.setState({\n          isDateRangePickerInputFocused: true,\n          isDayPickerFocused: false,\n          showKeyboardShortcuts: false\n        });\n      }\n\n      return onDayPickerBlur;\n    }()\n  }, {\n    key: \"setDayPickerContainerRef\",\n    value: function () {\n      function setDayPickerContainerRef(ref) {\n        if (ref === this.dayPickerContainer) return;\n        if (this.dayPickerContainer) this.removeDayPickerEventListeners();\n        this.dayPickerContainer = ref;\n        if (!ref) return;\n        this.addDayPickerEventListeners();\n      }\n\n      return setDayPickerContainerRef;\n    }()\n  }, {\n    key: \"setContainerRef\",\n    value: function () {\n      function setContainerRef(ref) {\n        this.container = ref;\n      }\n\n      return setContainerRef;\n    }()\n  }, {\n    key: \"addDayPickerEventListeners\",\n    value: function () {\n      function addDayPickerEventListeners() {\n        // NOTE: We are using a manual event listener here, because React doesn't\n        // provide FocusOut, while blur and keydown don't provide the information\n        // needed in order to know whether we have left focus or not.\n        //\n        // For reference, this issue is further described here:\n        // - https://github.com/facebook/react/issues/6410\n        this.removeDayPickerFocusOut = (0, _consolidatedEvents.addEventListener)(this.dayPickerContainer, 'focusout', this.onDayPickerFocusOut);\n      }\n\n      return addDayPickerEventListeners;\n    }()\n  }, {\n    key: \"removeDayPickerEventListeners\",\n    value: function () {\n      function removeDayPickerEventListeners() {\n        if (this.removeDayPickerFocusOut) this.removeDayPickerFocusOut();\n      }\n\n      return removeDayPickerEventListeners;\n    }()\n  }, {\n    key: \"isOpened\",\n    value: function () {\n      function isOpened() {\n        var focusedInput = this.props.focusedInput;\n        return focusedInput === _constants.START_DATE || focusedInput === _constants.END_DATE;\n      }\n\n      return isOpened;\n    }()\n  }, {\n    key: \"disableScroll\",\n    value: function () {\n      function disableScroll() {\n        var _this$props4 = this.props,\n            appendToBody = _this$props4.appendToBody,\n            propDisableScroll = _this$props4.disableScroll;\n        if (!appendToBody && !propDisableScroll) return;\n        if (!this.isOpened()) return; // Disable scroll for every ancestor of this DateRangePicker up to the\n        // document level. This ensures the input and the picker never move. Other\n        // sibling elements or the picker itself can scroll.\n\n        this.enableScroll = (0, _disableScroll2[\"default\"])(this.container);\n      }\n\n      return disableScroll;\n    }()\n  }, {\n    key: \"responsivizePickerPosition\",\n    value: function () {\n      function responsivizePickerPosition() {\n        // It's possible the portal props have been changed in response to window resizes\n        // So let's ensure we reset this back to the base state each time\n        this.setState({\n          dayPickerContainerStyles: {}\n        });\n\n        if (!this.isOpened()) {\n          return;\n        }\n\n        var _this$props5 = this.props,\n            openDirection = _this$props5.openDirection,\n            anchorDirection = _this$props5.anchorDirection,\n            horizontalMargin = _this$props5.horizontalMargin,\n            withPortal = _this$props5.withPortal,\n            withFullScreenPortal = _this$props5.withFullScreenPortal,\n            appendToBody = _this$props5.appendToBody;\n        var dayPickerContainerStyles = this.state.dayPickerContainerStyles;\n        var isAnchoredLeft = anchorDirection === _constants.ANCHOR_LEFT;\n\n        if (!withPortal && !withFullScreenPortal) {\n          var containerRect = this.dayPickerContainer.getBoundingClientRect();\n          var currentOffset = dayPickerContainerStyles[anchorDirection] || 0;\n          var containerEdge = isAnchoredLeft ? containerRect[_constants.ANCHOR_RIGHT] : containerRect[_constants.ANCHOR_LEFT];\n          this.setState({\n            dayPickerContainerStyles: _objectSpread({}, (0, _getResponsiveContainerStyles[\"default\"])(anchorDirection, currentOffset, containerEdge, horizontalMargin), appendToBody && (0, _getDetachedContainerStyles[\"default\"])(openDirection, anchorDirection, this.container))\n          });\n        }\n      }\n\n      return responsivizePickerPosition;\n    }()\n  }, {\n    key: \"showKeyboardShortcutsPanel\",\n    value: function () {\n      function showKeyboardShortcutsPanel() {\n        this.setState({\n          isDateRangePickerInputFocused: false,\n          isDayPickerFocused: true,\n          showKeyboardShortcuts: true\n        });\n      }\n\n      return showKeyboardShortcutsPanel;\n    }()\n  }, {\n    key: \"maybeRenderDayPickerWithPortal\",\n    value: function () {\n      function maybeRenderDayPickerWithPortal() {\n        var _this$props6 = this.props,\n            withPortal = _this$props6.withPortal,\n            withFullScreenPortal = _this$props6.withFullScreenPortal,\n            appendToBody = _this$props6.appendToBody;\n\n        if (!this.isOpened()) {\n          return null;\n        }\n\n        if (withPortal || withFullScreenPortal || appendToBody) {\n          return _react[\"default\"].createElement(_reactPortal.Portal, null, this.renderDayPicker());\n        }\n\n        return this.renderDayPicker();\n      }\n\n      return maybeRenderDayPickerWithPortal;\n    }()\n  }, {\n    key: \"renderDayPicker\",\n    value: function () {\n      function renderDayPicker() {\n        var _this$props7 = this.props,\n            anchorDirection = _this$props7.anchorDirection,\n            openDirection = _this$props7.openDirection,\n            isDayBlocked = _this$props7.isDayBlocked,\n            isDayHighlighted = _this$props7.isDayHighlighted,\n            isOutsideRange = _this$props7.isOutsideRange,\n            numberOfMonths = _this$props7.numberOfMonths,\n            orientation = _this$props7.orientation,\n            monthFormat = _this$props7.monthFormat,\n            renderMonthText = _this$props7.renderMonthText,\n            navPrev = _this$props7.navPrev,\n            navNext = _this$props7.navNext,\n            onPrevMonthClick = _this$props7.onPrevMonthClick,\n            onNextMonthClick = _this$props7.onNextMonthClick,\n            onDatesChange = _this$props7.onDatesChange,\n            onFocusChange = _this$props7.onFocusChange,\n            withPortal = _this$props7.withPortal,\n            withFullScreenPortal = _this$props7.withFullScreenPortal,\n            daySize = _this$props7.daySize,\n            enableOutsideDays = _this$props7.enableOutsideDays,\n            focusedInput = _this$props7.focusedInput,\n            startDate = _this$props7.startDate,\n            startDateOffset = _this$props7.startDateOffset,\n            endDate = _this$props7.endDate,\n            endDateOffset = _this$props7.endDateOffset,\n            minimumNights = _this$props7.minimumNights,\n            keepOpenOnDateSelect = _this$props7.keepOpenOnDateSelect,\n            renderCalendarDay = _this$props7.renderCalendarDay,\n            renderDayContents = _this$props7.renderDayContents,\n            renderCalendarInfo = _this$props7.renderCalendarInfo,\n            renderMonthElement = _this$props7.renderMonthElement,\n            calendarInfoPosition = _this$props7.calendarInfoPosition,\n            firstDayOfWeek = _this$props7.firstDayOfWeek,\n            initialVisibleMonth = _this$props7.initialVisibleMonth,\n            hideKeyboardShortcutsPanel = _this$props7.hideKeyboardShortcutsPanel,\n            customCloseIcon = _this$props7.customCloseIcon,\n            onClose = _this$props7.onClose,\n            phrases = _this$props7.phrases,\n            dayAriaLabelFormat = _this$props7.dayAriaLabelFormat,\n            isRTL = _this$props7.isRTL,\n            weekDayFormat = _this$props7.weekDayFormat,\n            styles = _this$props7.styles,\n            verticalHeight = _this$props7.verticalHeight,\n            transitionDuration = _this$props7.transitionDuration,\n            verticalSpacing = _this$props7.verticalSpacing,\n            horizontalMonthPadding = _this$props7.horizontalMonthPadding,\n            small = _this$props7.small,\n            disabled = _this$props7.disabled,\n            reactDates = _this$props7.theme.reactDates;\n        var _this$state = this.state,\n            dayPickerContainerStyles = _this$state.dayPickerContainerStyles,\n            isDayPickerFocused = _this$state.isDayPickerFocused,\n            showKeyboardShortcuts = _this$state.showKeyboardShortcuts;\n        var onOutsideClick = !withFullScreenPortal && withPortal ? this.onOutsideClick : undefined;\n\n        var initialVisibleMonthThunk = initialVisibleMonth || function () {\n          return startDate || endDate || (0, _moment[\"default\"])();\n        };\n\n        var closeIcon = customCloseIcon || _react[\"default\"].createElement(_CloseButton[\"default\"], (0, _reactWithStyles.css)(styles.DateRangePicker_closeButton_svg));\n\n        var inputHeight = (0, _getInputHeight[\"default\"])(reactDates, small);\n        var withAnyPortal = withPortal || withFullScreenPortal;\n        return _react[\"default\"].createElement(\"div\", _extends({\n          // eslint-disable-line jsx-a11y/no-static-element-interactions\n          ref: this.setDayPickerContainerRef\n        }, (0, _reactWithStyles.css)(styles.DateRangePicker_picker, anchorDirection === _constants.ANCHOR_LEFT && styles.DateRangePicker_picker__directionLeft, anchorDirection === _constants.ANCHOR_RIGHT && styles.DateRangePicker_picker__directionRight, orientation === _constants.HORIZONTAL_ORIENTATION && styles.DateRangePicker_picker__horizontal, orientation === _constants.VERTICAL_ORIENTATION && styles.DateRangePicker_picker__vertical, !withAnyPortal && openDirection === _constants.OPEN_DOWN && {\n          top: inputHeight + verticalSpacing\n        }, !withAnyPortal && openDirection === _constants.OPEN_UP && {\n          bottom: inputHeight + verticalSpacing\n        }, withAnyPortal && styles.DateRangePicker_picker__portal, withFullScreenPortal && styles.DateRangePicker_picker__fullScreenPortal, isRTL && styles.DateRangePicker_picker__rtl, dayPickerContainerStyles), {\n          onClick: onOutsideClick\n        }), _react[\"default\"].createElement(_DayPickerRangeController[\"default\"], {\n          orientation: orientation,\n          enableOutsideDays: enableOutsideDays,\n          numberOfMonths: numberOfMonths,\n          onPrevMonthClick: onPrevMonthClick,\n          onNextMonthClick: onNextMonthClick,\n          onDatesChange: onDatesChange,\n          onFocusChange: onFocusChange,\n          onClose: onClose,\n          focusedInput: focusedInput,\n          startDate: startDate,\n          startDateOffset: startDateOffset,\n          endDate: endDate,\n          endDateOffset: endDateOffset,\n          monthFormat: monthFormat,\n          renderMonthText: renderMonthText,\n          withPortal: withAnyPortal,\n          daySize: daySize,\n          initialVisibleMonth: initialVisibleMonthThunk,\n          hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,\n          navPrev: navPrev,\n          navNext: navNext,\n          minimumNights: minimumNights,\n          isOutsideRange: isOutsideRange,\n          isDayHighlighted: isDayHighlighted,\n          isDayBlocked: isDayBlocked,\n          keepOpenOnDateSelect: keepOpenOnDateSelect,\n          renderCalendarDay: renderCalendarDay,\n          renderDayContents: renderDayContents,\n          renderCalendarInfo: renderCalendarInfo,\n          renderMonthElement: renderMonthElement,\n          calendarInfoPosition: calendarInfoPosition,\n          isFocused: isDayPickerFocused,\n          showKeyboardShortcuts: showKeyboardShortcuts,\n          onBlur: this.onDayPickerBlur,\n          phrases: phrases,\n          dayAriaLabelFormat: dayAriaLabelFormat,\n          isRTL: isRTL,\n          firstDayOfWeek: firstDayOfWeek,\n          weekDayFormat: weekDayFormat,\n          verticalHeight: verticalHeight,\n          transitionDuration: transitionDuration,\n          disabled: disabled,\n          horizontalMonthPadding: horizontalMonthPadding\n        }), withFullScreenPortal && _react[\"default\"].createElement(\"button\", _extends({}, (0, _reactWithStyles.css)(styles.DateRangePicker_closeButton), {\n          type: \"button\",\n          onClick: this.onOutsideClick,\n          \"aria-label\": phrases.closeDatePicker\n        }), closeIcon));\n      }\n\n      return renderDayPicker;\n    }()\n  }, {\n    key: \"render\",\n    value: function () {\n      function render() {\n        var _this$props8 = this.props,\n            startDate = _this$props8.startDate,\n            startDateId = _this$props8.startDateId,\n            startDatePlaceholderText = _this$props8.startDatePlaceholderText,\n            endDate = _this$props8.endDate,\n            endDateId = _this$props8.endDateId,\n            endDatePlaceholderText = _this$props8.endDatePlaceholderText,\n            focusedInput = _this$props8.focusedInput,\n            screenReaderInputMessage = _this$props8.screenReaderInputMessage,\n            showClearDates = _this$props8.showClearDates,\n            showDefaultInputIcon = _this$props8.showDefaultInputIcon,\n            inputIconPosition = _this$props8.inputIconPosition,\n            customInputIcon = _this$props8.customInputIcon,\n            customArrowIcon = _this$props8.customArrowIcon,\n            customCloseIcon = _this$props8.customCloseIcon,\n            disabled = _this$props8.disabled,\n            required = _this$props8.required,\n            readOnly = _this$props8.readOnly,\n            openDirection = _this$props8.openDirection,\n            phrases = _this$props8.phrases,\n            isOutsideRange = _this$props8.isOutsideRange,\n            minimumNights = _this$props8.minimumNights,\n            withPortal = _this$props8.withPortal,\n            withFullScreenPortal = _this$props8.withFullScreenPortal,\n            displayFormat = _this$props8.displayFormat,\n            reopenPickerOnClearDates = _this$props8.reopenPickerOnClearDates,\n            keepOpenOnDateSelect = _this$props8.keepOpenOnDateSelect,\n            onDatesChange = _this$props8.onDatesChange,\n            onClose = _this$props8.onClose,\n            isRTL = _this$props8.isRTL,\n            noBorder = _this$props8.noBorder,\n            block = _this$props8.block,\n            verticalSpacing = _this$props8.verticalSpacing,\n            small = _this$props8.small,\n            regular = _this$props8.regular,\n            styles = _this$props8.styles;\n        var isDateRangePickerInputFocused = this.state.isDateRangePickerInputFocused;\n        var enableOutsideClick = !withPortal && !withFullScreenPortal;\n        var hideFang = verticalSpacing < _constants.FANG_HEIGHT_PX;\n\n        var input = _react[\"default\"].createElement(_DateRangePickerInputController[\"default\"], {\n          startDate: startDate,\n          startDateId: startDateId,\n          startDatePlaceholderText: startDatePlaceholderText,\n          isStartDateFocused: focusedInput === _constants.START_DATE,\n          endDate: endDate,\n          endDateId: endDateId,\n          endDatePlaceholderText: endDatePlaceholderText,\n          isEndDateFocused: focusedInput === _constants.END_DATE,\n          displayFormat: displayFormat,\n          showClearDates: showClearDates,\n          showCaret: !withPortal && !withFullScreenPortal && !hideFang,\n          showDefaultInputIcon: showDefaultInputIcon,\n          inputIconPosition: inputIconPosition,\n          customInputIcon: customInputIcon,\n          customArrowIcon: customArrowIcon,\n          customCloseIcon: customCloseIcon,\n          disabled: disabled,\n          required: required,\n          readOnly: readOnly,\n          openDirection: openDirection,\n          reopenPickerOnClearDates: reopenPickerOnClearDates,\n          keepOpenOnDateSelect: keepOpenOnDateSelect,\n          isOutsideRange: isOutsideRange,\n          minimumNights: minimumNights,\n          withFullScreenPortal: withFullScreenPortal,\n          onDatesChange: onDatesChange,\n          onFocusChange: this.onDateRangePickerInputFocus,\n          onKeyDownArrowDown: this.onDayPickerFocus,\n          onKeyDownQuestionMark: this.showKeyboardShortcutsPanel,\n          onClose: onClose,\n          phrases: phrases,\n          screenReaderMessage: screenReaderInputMessage,\n          isFocused: isDateRangePickerInputFocused,\n          isRTL: isRTL,\n          noBorder: noBorder,\n          block: block,\n          small: small,\n          regular: regular,\n          verticalSpacing: verticalSpacing\n        }, this.maybeRenderDayPickerWithPortal());\n\n        return _react[\"default\"].createElement(\"div\", _extends({\n          ref: this.setContainerRef\n        }, (0, _reactWithStyles.css)(styles.DateRangePicker, block && styles.DateRangePicker__block)), enableOutsideClick && _react[\"default\"].createElement(_reactOutsideClickHandler[\"default\"], {\n          onOutsideClick: this.onOutsideClick\n        }, input), enableOutsideClick || input);\n      }\n\n      return render;\n    }()\n  }]);\n\n  return DateRangePicker;\n}(_react[\"default\"].PureComponent || _react[\"default\"].Component);\n\nexports.PureDateRangePicker = DateRangePicker;\nDateRangePicker.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nDateRangePicker.defaultProps = defaultProps;\n\nvar _default = (0, _reactWithStyles.withStyles)(function (_ref2) {\n  var _ref2$reactDates = _ref2.reactDates,\n      color = _ref2$reactDates.color,\n      zIndex = _ref2$reactDates.zIndex;\n  return {\n    DateRangePicker: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    DateRangePicker__block: {\n      display: 'block'\n    },\n    DateRangePicker_picker: {\n      zIndex: zIndex + 1,\n      backgroundColor: color.background,\n      position: 'absolute'\n    },\n    DateRangePicker_picker__rtl: {\n      direction: (0, _noflip[\"default\"])('rtl')\n    },\n    DateRangePicker_picker__directionLeft: {\n      left: (0, _noflip[\"default\"])(0)\n    },\n    DateRangePicker_picker__directionRight: {\n      right: (0, _noflip[\"default\"])(0)\n    },\n    DateRangePicker_picker__portal: {\n      backgroundColor: 'rgba(0, 0, 0, 0.3)',\n      position: 'fixed',\n      top: 0,\n      left: (0, _noflip[\"default\"])(0),\n      height: '100%',\n      width: '100%'\n    },\n    DateRangePicker_picker__fullScreenPortal: {\n      backgroundColor: color.background\n    },\n    DateRangePicker_closeButton: {\n      background: 'none',\n      border: 0,\n      color: 'inherit',\n      font: 'inherit',\n      lineHeight: 'normal',\n      overflow: 'visible',\n      cursor: 'pointer',\n      position: 'absolute',\n      top: 0,\n      right: (0, _noflip[\"default\"])(0),\n      padding: 15,\n      zIndex: zIndex + 2,\n      ':hover': {\n        color: \"darken(\".concat(color.core.grayLighter, \", 10%)\"),\n        textDecoration: 'none'\n      },\n      ':focus': {\n        color: \"darken(\".concat(color.core.grayLighter, \", 10%)\"),\n        textDecoration: 'none'\n      }\n    },\n    DateRangePicker_closeButton_svg: {\n      height: 15,\n      width: 15,\n      fill: color.core.grayLighter\n    }\n  };\n}, {\n  pureComponent: typeof _react[\"default\"].PureComponent !== 'undefined'\n})(DateRangePicker);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}