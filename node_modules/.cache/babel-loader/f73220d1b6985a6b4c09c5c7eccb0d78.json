{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _reactAddonsShallowCompare = _interopRequireDefault(require(\"react-addons-shallow-compare\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactMomentProptypes = _interopRequireDefault(require(\"react-moment-proptypes\"));\n\nvar _airbnbPropTypes = require(\"airbnb-prop-types\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _object = _interopRequireDefault(require(\"object.values\"));\n\nvar _isTouchDevice = _interopRequireDefault(require(\"is-touch-device\"));\n\nvar _defaultPhrases = require(\"../defaultPhrases\");\n\nvar _getPhrasePropTypes = _interopRequireDefault(require(\"../utils/getPhrasePropTypes\"));\n\nvar _isInclusivelyAfterDay = _interopRequireDefault(require(\"../utils/isInclusivelyAfterDay\"));\n\nvar _isNextDay = _interopRequireDefault(require(\"../utils/isNextDay\"));\n\nvar _isSameDay = _interopRequireDefault(require(\"../utils/isSameDay\"));\n\nvar _isAfterDay = _interopRequireDefault(require(\"../utils/isAfterDay\"));\n\nvar _isBeforeDay = _interopRequireDefault(require(\"../utils/isBeforeDay\"));\n\nvar _getVisibleDays = _interopRequireDefault(require(\"../utils/getVisibleDays\"));\n\nvar _isDayVisible = _interopRequireDefault(require(\"../utils/isDayVisible\"));\n\nvar _getSelectedDateOffset = _interopRequireDefault(require(\"../utils/getSelectedDateOffset\"));\n\nvar _toISODateString = _interopRequireDefault(require(\"../utils/toISODateString\"));\n\nvar _toISOMonthString = _interopRequireDefault(require(\"../utils/toISOMonthString\"));\n\nvar _DisabledShape = _interopRequireDefault(require(\"../shapes/DisabledShape\"));\n\nvar _FocusedInputShape = _interopRequireDefault(require(\"../shapes/FocusedInputShape\"));\n\nvar _ScrollableOrientationShape = _interopRequireDefault(require(\"../shapes/ScrollableOrientationShape\"));\n\nvar _DayOfWeekShape = _interopRequireDefault(require(\"../shapes/DayOfWeekShape\"));\n\nvar _CalendarInfoPositionShape = _interopRequireDefault(require(\"../shapes/CalendarInfoPositionShape\"));\n\nvar _constants = require(\"../constants\");\n\nvar _DayPicker = _interopRequireDefault(require(\"./DayPicker\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function () {\n    function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    }\n\n    return _getPrototypeOf;\n  }();\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function () {\n    function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    }\n\n    return _setPrototypeOf;\n  }();\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar propTypes = process.env.NODE_ENV !== \"production\" ? (0, _airbnbPropTypes.forbidExtraProps)({\n  startDate: _reactMomentProptypes[\"default\"].momentObj,\n  endDate: _reactMomentProptypes[\"default\"].momentObj,\n  onDatesChange: _propTypes[\"default\"].func,\n  startDateOffset: _propTypes[\"default\"].func,\n  endDateOffset: _propTypes[\"default\"].func,\n  minDate: _reactMomentProptypes[\"default\"].momentObj,\n  maxDate: _reactMomentProptypes[\"default\"].momentObj,\n  focusedInput: _FocusedInputShape[\"default\"],\n  onFocusChange: _propTypes[\"default\"].func,\n  onClose: _propTypes[\"default\"].func,\n  keepOpenOnDateSelect: _propTypes[\"default\"].bool,\n  minimumNights: _propTypes[\"default\"].number,\n  disabled: _DisabledShape[\"default\"],\n  isOutsideRange: _propTypes[\"default\"].func,\n  isDayBlocked: _propTypes[\"default\"].func,\n  isDayHighlighted: _propTypes[\"default\"].func,\n  getMinNightsForHoverDate: _propTypes[\"default\"].func,\n  // DayPicker props\n  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes[\"default\"].func, 'renderMonthText', 'renderMonthElement'),\n  enableOutsideDays: _propTypes[\"default\"].bool,\n  numberOfMonths: _propTypes[\"default\"].number,\n  orientation: _ScrollableOrientationShape[\"default\"],\n  withPortal: _propTypes[\"default\"].bool,\n  initialVisibleMonth: _propTypes[\"default\"].func,\n  hideKeyboardShortcutsPanel: _propTypes[\"default\"].bool,\n  daySize: _airbnbPropTypes.nonNegativeInteger,\n  noBorder: _propTypes[\"default\"].bool,\n  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,\n  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,\n  navPrev: _propTypes[\"default\"].node,\n  navNext: _propTypes[\"default\"].node,\n  noNavButtons: _propTypes[\"default\"].bool,\n  onPrevMonthClick: _propTypes[\"default\"].func,\n  onNextMonthClick: _propTypes[\"default\"].func,\n  onOutsideClick: _propTypes[\"default\"].func,\n  renderCalendarDay: _propTypes[\"default\"].func,\n  renderDayContents: _propTypes[\"default\"].func,\n  renderCalendarInfo: _propTypes[\"default\"].func,\n  renderKeyboardShortcutsButton: _propTypes[\"default\"].func,\n  calendarInfoPosition: _CalendarInfoPositionShape[\"default\"],\n  firstDayOfWeek: _DayOfWeekShape[\"default\"],\n  verticalHeight: _airbnbPropTypes.nonNegativeInteger,\n  transitionDuration: _airbnbPropTypes.nonNegativeInteger,\n  // accessibility\n  onBlur: _propTypes[\"default\"].func,\n  isFocused: _propTypes[\"default\"].bool,\n  showKeyboardShortcuts: _propTypes[\"default\"].bool,\n  onTab: _propTypes[\"default\"].func,\n  onShiftTab: _propTypes[\"default\"].func,\n  // i18n\n  monthFormat: _propTypes[\"default\"].string,\n  weekDayFormat: _propTypes[\"default\"].string,\n  phrases: _propTypes[\"default\"].shape((0, _getPhrasePropTypes[\"default\"])(_defaultPhrases.DayPickerPhrases)),\n  dayAriaLabelFormat: _propTypes[\"default\"].string,\n  isRTL: _propTypes[\"default\"].bool\n}) : {};\nvar defaultProps = {\n  startDate: undefined,\n  // TODO: use null\n  endDate: undefined,\n  // TODO: use null\n  minDate: null,\n  maxDate: null,\n  onDatesChange: function () {\n    function onDatesChange() {}\n\n    return onDatesChange;\n  }(),\n  startDateOffset: undefined,\n  endDateOffset: undefined,\n  focusedInput: null,\n  onFocusChange: function () {\n    function onFocusChange() {}\n\n    return onFocusChange;\n  }(),\n  onClose: function () {\n    function onClose() {}\n\n    return onClose;\n  }(),\n  keepOpenOnDateSelect: false,\n  minimumNights: 1,\n  disabled: false,\n  isOutsideRange: function () {\n    function isOutsideRange() {}\n\n    return isOutsideRange;\n  }(),\n  isDayBlocked: function () {\n    function isDayBlocked() {}\n\n    return isDayBlocked;\n  }(),\n  isDayHighlighted: function () {\n    function isDayHighlighted() {}\n\n    return isDayHighlighted;\n  }(),\n  getMinNightsForHoverDate: function () {\n    function getMinNightsForHoverDate() {}\n\n    return getMinNightsForHoverDate;\n  }(),\n  // DayPicker props\n  renderMonthText: null,\n  enableOutsideDays: false,\n  numberOfMonths: 1,\n  orientation: _constants.HORIZONTAL_ORIENTATION,\n  withPortal: false,\n  hideKeyboardShortcutsPanel: false,\n  initialVisibleMonth: null,\n  daySize: _constants.DAY_SIZE,\n  navPrev: null,\n  navNext: null,\n  noNavButtons: false,\n  onPrevMonthClick: function () {\n    function onPrevMonthClick() {}\n\n    return onPrevMonthClick;\n  }(),\n  onNextMonthClick: function () {\n    function onNextMonthClick() {}\n\n    return onNextMonthClick;\n  }(),\n  onOutsideClick: function () {\n    function onOutsideClick() {}\n\n    return onOutsideClick;\n  }(),\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  renderCalendarInfo: null,\n  renderMonthElement: null,\n  renderKeyboardShortcutsButton: undefined,\n  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,\n  firstDayOfWeek: null,\n  verticalHeight: null,\n  noBorder: false,\n  transitionDuration: undefined,\n  verticalBorderSpacing: undefined,\n  horizontalMonthPadding: 13,\n  // accessibility\n  onBlur: function () {\n    function onBlur() {}\n\n    return onBlur;\n  }(),\n  isFocused: false,\n  showKeyboardShortcuts: false,\n  onTab: function () {\n    function onTab() {}\n\n    return onTab;\n  }(),\n  onShiftTab: function () {\n    function onShiftTab() {}\n\n    return onShiftTab;\n  }(),\n  // i18n\n  monthFormat: 'MMMM YYYY',\n  weekDayFormat: 'dd',\n  phrases: _defaultPhrases.DayPickerPhrases,\n  dayAriaLabelFormat: undefined,\n  isRTL: false\n};\n\nvar getChooseAvailableDatePhrase = function getChooseAvailableDatePhrase(phrases, focusedInput) {\n  if (focusedInput === _constants.START_DATE) {\n    return phrases.chooseAvailableStartDate;\n  }\n\n  if (focusedInput === _constants.END_DATE) {\n    return phrases.chooseAvailableEndDate;\n  }\n\n  return phrases.chooseAvailableDate;\n};\n\nvar DayPickerRangeController =\n/*#__PURE__*/\nfunction (_ref) {\n  _inherits(DayPickerRangeController, _ref);\n\n  _createClass(DayPickerRangeController, [{\n    key: !_react[\"default\"].PureComponent && \"shouldComponentUpdate\",\n    value: function () {\n      function value(nextProps, nextState) {\n        return (0, _reactAddonsShallowCompare[\"default\"])(this, nextProps, nextState);\n      }\n\n      return value;\n    }()\n  }]);\n\n  function DayPickerRangeController(props) {\n    var _this;\n\n    _classCallCheck(this, DayPickerRangeController);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DayPickerRangeController).call(this, props));\n    _this.isTouchDevice = (0, _isTouchDevice[\"default\"])();\n    _this.today = (0, _moment[\"default\"])();\n    _this.modifiers = {\n      today: function () {\n        function today(day) {\n          return _this.isToday(day);\n        }\n\n        return today;\n      }(),\n      blocked: function () {\n        function blocked(day) {\n          return _this.isBlocked(day);\n        }\n\n        return blocked;\n      }(),\n      'blocked-calendar': function () {\n        function blockedCalendar(day) {\n          return props.isDayBlocked(day);\n        }\n\n        return blockedCalendar;\n      }(),\n      'blocked-out-of-range': function () {\n        function blockedOutOfRange(day) {\n          return props.isOutsideRange(day);\n        }\n\n        return blockedOutOfRange;\n      }(),\n      'highlighted-calendar': function () {\n        function highlightedCalendar(day) {\n          return props.isDayHighlighted(day);\n        }\n\n        return highlightedCalendar;\n      }(),\n      valid: function () {\n        function valid(day) {\n          return !_this.isBlocked(day);\n        }\n\n        return valid;\n      }(),\n      'selected-start': function () {\n        function selectedStart(day) {\n          return _this.isStartDate(day);\n        }\n\n        return selectedStart;\n      }(),\n      'selected-end': function () {\n        function selectedEnd(day) {\n          return _this.isEndDate(day);\n        }\n\n        return selectedEnd;\n      }(),\n      'blocked-minimum-nights': function () {\n        function blockedMinimumNights(day) {\n          return _this.doesNotMeetMinimumNights(day);\n        }\n\n        return blockedMinimumNights;\n      }(),\n      'selected-span': function () {\n        function selectedSpan(day) {\n          return _this.isInSelectedSpan(day);\n        }\n\n        return selectedSpan;\n      }(),\n      'last-in-range': function () {\n        function lastInRange(day) {\n          return _this.isLastInRange(day);\n        }\n\n        return lastInRange;\n      }(),\n      hovered: function () {\n        function hovered(day) {\n          return _this.isHovered(day);\n        }\n\n        return hovered;\n      }(),\n      'hovered-span': function () {\n        function hoveredSpan(day) {\n          return _this.isInHoveredSpan(day);\n        }\n\n        return hoveredSpan;\n      }(),\n      'hovered-offset': function () {\n        function hoveredOffset(day) {\n          return _this.isInHoveredSpan(day);\n        }\n\n        return hoveredOffset;\n      }(),\n      'after-hovered-start': function () {\n        function afterHoveredStart(day) {\n          return _this.isDayAfterHoveredStartDate(day);\n        }\n\n        return afterHoveredStart;\n      }(),\n      'first-day-of-week': function () {\n        function firstDayOfWeek(day) {\n          return _this.isFirstDayOfWeek(day);\n        }\n\n        return firstDayOfWeek;\n      }(),\n      'last-day-of-week': function () {\n        function lastDayOfWeek(day) {\n          return _this.isLastDayOfWeek(day);\n        }\n\n        return lastDayOfWeek;\n      }(),\n      'hovered-start-first-possible-end': function () {\n        function hoveredStartFirstPossibleEnd(day, hoverDate) {\n          return _this.isFirstPossibleEndDateForHoveredStartDate(day, hoverDate);\n        }\n\n        return hoveredStartFirstPossibleEnd;\n      }(),\n      'hovered-start-blocked-minimum-nights': function () {\n        function hoveredStartBlockedMinimumNights(day, hoverDate) {\n          return _this.doesNotMeetMinNightsForHoveredStartDate(day, hoverDate);\n        }\n\n        return hoveredStartBlockedMinimumNights;\n      }()\n    };\n\n    var _this$getStateForNewM = _this.getStateForNewMonth(props),\n        currentMonth = _this$getStateForNewM.currentMonth,\n        visibleDays = _this$getStateForNewM.visibleDays; // initialize phrases\n    // set the appropriate CalendarDay phrase based on focusedInput\n\n\n    var chooseAvailableDate = getChooseAvailableDatePhrase(props.phrases, props.focusedInput);\n    _this.state = {\n      hoverDate: null,\n      currentMonth: currentMonth,\n      phrases: _objectSpread({}, props.phrases, {\n        chooseAvailableDate: chooseAvailableDate\n      }),\n      visibleDays: visibleDays,\n      disablePrev: _this.shouldDisableMonthNavigation(props.minDate, currentMonth),\n      disableNext: _this.shouldDisableMonthNavigation(props.maxDate, currentMonth)\n    };\n    _this.onDayClick = _this.onDayClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDayMouseEnter = _this.onDayMouseEnter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onDayMouseLeave = _this.onDayMouseLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onPrevMonthClick = _this.onPrevMonthClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onNextMonthClick = _this.onNextMonthClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMonthChange = _this.onMonthChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onYearChange = _this.onYearChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMultiplyScrollableMonths = _this.onMultiplyScrollableMonths.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getFirstFocusableDay = _this.getFirstFocusableDay.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DayPickerRangeController, [{\n    key: \"componentWillReceiveProps\",\n    value: function () {\n      function componentWillReceiveProps(nextProps) {\n        var _this2 = this;\n\n        var startDate = nextProps.startDate,\n            endDate = nextProps.endDate,\n            focusedInput = nextProps.focusedInput,\n            getMinNightsForHoverDate = nextProps.getMinNightsForHoverDate,\n            minimumNights = nextProps.minimumNights,\n            isOutsideRange = nextProps.isOutsideRange,\n            isDayBlocked = nextProps.isDayBlocked,\n            isDayHighlighted = nextProps.isDayHighlighted,\n            phrases = nextProps.phrases,\n            initialVisibleMonth = nextProps.initialVisibleMonth,\n            numberOfMonths = nextProps.numberOfMonths,\n            enableOutsideDays = nextProps.enableOutsideDays;\n        var _this$props = this.props,\n            prevStartDate = _this$props.startDate,\n            prevEndDate = _this$props.endDate,\n            prevFocusedInput = _this$props.focusedInput,\n            prevMinimumNights = _this$props.minimumNights,\n            prevIsOutsideRange = _this$props.isOutsideRange,\n            prevIsDayBlocked = _this$props.isDayBlocked,\n            prevIsDayHighlighted = _this$props.isDayHighlighted,\n            prevPhrases = _this$props.phrases,\n            prevInitialVisibleMonth = _this$props.initialVisibleMonth,\n            prevNumberOfMonths = _this$props.numberOfMonths,\n            prevEnableOutsideDays = _this$props.enableOutsideDays;\n        var hoverDate = this.state.hoverDate;\n        var visibleDays = this.state.visibleDays;\n        var recomputeOutsideRange = false;\n        var recomputeDayBlocked = false;\n        var recomputeDayHighlighted = false;\n\n        if (isOutsideRange !== prevIsOutsideRange) {\n          this.modifiers['blocked-out-of-range'] = function (day) {\n            return isOutsideRange(day);\n          };\n\n          recomputeOutsideRange = true;\n        }\n\n        if (isDayBlocked !== prevIsDayBlocked) {\n          this.modifiers['blocked-calendar'] = function (day) {\n            return isDayBlocked(day);\n          };\n\n          recomputeDayBlocked = true;\n        }\n\n        if (isDayHighlighted !== prevIsDayHighlighted) {\n          this.modifiers['highlighted-calendar'] = function (day) {\n            return isDayHighlighted(day);\n          };\n\n          recomputeDayHighlighted = true;\n        }\n\n        var recomputePropModifiers = recomputeOutsideRange || recomputeDayBlocked || recomputeDayHighlighted;\n        var didStartDateChange = startDate !== prevStartDate;\n        var didEndDateChange = endDate !== prevEndDate;\n        var didFocusChange = focusedInput !== prevFocusedInput;\n\n        if (numberOfMonths !== prevNumberOfMonths || enableOutsideDays !== prevEnableOutsideDays || initialVisibleMonth !== prevInitialVisibleMonth && !prevFocusedInput && didFocusChange) {\n          var newMonthState = this.getStateForNewMonth(nextProps);\n          var currentMonth = newMonthState.currentMonth;\n          visibleDays = newMonthState.visibleDays;\n          this.setState({\n            currentMonth: currentMonth,\n            visibleDays: visibleDays\n          });\n        }\n\n        var modifiers = {};\n\n        if (didStartDateChange) {\n          modifiers = this.deleteModifier(modifiers, prevStartDate, 'selected-start');\n          modifiers = this.addModifier(modifiers, startDate, 'selected-start');\n\n          if (prevStartDate) {\n            var startSpan = prevStartDate.clone().add(1, 'day');\n            var endSpan = prevStartDate.clone().add(prevMinimumNights + 1, 'days');\n            modifiers = this.deleteModifierFromRange(modifiers, startSpan, endSpan, 'after-hovered-start');\n          }\n        }\n\n        if (didEndDateChange) {\n          modifiers = this.deleteModifier(modifiers, prevEndDate, 'selected-end');\n          modifiers = this.addModifier(modifiers, endDate, 'selected-end');\n        }\n\n        if (didStartDateChange || didEndDateChange) {\n          if (prevStartDate && prevEndDate) {\n            modifiers = this.deleteModifierFromRange(modifiers, prevStartDate, prevEndDate.clone().add(1, 'day'), 'selected-span');\n          }\n\n          if (startDate && endDate) {\n            modifiers = this.deleteModifierFromRange(modifiers, startDate, endDate.clone().add(1, 'day'), 'hovered-span');\n            modifiers = this.addModifierToRange(modifiers, startDate.clone().add(1, 'day'), endDate, 'selected-span');\n          }\n        }\n\n        if (!this.isTouchDevice && didStartDateChange && startDate && !endDate) {\n          var _startSpan = startDate.clone().add(1, 'day');\n\n          var _endSpan = startDate.clone().add(minimumNights + 1, 'days');\n\n          modifiers = this.addModifierToRange(modifiers, _startSpan, _endSpan, 'after-hovered-start');\n        }\n\n        if (prevMinimumNights > 0) {\n          if (didFocusChange || didStartDateChange || minimumNights !== prevMinimumNights) {\n            var _startSpan2 = prevStartDate || this.today;\n\n            modifiers = this.deleteModifierFromRange(modifiers, _startSpan2, _startSpan2.clone().add(prevMinimumNights, 'days'), 'blocked-minimum-nights');\n            modifiers = this.deleteModifierFromRange(modifiers, _startSpan2, _startSpan2.clone().add(prevMinimumNights, 'days'), 'blocked');\n          }\n        }\n\n        if (didFocusChange || recomputePropModifiers) {\n          (0, _object[\"default\"])(visibleDays).forEach(function (days) {\n            Object.keys(days).forEach(function (day) {\n              var momentObj = (0, _moment[\"default\"])(day);\n              var isBlocked = false;\n\n              if (didFocusChange || recomputeOutsideRange) {\n                if (isOutsideRange(momentObj)) {\n                  modifiers = _this2.addModifier(modifiers, momentObj, 'blocked-out-of-range');\n                  isBlocked = true;\n                } else {\n                  modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked-out-of-range');\n                }\n              }\n\n              if (didFocusChange || recomputeDayBlocked) {\n                if (isDayBlocked(momentObj)) {\n                  modifiers = _this2.addModifier(modifiers, momentObj, 'blocked-calendar');\n                  isBlocked = true;\n                } else {\n                  modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked-calendar');\n                }\n              }\n\n              if (isBlocked) {\n                modifiers = _this2.addModifier(modifiers, momentObj, 'blocked');\n              } else {\n                modifiers = _this2.deleteModifier(modifiers, momentObj, 'blocked');\n              }\n\n              if (didFocusChange || recomputeDayHighlighted) {\n                if (isDayHighlighted(momentObj)) {\n                  modifiers = _this2.addModifier(modifiers, momentObj, 'highlighted-calendar');\n                } else {\n                  modifiers = _this2.deleteModifier(modifiers, momentObj, 'highlighted-calendar');\n                }\n              }\n            });\n          });\n        }\n\n        if (!this.isTouchDevice && didFocusChange && hoverDate && !this.isBlocked(hoverDate)) {\n          var minNightsForHoverDate = getMinNightsForHoverDate(hoverDate);\n\n          if (minNightsForHoverDate > 0 && focusedInput === _constants.END_DATE) {\n            modifiers = this.deleteModifierFromRange(modifiers, hoverDate.clone().add(1, 'days'), hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n            modifiers = this.deleteModifier(modifiers, hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-first-possible-end');\n          }\n\n          if (minNightsForHoverDate > 0 && focusedInput === _constants.START_DATE) {\n            modifiers = this.addModifierToRange(modifiers, hoverDate.clone().add(1, 'days'), hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n            modifiers = this.addModifier(modifiers, hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-first-possible-end');\n          }\n        }\n\n        if (minimumNights > 0 && startDate && focusedInput === _constants.END_DATE) {\n          modifiers = this.addModifierToRange(modifiers, startDate, startDate.clone().add(minimumNights, 'days'), 'blocked-minimum-nights');\n          modifiers = this.addModifierToRange(modifiers, startDate, startDate.clone().add(minimumNights, 'days'), 'blocked');\n        }\n\n        var today = (0, _moment[\"default\"])();\n\n        if (!(0, _isSameDay[\"default\"])(this.today, today)) {\n          modifiers = this.deleteModifier(modifiers, this.today, 'today');\n          modifiers = this.addModifier(modifiers, today, 'today');\n          this.today = today;\n        }\n\n        if (Object.keys(modifiers).length > 0) {\n          this.setState({\n            visibleDays: _objectSpread({}, visibleDays, modifiers)\n          });\n        }\n\n        if (didFocusChange || phrases !== prevPhrases) {\n          // set the appropriate CalendarDay phrase based on focusedInput\n          var chooseAvailableDate = getChooseAvailableDatePhrase(phrases, focusedInput);\n          this.setState({\n            phrases: _objectSpread({}, phrases, {\n              chooseAvailableDate: chooseAvailableDate\n            })\n          });\n        }\n      }\n\n      return componentWillReceiveProps;\n    }()\n  }, {\n    key: \"onDayClick\",\n    value: function () {\n      function onDayClick(day, e) {\n        var _this$props2 = this.props,\n            keepOpenOnDateSelect = _this$props2.keepOpenOnDateSelect,\n            minimumNights = _this$props2.minimumNights,\n            onBlur = _this$props2.onBlur,\n            focusedInput = _this$props2.focusedInput,\n            onFocusChange = _this$props2.onFocusChange,\n            onClose = _this$props2.onClose,\n            onDatesChange = _this$props2.onDatesChange,\n            startDateOffset = _this$props2.startDateOffset,\n            endDateOffset = _this$props2.endDateOffset,\n            disabled = _this$props2.disabled;\n        if (e) e.preventDefault();\n        if (this.isBlocked(day)) return;\n        var _this$props3 = this.props,\n            startDate = _this$props3.startDate,\n            endDate = _this$props3.endDate;\n\n        if (startDateOffset || endDateOffset) {\n          startDate = (0, _getSelectedDateOffset[\"default\"])(startDateOffset, day);\n          endDate = (0, _getSelectedDateOffset[\"default\"])(endDateOffset, day);\n\n          if (this.isBlocked(startDate) || this.isBlocked(endDate)) {\n            return;\n          }\n\n          onDatesChange({\n            startDate: startDate,\n            endDate: endDate\n          });\n\n          if (!keepOpenOnDateSelect) {\n            onFocusChange(null);\n            onClose({\n              startDate: startDate,\n              endDate: endDate\n            });\n          }\n        } else if (focusedInput === _constants.START_DATE) {\n          var lastAllowedStartDate = endDate && endDate.clone().subtract(minimumNights, 'days');\n          var isStartDateAfterEndDate = (0, _isBeforeDay[\"default\"])(lastAllowedStartDate, day) || (0, _isAfterDay[\"default\"])(startDate, endDate);\n          var isEndDateDisabled = disabled === _constants.END_DATE;\n\n          if (!isEndDateDisabled || !isStartDateAfterEndDate) {\n            startDate = day;\n\n            if (isStartDateAfterEndDate) {\n              endDate = null;\n            }\n          }\n\n          onDatesChange({\n            startDate: startDate,\n            endDate: endDate\n          });\n\n          if (isEndDateDisabled && !isStartDateAfterEndDate) {\n            onFocusChange(null);\n            onClose({\n              startDate: startDate,\n              endDate: endDate\n            });\n          } else if (!isEndDateDisabled) {\n            onFocusChange(_constants.END_DATE);\n          }\n        } else if (focusedInput === _constants.END_DATE) {\n          var firstAllowedEndDate = startDate && startDate.clone().add(minimumNights, 'days');\n\n          if (!startDate) {\n            endDate = day;\n            onDatesChange({\n              startDate: startDate,\n              endDate: endDate\n            });\n            onFocusChange(_constants.START_DATE);\n          } else if ((0, _isInclusivelyAfterDay[\"default\"])(day, firstAllowedEndDate)) {\n            endDate = day;\n            onDatesChange({\n              startDate: startDate,\n              endDate: endDate\n            });\n\n            if (!keepOpenOnDateSelect) {\n              onFocusChange(null);\n              onClose({\n                startDate: startDate,\n                endDate: endDate\n              });\n            }\n          } else if (disabled !== _constants.START_DATE) {\n            startDate = day;\n            endDate = null;\n            onDatesChange({\n              startDate: startDate,\n              endDate: endDate\n            });\n          } else {\n            onDatesChange({\n              startDate: startDate,\n              endDate: endDate\n            });\n          }\n        } else {\n          onDatesChange({\n            startDate: startDate,\n            endDate: endDate\n          });\n        }\n\n        onBlur();\n      }\n\n      return onDayClick;\n    }()\n  }, {\n    key: \"onDayMouseEnter\",\n    value: function () {\n      function onDayMouseEnter(day) {\n        /* eslint react/destructuring-assignment: 1 */\n        if (this.isTouchDevice) return;\n        var _this$props4 = this.props,\n            startDate = _this$props4.startDate,\n            endDate = _this$props4.endDate,\n            focusedInput = _this$props4.focusedInput,\n            getMinNightsForHoverDate = _this$props4.getMinNightsForHoverDate,\n            minimumNights = _this$props4.minimumNights,\n            startDateOffset = _this$props4.startDateOffset,\n            endDateOffset = _this$props4.endDateOffset;\n        var _this$state = this.state,\n            hoverDate = _this$state.hoverDate,\n            visibleDays = _this$state.visibleDays,\n            dateOffset = _this$state.dateOffset;\n        var nextDateOffset = null;\n\n        if (focusedInput) {\n          var hasOffset = startDateOffset || endDateOffset;\n          var modifiers = {};\n\n          if (hasOffset) {\n            var start = (0, _getSelectedDateOffset[\"default\"])(startDateOffset, day);\n            var end = (0, _getSelectedDateOffset[\"default\"])(endDateOffset, day, function (rangeDay) {\n              return rangeDay.add(1, 'day');\n            });\n            nextDateOffset = {\n              start: start,\n              end: end\n            }; // eslint-disable-next-line react/destructuring-assignment\n\n            if (dateOffset && dateOffset.start && dateOffset.end) {\n              modifiers = this.deleteModifierFromRange(modifiers, dateOffset.start, dateOffset.end, 'hovered-offset');\n            }\n\n            modifiers = this.addModifierToRange(modifiers, start, end, 'hovered-offset');\n          }\n\n          if (!hasOffset) {\n            modifiers = this.deleteModifier(modifiers, hoverDate, 'hovered');\n            modifiers = this.addModifier(modifiers, day, 'hovered');\n\n            if (startDate && !endDate && focusedInput === _constants.END_DATE) {\n              if ((0, _isAfterDay[\"default\"])(hoverDate, startDate)) {\n                var endSpan = hoverDate.clone().add(1, 'day');\n                modifiers = this.deleteModifierFromRange(modifiers, startDate, endSpan, 'hovered-span');\n              }\n\n              if (!this.isBlocked(day) && (0, _isAfterDay[\"default\"])(day, startDate)) {\n                var _endSpan2 = day.clone().add(1, 'day');\n\n                modifiers = this.addModifierToRange(modifiers, startDate, _endSpan2, 'hovered-span');\n              }\n            }\n\n            if (!startDate && endDate && focusedInput === _constants.START_DATE) {\n              if ((0, _isBeforeDay[\"default\"])(hoverDate, endDate)) {\n                modifiers = this.deleteModifierFromRange(modifiers, hoverDate, endDate, 'hovered-span');\n              }\n\n              if (!this.isBlocked(day) && (0, _isBeforeDay[\"default\"])(day, endDate)) {\n                modifiers = this.addModifierToRange(modifiers, day, endDate, 'hovered-span');\n              }\n            }\n\n            if (startDate) {\n              var startSpan = startDate.clone().add(1, 'day');\n\n              var _endSpan3 = startDate.clone().add(minimumNights + 1, 'days');\n\n              modifiers = this.deleteModifierFromRange(modifiers, startSpan, _endSpan3, 'after-hovered-start');\n\n              if ((0, _isSameDay[\"default\"])(day, startDate)) {\n                var newStartSpan = startDate.clone().add(1, 'day');\n                var newEndSpan = startDate.clone().add(minimumNights + 1, 'days');\n                modifiers = this.addModifierToRange(modifiers, newStartSpan, newEndSpan, 'after-hovered-start');\n              }\n            }\n\n            if (hoverDate && !this.isBlocked(hoverDate)) {\n              var minNightsForPrevHoverDate = getMinNightsForHoverDate(hoverDate);\n\n              if (minNightsForPrevHoverDate > 0 && focusedInput === _constants.START_DATE) {\n                modifiers = this.deleteModifierFromRange(modifiers, hoverDate.clone().add(1, 'days'), hoverDate.clone().add(minNightsForPrevHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n                modifiers = this.deleteModifier(modifiers, hoverDate.clone().add(minNightsForPrevHoverDate, 'days'), 'hovered-start-first-possible-end');\n              }\n            }\n\n            if (!this.isBlocked(day)) {\n              var minNightsForHoverDate = getMinNightsForHoverDate(day);\n\n              if (minNightsForHoverDate > 0 && focusedInput === _constants.START_DATE) {\n                modifiers = this.addModifierToRange(modifiers, day.clone().add(1, 'days'), day.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n                modifiers = this.addModifier(modifiers, day.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-first-possible-end');\n              }\n            }\n          }\n\n          this.setState({\n            hoverDate: day,\n            dateOffset: nextDateOffset,\n            visibleDays: _objectSpread({}, visibleDays, modifiers)\n          });\n        }\n      }\n\n      return onDayMouseEnter;\n    }()\n  }, {\n    key: \"onDayMouseLeave\",\n    value: function () {\n      function onDayMouseLeave(day) {\n        var _this$props5 = this.props,\n            startDate = _this$props5.startDate,\n            endDate = _this$props5.endDate,\n            focusedInput = _this$props5.focusedInput,\n            getMinNightsForHoverDate = _this$props5.getMinNightsForHoverDate,\n            minimumNights = _this$props5.minimumNights;\n        var _this$state2 = this.state,\n            hoverDate = _this$state2.hoverDate,\n            visibleDays = _this$state2.visibleDays,\n            dateOffset = _this$state2.dateOffset;\n        if (this.isTouchDevice || !hoverDate) return;\n        var modifiers = {};\n        modifiers = this.deleteModifier(modifiers, hoverDate, 'hovered');\n\n        if (dateOffset) {\n          modifiers = this.deleteModifierFromRange(modifiers, dateOffset.start, dateOffset.end, 'hovered-offset');\n        }\n\n        if (startDate && !endDate && (0, _isAfterDay[\"default\"])(hoverDate, startDate)) {\n          var endSpan = hoverDate.clone().add(1, 'day');\n          modifiers = this.deleteModifierFromRange(modifiers, startDate, endSpan, 'hovered-span');\n        }\n\n        if (!startDate && endDate && (0, _isAfterDay[\"default\"])(endDate, hoverDate)) {\n          modifiers = this.deleteModifierFromRange(modifiers, hoverDate, endDate, 'hovered-span');\n        }\n\n        if (startDate && (0, _isSameDay[\"default\"])(day, startDate)) {\n          var startSpan = startDate.clone().add(1, 'day');\n\n          var _endSpan4 = startDate.clone().add(minimumNights + 1, 'days');\n\n          modifiers = this.deleteModifierFromRange(modifiers, startSpan, _endSpan4, 'after-hovered-start');\n        }\n\n        if (!this.isBlocked(hoverDate)) {\n          var minNightsForHoverDate = getMinNightsForHoverDate(hoverDate);\n\n          if (minNightsForHoverDate > 0 && focusedInput === _constants.START_DATE) {\n            modifiers = this.deleteModifierFromRange(modifiers, hoverDate.clone().add(1, 'days'), hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-blocked-minimum-nights');\n            modifiers = this.deleteModifier(modifiers, hoverDate.clone().add(minNightsForHoverDate, 'days'), 'hovered-start-first-possible-end');\n          }\n        }\n\n        this.setState({\n          hoverDate: null,\n          visibleDays: _objectSpread({}, visibleDays, modifiers)\n        });\n      }\n\n      return onDayMouseLeave;\n    }()\n  }, {\n    key: \"onPrevMonthClick\",\n    value: function () {\n      function onPrevMonthClick() {\n        var _this$props6 = this.props,\n            enableOutsideDays = _this$props6.enableOutsideDays,\n            maxDate = _this$props6.maxDate,\n            minDate = _this$props6.minDate,\n            numberOfMonths = _this$props6.numberOfMonths,\n            onPrevMonthClick = _this$props6.onPrevMonthClick;\n        var _this$state3 = this.state,\n            currentMonth = _this$state3.currentMonth,\n            visibleDays = _this$state3.visibleDays;\n        var newVisibleDays = {};\n        Object.keys(visibleDays).sort().slice(0, numberOfMonths + 1).forEach(function (month) {\n          newVisibleDays[month] = visibleDays[month];\n        });\n        var prevMonth = currentMonth.clone().subtract(2, 'months');\n        var prevMonthVisibleDays = (0, _getVisibleDays[\"default\"])(prevMonth, 1, enableOutsideDays, true);\n        var newCurrentMonth = currentMonth.clone().subtract(1, 'month');\n        this.setState({\n          currentMonth: newCurrentMonth,\n          disablePrev: this.shouldDisableMonthNavigation(minDate, newCurrentMonth),\n          disableNext: this.shouldDisableMonthNavigation(maxDate, newCurrentMonth),\n          visibleDays: _objectSpread({}, newVisibleDays, this.getModifiers(prevMonthVisibleDays))\n        }, function () {\n          onPrevMonthClick(newCurrentMonth.clone());\n        });\n      }\n\n      return onPrevMonthClick;\n    }()\n  }, {\n    key: \"onNextMonthClick\",\n    value: function () {\n      function onNextMonthClick() {\n        var _this$props7 = this.props,\n            enableOutsideDays = _this$props7.enableOutsideDays,\n            maxDate = _this$props7.maxDate,\n            minDate = _this$props7.minDate,\n            numberOfMonths = _this$props7.numberOfMonths,\n            onNextMonthClick = _this$props7.onNextMonthClick;\n        var _this$state4 = this.state,\n            currentMonth = _this$state4.currentMonth,\n            visibleDays = _this$state4.visibleDays;\n        var newVisibleDays = {};\n        Object.keys(visibleDays).sort().slice(1).forEach(function (month) {\n          newVisibleDays[month] = visibleDays[month];\n        });\n        var nextMonth = currentMonth.clone().add(numberOfMonths + 1, 'month');\n        var nextMonthVisibleDays = (0, _getVisibleDays[\"default\"])(nextMonth, 1, enableOutsideDays, true);\n        var newCurrentMonth = currentMonth.clone().add(1, 'month');\n        this.setState({\n          currentMonth: newCurrentMonth,\n          disablePrev: this.shouldDisableMonthNavigation(minDate, newCurrentMonth),\n          disableNext: this.shouldDisableMonthNavigation(maxDate, newCurrentMonth),\n          visibleDays: _objectSpread({}, newVisibleDays, this.getModifiers(nextMonthVisibleDays))\n        }, function () {\n          onNextMonthClick(newCurrentMonth.clone());\n        });\n      }\n\n      return onNextMonthClick;\n    }()\n  }, {\n    key: \"onMonthChange\",\n    value: function () {\n      function onMonthChange(newMonth) {\n        var _this$props8 = this.props,\n            numberOfMonths = _this$props8.numberOfMonths,\n            enableOutsideDays = _this$props8.enableOutsideDays,\n            orientation = _this$props8.orientation;\n        var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n        var newVisibleDays = (0, _getVisibleDays[\"default\"])(newMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths);\n        this.setState({\n          currentMonth: newMonth.clone(),\n          visibleDays: this.getModifiers(newVisibleDays)\n        });\n      }\n\n      return onMonthChange;\n    }()\n  }, {\n    key: \"onYearChange\",\n    value: function () {\n      function onYearChange(newMonth) {\n        var _this$props9 = this.props,\n            numberOfMonths = _this$props9.numberOfMonths,\n            enableOutsideDays = _this$props9.enableOutsideDays,\n            orientation = _this$props9.orientation;\n        var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n        var newVisibleDays = (0, _getVisibleDays[\"default\"])(newMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths);\n        this.setState({\n          currentMonth: newMonth.clone(),\n          visibleDays: this.getModifiers(newVisibleDays)\n        });\n      }\n\n      return onYearChange;\n    }()\n  }, {\n    key: \"onMultiplyScrollableMonths\",\n    value: function () {\n      function onMultiplyScrollableMonths() {\n        var _this$props10 = this.props,\n            numberOfMonths = _this$props10.numberOfMonths,\n            enableOutsideDays = _this$props10.enableOutsideDays;\n        var _this$state5 = this.state,\n            currentMonth = _this$state5.currentMonth,\n            visibleDays = _this$state5.visibleDays;\n        var numberOfVisibleMonths = Object.keys(visibleDays).length;\n        var nextMonth = currentMonth.clone().add(numberOfVisibleMonths, 'month');\n        var newVisibleDays = (0, _getVisibleDays[\"default\"])(nextMonth, numberOfMonths, enableOutsideDays, true);\n        this.setState({\n          visibleDays: _objectSpread({}, visibleDays, this.getModifiers(newVisibleDays))\n        });\n      }\n\n      return onMultiplyScrollableMonths;\n    }()\n  }, {\n    key: \"getFirstFocusableDay\",\n    value: function () {\n      function getFirstFocusableDay(newMonth) {\n        var _this3 = this;\n\n        var _this$props11 = this.props,\n            startDate = _this$props11.startDate,\n            endDate = _this$props11.endDate,\n            focusedInput = _this$props11.focusedInput,\n            minimumNights = _this$props11.minimumNights,\n            numberOfMonths = _this$props11.numberOfMonths;\n        var focusedDate = newMonth.clone().startOf('month');\n\n        if (focusedInput === _constants.START_DATE && startDate) {\n          focusedDate = startDate.clone();\n        } else if (focusedInput === _constants.END_DATE && !endDate && startDate) {\n          focusedDate = startDate.clone().add(minimumNights, 'days');\n        } else if (focusedInput === _constants.END_DATE && endDate) {\n          focusedDate = endDate.clone();\n        }\n\n        if (this.isBlocked(focusedDate)) {\n          var days = [];\n          var lastVisibleDay = newMonth.clone().add(numberOfMonths - 1, 'months').endOf('month');\n          var currentDay = focusedDate.clone();\n\n          while (!(0, _isAfterDay[\"default\"])(currentDay, lastVisibleDay)) {\n            currentDay = currentDay.clone().add(1, 'day');\n            days.push(currentDay);\n          }\n\n          var viableDays = days.filter(function (day) {\n            return !_this3.isBlocked(day);\n          });\n\n          if (viableDays.length > 0) {\n            var _viableDays = _slicedToArray(viableDays, 1);\n\n            focusedDate = _viableDays[0];\n          }\n        }\n\n        return focusedDate;\n      }\n\n      return getFirstFocusableDay;\n    }()\n  }, {\n    key: \"getModifiers\",\n    value: function () {\n      function getModifiers(visibleDays) {\n        var _this4 = this;\n\n        var modifiers = {};\n        Object.keys(visibleDays).forEach(function (month) {\n          modifiers[month] = {};\n          visibleDays[month].forEach(function (day) {\n            modifiers[month][(0, _toISODateString[\"default\"])(day)] = _this4.getModifiersForDay(day);\n          });\n        });\n        return modifiers;\n      }\n\n      return getModifiers;\n    }()\n  }, {\n    key: \"getModifiersForDay\",\n    value: function () {\n      function getModifiersForDay(day) {\n        var _this5 = this;\n\n        return new Set(Object.keys(this.modifiers).filter(function (modifier) {\n          return _this5.modifiers[modifier](day);\n        }));\n      }\n\n      return getModifiersForDay;\n    }()\n  }, {\n    key: \"getStateForNewMonth\",\n    value: function () {\n      function getStateForNewMonth(nextProps) {\n        var _this6 = this;\n\n        var initialVisibleMonth = nextProps.initialVisibleMonth,\n            numberOfMonths = nextProps.numberOfMonths,\n            enableOutsideDays = nextProps.enableOutsideDays,\n            orientation = nextProps.orientation,\n            startDate = nextProps.startDate;\n        var initialVisibleMonthThunk = initialVisibleMonth || (startDate ? function () {\n          return startDate;\n        } : function () {\n          return _this6.today;\n        });\n        var currentMonth = initialVisibleMonthThunk();\n        var withoutTransitionMonths = orientation === _constants.VERTICAL_SCROLLABLE;\n        var visibleDays = this.getModifiers((0, _getVisibleDays[\"default\"])(currentMonth, numberOfMonths, enableOutsideDays, withoutTransitionMonths));\n        return {\n          currentMonth: currentMonth,\n          visibleDays: visibleDays\n        };\n      }\n\n      return getStateForNewMonth;\n    }()\n  }, {\n    key: \"shouldDisableMonthNavigation\",\n    value: function () {\n      function shouldDisableMonthNavigation(date, visibleMonth) {\n        if (!date) return false;\n        var _this$props12 = this.props,\n            numberOfMonths = _this$props12.numberOfMonths,\n            enableOutsideDays = _this$props12.enableOutsideDays;\n        return (0, _isDayVisible[\"default\"])(date, visibleMonth, numberOfMonths, enableOutsideDays);\n      }\n\n      return shouldDisableMonthNavigation;\n    }()\n  }, {\n    key: \"addModifier\",\n    value: function () {\n      function addModifier(updatedDays, day, modifier) {\n        var _this$props13 = this.props,\n            numberOfVisibleMonths = _this$props13.numberOfMonths,\n            enableOutsideDays = _this$props13.enableOutsideDays,\n            orientation = _this$props13.orientation;\n        var _this$state6 = this.state,\n            firstVisibleMonth = _this$state6.currentMonth,\n            visibleDays = _this$state6.visibleDays;\n        var currentMonth = firstVisibleMonth;\n        var numberOfMonths = numberOfVisibleMonths;\n\n        if (orientation === _constants.VERTICAL_SCROLLABLE) {\n          numberOfMonths = Object.keys(visibleDays).length;\n        } else {\n          currentMonth = currentMonth.clone().subtract(1, 'month');\n          numberOfMonths += 2;\n        }\n\n        if (!day || !(0, _isDayVisible[\"default\"])(day, currentMonth, numberOfMonths, enableOutsideDays)) {\n          return updatedDays;\n        }\n\n        var iso = (0, _toISODateString[\"default\"])(day);\n\n        var updatedDaysAfterAddition = _objectSpread({}, updatedDays);\n\n        if (enableOutsideDays) {\n          var monthsToUpdate = Object.keys(visibleDays).filter(function (monthKey) {\n            return Object.keys(visibleDays[monthKey]).indexOf(iso) > -1;\n          });\n          updatedDaysAfterAddition = monthsToUpdate.reduce(function (days, monthIso) {\n            var month = updatedDays[monthIso] || visibleDays[monthIso];\n            var modifiers = new Set(month[iso]);\n            modifiers.add(modifier);\n            return _objectSpread({}, days, _defineProperty({}, monthIso, _objectSpread({}, month, _defineProperty({}, iso, modifiers))));\n          }, updatedDaysAfterAddition);\n        } else {\n          var monthIso = (0, _toISOMonthString[\"default\"])(day);\n          var month = updatedDays[monthIso] || visibleDays[monthIso];\n          var modifiers = new Set(month[iso]);\n          modifiers.add(modifier);\n          updatedDaysAfterAddition = _objectSpread({}, updatedDaysAfterAddition, _defineProperty({}, monthIso, _objectSpread({}, month, _defineProperty({}, iso, modifiers))));\n        }\n\n        return updatedDaysAfterAddition;\n      }\n\n      return addModifier;\n    }()\n  }, {\n    key: \"addModifierToRange\",\n    value: function () {\n      function addModifierToRange(updatedDays, start, end, modifier) {\n        var days = updatedDays;\n        var spanStart = start.clone();\n\n        while ((0, _isBeforeDay[\"default\"])(spanStart, end)) {\n          days = this.addModifier(days, spanStart, modifier);\n          spanStart = spanStart.clone().add(1, 'day');\n        }\n\n        return days;\n      }\n\n      return addModifierToRange;\n    }()\n  }, {\n    key: \"deleteModifier\",\n    value: function () {\n      function deleteModifier(updatedDays, day, modifier) {\n        var _this$props14 = this.props,\n            numberOfVisibleMonths = _this$props14.numberOfMonths,\n            enableOutsideDays = _this$props14.enableOutsideDays,\n            orientation = _this$props14.orientation;\n        var _this$state7 = this.state,\n            firstVisibleMonth = _this$state7.currentMonth,\n            visibleDays = _this$state7.visibleDays;\n        var currentMonth = firstVisibleMonth;\n        var numberOfMonths = numberOfVisibleMonths;\n\n        if (orientation === _constants.VERTICAL_SCROLLABLE) {\n          numberOfMonths = Object.keys(visibleDays).length;\n        } else {\n          currentMonth = currentMonth.clone().subtract(1, 'month');\n          numberOfMonths += 2;\n        }\n\n        if (!day || !(0, _isDayVisible[\"default\"])(day, currentMonth, numberOfMonths, enableOutsideDays)) {\n          return updatedDays;\n        }\n\n        var iso = (0, _toISODateString[\"default\"])(day);\n\n        var updatedDaysAfterDeletion = _objectSpread({}, updatedDays);\n\n        if (enableOutsideDays) {\n          var monthsToUpdate = Object.keys(visibleDays).filter(function (monthKey) {\n            return Object.keys(visibleDays[monthKey]).indexOf(iso) > -1;\n          });\n          updatedDaysAfterDeletion = monthsToUpdate.reduce(function (days, monthIso) {\n            var month = updatedDays[monthIso] || visibleDays[monthIso];\n            var modifiers = new Set(month[iso]);\n            modifiers[\"delete\"](modifier);\n            return _objectSpread({}, days, _defineProperty({}, monthIso, _objectSpread({}, month, _defineProperty({}, iso, modifiers))));\n          }, updatedDaysAfterDeletion);\n        } else {\n          var monthIso = (0, _toISOMonthString[\"default\"])(day);\n          var month = updatedDays[monthIso] || visibleDays[monthIso];\n          var modifiers = new Set(month[iso]);\n          modifiers[\"delete\"](modifier);\n          updatedDaysAfterDeletion = _objectSpread({}, updatedDaysAfterDeletion, _defineProperty({}, monthIso, _objectSpread({}, month, _defineProperty({}, iso, modifiers))));\n        }\n\n        return updatedDaysAfterDeletion;\n      }\n\n      return deleteModifier;\n    }()\n  }, {\n    key: \"deleteModifierFromRange\",\n    value: function () {\n      function deleteModifierFromRange(updatedDays, start, end, modifier) {\n        var days = updatedDays;\n        var spanStart = start.clone();\n\n        while ((0, _isBeforeDay[\"default\"])(spanStart, end)) {\n          days = this.deleteModifier(days, spanStart, modifier);\n          spanStart = spanStart.clone().add(1, 'day');\n        }\n\n        return days;\n      }\n\n      return deleteModifierFromRange;\n    }()\n  }, {\n    key: \"doesNotMeetMinimumNights\",\n    value: function () {\n      function doesNotMeetMinimumNights(day) {\n        var _this$props15 = this.props,\n            startDate = _this$props15.startDate,\n            isOutsideRange = _this$props15.isOutsideRange,\n            focusedInput = _this$props15.focusedInput,\n            minimumNights = _this$props15.minimumNights;\n        if (focusedInput !== _constants.END_DATE) return false;\n\n        if (startDate) {\n          var dayDiff = day.diff(startDate.clone().startOf('day').hour(12), 'days');\n          return dayDiff < minimumNights && dayDiff >= 0;\n        }\n\n        return isOutsideRange((0, _moment[\"default\"])(day).subtract(minimumNights, 'days'));\n      }\n\n      return doesNotMeetMinimumNights;\n    }()\n  }, {\n    key: \"doesNotMeetMinNightsForHoveredStartDate\",\n    value: function () {\n      function doesNotMeetMinNightsForHoveredStartDate(day, hoverDate) {\n        var _this$props16 = this.props,\n            focusedInput = _this$props16.focusedInput,\n            getMinNightsForHoverDate = _this$props16.getMinNightsForHoverDate;\n        if (focusedInput !== _constants.END_DATE) return false;\n\n        if (hoverDate && !this.isBlocked(hoverDate)) {\n          var minNights = getMinNightsForHoverDate(hoverDate);\n          var dayDiff = day.diff(hoverDate.clone().startOf('day').hour(12), 'days');\n          return dayDiff < minNights && dayDiff >= 0;\n        }\n\n        return false;\n      }\n\n      return doesNotMeetMinNightsForHoveredStartDate;\n    }()\n  }, {\n    key: \"isDayAfterHoveredStartDate\",\n    value: function () {\n      function isDayAfterHoveredStartDate(day) {\n        var _this$props17 = this.props,\n            startDate = _this$props17.startDate,\n            endDate = _this$props17.endDate,\n            minimumNights = _this$props17.minimumNights;\n\n        var _ref2 = this.state || {},\n            hoverDate = _ref2.hoverDate;\n\n        return !!startDate && !endDate && !this.isBlocked(day) && (0, _isNextDay[\"default\"])(hoverDate, day) && minimumNights > 0 && (0, _isSameDay[\"default\"])(hoverDate, startDate);\n      }\n\n      return isDayAfterHoveredStartDate;\n    }()\n  }, {\n    key: \"isEndDate\",\n    value: function () {\n      function isEndDate(day) {\n        var endDate = this.props.endDate;\n        return (0, _isSameDay[\"default\"])(day, endDate);\n      }\n\n      return isEndDate;\n    }()\n  }, {\n    key: \"isHovered\",\n    value: function () {\n      function isHovered(day) {\n        var _ref3 = this.state || {},\n            hoverDate = _ref3.hoverDate;\n\n        var focusedInput = this.props.focusedInput;\n        return !!focusedInput && (0, _isSameDay[\"default\"])(day, hoverDate);\n      }\n\n      return isHovered;\n    }()\n  }, {\n    key: \"isInHoveredSpan\",\n    value: function () {\n      function isInHoveredSpan(day) {\n        var _this$props18 = this.props,\n            startDate = _this$props18.startDate,\n            endDate = _this$props18.endDate;\n\n        var _ref4 = this.state || {},\n            hoverDate = _ref4.hoverDate;\n\n        var isForwardRange = !!startDate && !endDate && (day.isBetween(startDate, hoverDate) || (0, _isSameDay[\"default\"])(hoverDate, day));\n        var isBackwardRange = !!endDate && !startDate && (day.isBetween(hoverDate, endDate) || (0, _isSameDay[\"default\"])(hoverDate, day));\n        var isValidDayHovered = hoverDate && !this.isBlocked(hoverDate);\n        return (isForwardRange || isBackwardRange) && isValidDayHovered;\n      }\n\n      return isInHoveredSpan;\n    }()\n  }, {\n    key: \"isInSelectedSpan\",\n    value: function () {\n      function isInSelectedSpan(day) {\n        var _this$props19 = this.props,\n            startDate = _this$props19.startDate,\n            endDate = _this$props19.endDate;\n        return day.isBetween(startDate, endDate);\n      }\n\n      return isInSelectedSpan;\n    }()\n  }, {\n    key: \"isLastInRange\",\n    value: function () {\n      function isLastInRange(day) {\n        var endDate = this.props.endDate;\n        return this.isInSelectedSpan(day) && (0, _isNextDay[\"default\"])(day, endDate);\n      }\n\n      return isLastInRange;\n    }()\n  }, {\n    key: \"isStartDate\",\n    value: function () {\n      function isStartDate(day) {\n        var startDate = this.props.startDate;\n        return (0, _isSameDay[\"default\"])(day, startDate);\n      }\n\n      return isStartDate;\n    }()\n  }, {\n    key: \"isBlocked\",\n    value: function () {\n      function isBlocked(day) {\n        var _this$props20 = this.props,\n            isDayBlocked = _this$props20.isDayBlocked,\n            isOutsideRange = _this$props20.isOutsideRange;\n        return isDayBlocked(day) || isOutsideRange(day) || this.doesNotMeetMinimumNights(day);\n      }\n\n      return isBlocked;\n    }()\n  }, {\n    key: \"isToday\",\n    value: function () {\n      function isToday(day) {\n        return (0, _isSameDay[\"default\"])(day, this.today);\n      }\n\n      return isToday;\n    }()\n  }, {\n    key: \"isFirstDayOfWeek\",\n    value: function () {\n      function isFirstDayOfWeek(day) {\n        var firstDayOfWeek = this.props.firstDayOfWeek;\n        return day.day() === (firstDayOfWeek || _moment[\"default\"].localeData().firstDayOfWeek());\n      }\n\n      return isFirstDayOfWeek;\n    }()\n  }, {\n    key: \"isLastDayOfWeek\",\n    value: function () {\n      function isLastDayOfWeek(day) {\n        var firstDayOfWeek = this.props.firstDayOfWeek;\n        return day.day() === ((firstDayOfWeek || _moment[\"default\"].localeData().firstDayOfWeek()) + 6) % 7;\n      }\n\n      return isLastDayOfWeek;\n    }()\n  }, {\n    key: \"isFirstPossibleEndDateForHoveredStartDate\",\n    value: function () {\n      function isFirstPossibleEndDateForHoveredStartDate(day, hoverDate) {\n        var _this$props21 = this.props,\n            focusedInput = _this$props21.focusedInput,\n            getMinNightsForHoverDate = _this$props21.getMinNightsForHoverDate;\n        if (focusedInput !== _constants.END_DATE || !hoverDate || this.isBlocked(hoverDate)) return false;\n        var minNights = getMinNightsForHoverDate(hoverDate);\n        var firstAvailableEndDate = hoverDate.clone().add(minNights, 'days');\n        return (0, _isSameDay[\"default\"])(day, firstAvailableEndDate);\n      }\n\n      return isFirstPossibleEndDateForHoveredStartDate;\n    }()\n  }, {\n    key: \"render\",\n    value: function () {\n      function render() {\n        var _this$props22 = this.props,\n            numberOfMonths = _this$props22.numberOfMonths,\n            orientation = _this$props22.orientation,\n            monthFormat = _this$props22.monthFormat,\n            renderMonthText = _this$props22.renderMonthText,\n            navPrev = _this$props22.navPrev,\n            navNext = _this$props22.navNext,\n            noNavButtons = _this$props22.noNavButtons,\n            onOutsideClick = _this$props22.onOutsideClick,\n            withPortal = _this$props22.withPortal,\n            enableOutsideDays = _this$props22.enableOutsideDays,\n            firstDayOfWeek = _this$props22.firstDayOfWeek,\n            renderKeyboardShortcutsButton = _this$props22.renderKeyboardShortcutsButton,\n            hideKeyboardShortcutsPanel = _this$props22.hideKeyboardShortcutsPanel,\n            daySize = _this$props22.daySize,\n            focusedInput = _this$props22.focusedInput,\n            renderCalendarDay = _this$props22.renderCalendarDay,\n            renderDayContents = _this$props22.renderDayContents,\n            renderCalendarInfo = _this$props22.renderCalendarInfo,\n            renderMonthElement = _this$props22.renderMonthElement,\n            calendarInfoPosition = _this$props22.calendarInfoPosition,\n            onBlur = _this$props22.onBlur,\n            onShiftTab = _this$props22.onShiftTab,\n            onTab = _this$props22.onTab,\n            isFocused = _this$props22.isFocused,\n            showKeyboardShortcuts = _this$props22.showKeyboardShortcuts,\n            isRTL = _this$props22.isRTL,\n            weekDayFormat = _this$props22.weekDayFormat,\n            dayAriaLabelFormat = _this$props22.dayAriaLabelFormat,\n            verticalHeight = _this$props22.verticalHeight,\n            noBorder = _this$props22.noBorder,\n            transitionDuration = _this$props22.transitionDuration,\n            verticalBorderSpacing = _this$props22.verticalBorderSpacing,\n            horizontalMonthPadding = _this$props22.horizontalMonthPadding;\n        var _this$state8 = this.state,\n            currentMonth = _this$state8.currentMonth,\n            phrases = _this$state8.phrases,\n            visibleDays = _this$state8.visibleDays,\n            disablePrev = _this$state8.disablePrev,\n            disableNext = _this$state8.disableNext;\n        return _react[\"default\"].createElement(_DayPicker[\"default\"], {\n          orientation: orientation,\n          enableOutsideDays: enableOutsideDays,\n          modifiers: visibleDays,\n          numberOfMonths: numberOfMonths,\n          onDayClick: this.onDayClick,\n          onDayMouseEnter: this.onDayMouseEnter,\n          onDayMouseLeave: this.onDayMouseLeave,\n          onPrevMonthClick: this.onPrevMonthClick,\n          onNextMonthClick: this.onNextMonthClick,\n          onMonthChange: this.onMonthChange,\n          onTab: onTab,\n          onShiftTab: onShiftTab,\n          onYearChange: this.onYearChange,\n          onMultiplyScrollableMonths: this.onMultiplyScrollableMonths,\n          monthFormat: monthFormat,\n          renderMonthText: renderMonthText,\n          withPortal: withPortal,\n          hidden: !focusedInput,\n          initialVisibleMonth: function () {\n            function initialVisibleMonth() {\n              return currentMonth;\n            }\n\n            return initialVisibleMonth;\n          }(),\n          daySize: daySize,\n          onOutsideClick: onOutsideClick,\n          disablePrev: disablePrev,\n          disableNext: disableNext,\n          navPrev: navPrev,\n          navNext: navNext,\n          noNavButtons: noNavButtons,\n          renderCalendarDay: renderCalendarDay,\n          renderDayContents: renderDayContents,\n          renderCalendarInfo: renderCalendarInfo,\n          renderMonthElement: renderMonthElement,\n          renderKeyboardShortcutsButton: renderKeyboardShortcutsButton,\n          calendarInfoPosition: calendarInfoPosition,\n          firstDayOfWeek: firstDayOfWeek,\n          hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,\n          isFocused: isFocused,\n          getFirstFocusableDay: this.getFirstFocusableDay,\n          onBlur: onBlur,\n          showKeyboardShortcuts: showKeyboardShortcuts,\n          phrases: phrases,\n          isRTL: isRTL,\n          weekDayFormat: weekDayFormat,\n          dayAriaLabelFormat: dayAriaLabelFormat,\n          verticalHeight: verticalHeight,\n          verticalBorderSpacing: verticalBorderSpacing,\n          noBorder: noBorder,\n          transitionDuration: transitionDuration,\n          horizontalMonthPadding: horizontalMonthPadding\n        });\n      }\n\n      return render;\n    }()\n  }]);\n\n  return DayPickerRangeController;\n}(_react[\"default\"].PureComponent || _react[\"default\"].Component);\n\nexports[\"default\"] = DayPickerRangeController;\nDayPickerRangeController.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nDayPickerRangeController.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"script"}