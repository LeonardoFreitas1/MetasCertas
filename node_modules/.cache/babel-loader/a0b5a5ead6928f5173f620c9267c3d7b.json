{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.normalizeError = normalizeError;\nexports.loginCallback = loginCallback;\nexports.normalizeAuthParams = normalizeAuthParams;\nexports.webAuthOverrides = webAuthOverrides;\nexports.trimAuthParams = trimAuthParams;\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction normalizeError(error, domain) {\n  if (!error) {\n    return error;\n  } // TODO: clean this mess, the first checks are for social/popup,\n  // then we have some stuff for passwordless and the latter is for\n  // db.\n  // TODO: the following checks were copied from https://github.com/auth0/lock/blob/0a5abf1957c9bb746b0710b274d0feed9b399958/index.js#L1263-L1288\n  // Some of the checks are missing because I couldn't reproduce them and I'm\n  // affraid they'll break existent functionality if add them.\n  // We need a better errror handling story in auth0.js.\n\n\n  if (error.status === 'User closed the popup window') {\n    // {\n    //   status: \"User closed the popup window\",\n    //   name: undefined,\n    //   code: undefined,\n    //   details: {\n    //     description: \"server error\",\n    //     code: undefined\n    //   }\n    // }\n    return {\n      code: 'lock.popup_closed',\n      error: 'lock.popup_closed',\n      description: 'Popup window closed.'\n    };\n  }\n\n  if (error.code === 'unauthorized') {\n    // Custom rule error\n    //\n    // {\n    //   \"code\": \"unauthorized\",\n    //   \"details\": {\n    //     \"code\": \"unauthorized\",\n    //     \"error_description\": \"user is blocked\",\n    //     \"error\": \"unauthorized\"\n    //   },\n    //   \"name\": \"unauthorized\",\n    //   \"status\": 401\n    // }\n    // Default \"user is blocked\" rule error\n    //\n    // {\n    //   \"code\": \"unauthorized\",\n    //   \"details\": {\n    //     \"code\": \"unauthorized\",\n    //     \"error_description\": \"user is blocked\",\n    //     \"error\": \"unauthorized\"\n    //   },\n    //   \"name\": \"unauthorized\",\n    //   \"status\": 401\n    // }\n    // Social cancel permissions.\n    //\n    // {\n    //   code: \"unauthorized\",\n    //   details: {\n    //     code: \"unauthorized\"\n    //     error: \"unauthorized\"\n    //     error_description: \"access_denied\"\n    //   },\n    //   name: \"unauthorized\"\n    //   status: 401\n    // }\n    // Social cancel permissions or unknown error\n    if (!error.description || error.description === 'access_denied') {\n      return {\n        code: 'lock.unauthorized',\n        error: 'lock.unauthorized',\n        description: error.description || 'Permissions were not granted.'\n      };\n    } // Special case for custom rule error\n\n\n    if (error.description === 'user is blocked') {\n      return {\n        code: 'blocked_user',\n        error: 'blocked_user',\n        description: error.description\n      };\n    } // Custom Rule error\n\n\n    return {\n      code: 'rule_error',\n      error: 'rule_error',\n      description: error.description\n    };\n  }\n\n  if (window.location.host !== domain && (error.error === 'access_denied' || error.code === 'access_denied')) {\n    return {\n      code: 'invalid_user_password',\n      error: 'invalid_user_password',\n      description: error.description\n    };\n  }\n\n  var result = {\n    error: error.code ? error.code : error.statusCode || error.error,\n    description: error.description || error.code\n  }; // result is used for passwordless and error for database.\n\n  return result.error === undefined && result.description === undefined ? error : result;\n}\n\nfunction loginCallback(redirect, domain, cb) {\n  return redirect ? function (error) {\n    return cb(normalizeError(error, domain));\n  } : function (error, result) {\n    return cb(normalizeError(error, domain), result);\n  };\n}\n\nfunction normalizeAuthParams(_ref) {\n  var popup = _ref.popup,\n      authParams = _objectWithoutProperties(_ref, ['popup']);\n\n  return authParams;\n}\n\nfunction webAuthOverrides() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      __tenant = _ref2.__tenant,\n      __token_issuer = _ref2.__token_issuer,\n      __jwks_uri = _ref2.__jwks_uri;\n\n  if (__tenant || __token_issuer || __jwks_uri) {\n    return {\n      __tenant: __tenant,\n      __token_issuer: __token_issuer,\n      __jwks_uri: __jwks_uri\n    };\n  }\n\n  return null;\n}\n\nfunction trimAuthParams() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var p = _objectWithoutProperties(params, []);\n\n  ['username', 'email', 'phoneNumber', 'mfa_code'].forEach(function (k) {\n    if (typeof p[k] === 'string') {\n      p[k] = p[k].trim();\n    }\n  });\n  return p;\n}","map":null,"metadata":{},"sourceType":"script"}