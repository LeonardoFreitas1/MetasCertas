{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes2 = require(\"../../utils/propTypes\");\n\nvar _accessors = require(\"../../utils/accessors\");\n\nvar EventWrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(EventWrapper, _React$Component);\n\n  function EventWrapper() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleResizeUp = function (e) {\n      if (e.button !== 0) return;\n      e.stopPropagation();\n\n      _this.context.draggable.onBeginAction(_this.props.event, 'resize', 'UP');\n    };\n\n    _this.handleResizeDown = function (e) {\n      if (e.button !== 0) return;\n      e.stopPropagation();\n\n      _this.context.draggable.onBeginAction(_this.props.event, 'resize', 'DOWN');\n    };\n\n    _this.handleResizeLeft = function (e) {\n      if (e.button !== 0) return;\n      e.stopPropagation();\n\n      _this.context.draggable.onBeginAction(_this.props.event, 'resize', 'LEFT');\n    };\n\n    _this.handleResizeRight = function (e) {\n      if (e.button !== 0) return;\n      e.stopPropagation();\n\n      _this.context.draggable.onBeginAction(_this.props.event, 'resize', 'RIGHT');\n    };\n\n    _this.handleStartDragging = function (e) {\n      if (e.button === 0) {\n        _this.context.draggable.onBeginAction(_this.props.event, 'move');\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = EventWrapper.prototype;\n\n  _proto.renderAnchor = function renderAnchor(direction) {\n    var cls = direction === 'Up' || direction === 'Down' ? 'ns' : 'ew';\n    return _react.default.createElement(\"div\", {\n      className: \"rbc-addons-dnd-resize-\" + cls + \"-anchor\",\n      onMouseDown: this[\"handleResize\" + direction]\n    }, _react.default.createElement(\"div\", {\n      className: \"rbc-addons-dnd-resize-\" + cls + \"-icon\"\n    }));\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        event = _this$props.event,\n        type = _this$props.type,\n        continuesPrior = _this$props.continuesPrior,\n        continuesAfter = _this$props.continuesAfter;\n    var children = this.props.children;\n    if (event.__isPreview) return _react.default.cloneElement(children, {\n      className: (0, _classnames.default)(children.props.className, 'rbc-addons-dnd-drag-preview')\n    });\n    var draggable = this.context.draggable;\n    var draggableAccessor = draggable.draggableAccessor,\n        resizableAccessor = draggable.resizableAccessor;\n    var isDraggable = draggableAccessor ? !!(0, _accessors.accessor)(event, draggableAccessor) : true;\n    /* Event is not draggable, no need to wrap it */\n\n    if (!isDraggable) {\n      return children;\n    }\n    /*\n    * The resizability of events depends on whether they are\n    * allDay events and how they are displayed.\n    *\n    * 1. If the event is being shown in an event row (because\n    * it is an allDay event shown in the header row or because as\n    * in month view the view is showing all events as rows) then we\n    * allow east-west resizing.\n    *\n    * 2. Otherwise the event is being displayed\n    * normally, we can drag it north-south to resize the times.\n    *\n    * See `DropWrappers` for handling of the drop of such events.\n    *\n    * Notwithstanding the above, we never show drag anchors for\n    * events which continue beyond current component. This happens\n    * in the middle of events when showMultiDay is true, and to\n    * events at the edges of the calendar's min/max location.\n    */\n\n\n    var isResizable = resizableAccessor ? !!(0, _accessors.accessor)(event, resizableAccessor) : true;\n\n    if (isResizable || isDraggable) {\n      /*\n      * props.children is the singular <Event> component.\n      * BigCalendar positions the Event abolutely and we\n      * need the anchors to be part of that positioning.\n      * So we insert the anchors inside the Event's children\n      * rather than wrap the Event here as the latter approach\n      * would lose the positioning.\n      */\n      var newProps = {\n        onMouseDown: this.handleStartDragging,\n        onTouchStart: this.handleStartDragging\n      };\n\n      if (isResizable) {\n        // replace original event child with anchor-embellished child\n        var StartAnchor = null;\n        var EndAnchor = null;\n\n        if (type === 'date') {\n          StartAnchor = !continuesPrior && this.renderAnchor('Left');\n          EndAnchor = !continuesAfter && this.renderAnchor('Right');\n        } else {\n          StartAnchor = !continuesPrior && this.renderAnchor('Up');\n          EndAnchor = !continuesAfter && this.renderAnchor('Down');\n        }\n\n        newProps.children = _react.default.createElement(\"div\", {\n          className: \"rbc-addons-dnd-resizable\"\n        }, StartAnchor, children.props.children, EndAnchor);\n      }\n\n      if (draggable.dragAndDropAction.interacting && // if an event is being dragged right now\n      draggable.dragAndDropAction.event === event // and it's the current event\n      ) {\n          // add a new class to it\n          newProps.className = (0, _classnames.default)(children.props.className, 'rbc-addons-dnd-dragged-event');\n        }\n\n      children = _react.default.cloneElement(children, newProps);\n    }\n\n    return children;\n  };\n\n  return EventWrapper;\n}(_react.default.Component);\n\nEventWrapper.contextTypes = {\n  draggable: _propTypes.default.shape({\n    onStart: _propTypes.default.func,\n    onEnd: _propTypes.default.func,\n    onBeginAction: _propTypes.default.func,\n    draggableAccessor: _propTypes2.accessor,\n    resizableAccessor: _propTypes2.accessor,\n    dragAndDropAction: _propTypes.default.object\n  })\n};\nEventWrapper.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  type: _propTypes.default.oneOf(['date', 'time']),\n  event: _propTypes.default.object.isRequired,\n  draggable: _propTypes.default.bool,\n  allDay: _propTypes.default.bool,\n  isRow: _propTypes.default.bool,\n  continuesPrior: _propTypes.default.bool,\n  continuesAfter: _propTypes.default.bool,\n  isDragging: _propTypes.default.bool,\n  isResizing: _propTypes.default.bool\n} : {};\nvar _default = EventWrapper;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}