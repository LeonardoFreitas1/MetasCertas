{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.palette = exports.size = exports.font = exports.key = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _styledTools = require('styled-tools');\n\nvar _theme = require('./theme');\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Returns the value of `props.theme[path]` or `styledTheme[path]`\n * @example\n * const Button = styled.button`\n *  font-family: ${key('fonts.primary')};\n *  color: ${key(['colors', 'primary', 0])};\n * `\n */\n\n\nvar key = exports.key = function key(path, defaultValue) {\n  return function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return (0, _styledTools.prop)(path, (0, _styledTools.prop)(path, defaultValue)(_theme2.default))(props.theme);\n  };\n};\n/**\n * Shorthand to `key(['fonts', path])`\n * @example\n * const Button = styled.button`\n *  font-family: ${font('primary')};\n * `\n */\n\n\nvar font = exports.font = function font(path, defaultValue) {\n  return key(['fonts', path], defaultValue);\n};\n/**\n * Shorthand to `key(['sizes', path])`\n * @example\n * const Button = styled.button`\n *  padding: ${size('padding')};\n * `\n */\n\n\nvar size = exports.size = function size(path, defaultValue) {\n  return key(['sizes', path], defaultValue);\n};\n/**\n * Returns the value of `props.theme[palette || reversePalette][path][index]` or\n * `styledTheme[palette || reversePalette][path][index]` (default theme)\n *\n * The arguments can be passed in any order, as long as types are kept.\n * @param {number} index The index of tone in theme palette tones array\n * @param {string} [path=props.palette] The key of the tones in theme palette object\n * @param {Object} [exceptions] An object with path as key and index as value\n * @param {boolean} [reverse] Flag to return tone from `reversePalette` or `palette`\n * @param {string} [defaultValue] Default value\n * @example\n * // index = 1\n * // exception = { grayscale: 0 }\n * // reverse = true\n * const Button = styled.button`\n *  background-color: ${palette({ grayscale: 0 }, 1, true)};\n * `\n *\n * // renders props.theme.reversePalette.grayscale[0]\n * <Button palette=\"grayscale\" />\n *\n * // renders props.theme.palette.danger[1] (nullify reverse)\n * <Button palette=\"danger\" reverse />\n * @returns {Tones}\n */\n// eslint-disable-next-line flowtype-errors/show-errors\n\n\nvar palette = exports.palette = function palette() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return function () {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var exceptions = args.find(function (arg) {\n      return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object';\n    }) || {};\n    var path = args.find(function (arg) {\n      return typeof arg === 'string';\n    }) || props.palette;\n    var defaultValue = [].concat(args).reverse().find(function (arg) {\n      return typeof arg === 'string';\n    });\n    var index = args.find(function (arg) {\n      return typeof arg === 'number';\n    });\n    var reverse = args.find(function (arg) {\n      return typeof arg === 'boolean';\n    });\n    reverse = reverse ? !props.reverse : props.reverse;\n\n    if (typeof index === 'undefined') {\n      throw new Error('[palette] You must pass index');\n    }\n\n    if (typeof path === 'undefined') {\n      throw new Error('[palette] You must pass palette path');\n    }\n\n    if (Object.keys(exceptions).indexOf(path) >= 0) {\n      index = exceptions[path];\n    }\n\n    var palettePath = reverse ? 'reversePalette' : 'palette';\n    return key([palettePath, path, index], defaultValue !== path && defaultValue)(props);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}