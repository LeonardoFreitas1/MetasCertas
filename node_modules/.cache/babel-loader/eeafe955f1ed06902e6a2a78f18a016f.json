{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.initTenant = initTenant;\nexports.tenantConnections = tenantConnections;\nexports.defaultDirectory = defaultDirectory;\nexports.defaultDirectoryName = defaultDirectoryName;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _data_utils = require('../../utils/data_utils');\n\nvar _index = require('../index');\n\nvar l = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _dataFns = (0, _data_utils.dataFns)(['client']),\n    initNS = _dataFns.initNS,\n    get = _dataFns.get;\n\nvar DEFAULT_CONNECTION_VALIDATION = {\n  username: {\n    min: 1,\n    max: 15\n  }\n};\n\nfunction formatConnectionValidation() {\n  var connectionValidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (connectionValidation.username == null) {\n    return null;\n  }\n\n  var validation = _extends({}, DEFAULT_CONNECTION_VALIDATION, connectionValidation);\n\n  var defaultMin = DEFAULT_CONNECTION_VALIDATION.username.min;\n  var defaultMax = DEFAULT_CONNECTION_VALIDATION.username.max;\n  validation.username.min = parseInt(validation.username.min, 10) || defaultMin;\n  validation.username.max = parseInt(validation.username.max, 10) || defaultMax;\n\n  if (validation.username.min > validation.username.max) {\n    validation.username.min = defaultMin;\n    validation.username.max = defaultMax;\n  }\n\n  return validation;\n}\n\nvar emptyConnections = _immutable2.default.fromJS({\n  database: [],\n  enterprise: [],\n  passwordless: [],\n  social: [],\n  unknown: [] // TODO: should be oauth2\n\n});\n\nfunction initTenant(m, client_id, client) {\n  return initNS(m, formatTenant(client_id, client));\n}\n\nfunction formatTenant(client_id, o) {\n  return new _immutable2.default.fromJS({\n    connections: formatTenantConnections(client_id, o),\n    defaultDirectory: o.defaultDirectory || null\n  });\n}\n\nfunction formatTenantConnections(client_id, o) {\n  var result = emptyConnections.toJS();\n  var connectionTypes = Object.keys(o.connections).filter(function (name) {\n    return name != 'passwordless';\n  }); // disabled until lock supports passwordless connections within the same engine\n\n  var connections_filter = null;\n\n  if (o.clientsConnections && o.clientsConnections[client_id]) {\n    connections_filter = o.clientsConnections[client_id];\n  }\n\n  connectionTypes.forEach(function (connectionTypeName) {\n    var _result$connectionTyp;\n\n    var connections = o.connections[connectionTypeName].map(function (connection) {\n      return formatTenantConnection(connectionTypeName, connection);\n    }).filter(function (connection) {\n      return connections_filter === null || connections_filter.includes(connection.name);\n    });\n\n    (_result$connectionTyp = result[connectionTypeName]).push.apply(_result$connectionTyp, connections);\n  });\n  return result;\n}\n\nfunction formatTenantConnection(connectionType, connection) {\n  var result = {\n    name: connection.name,\n    strategy: connection.strategy,\n    type: connectionType\n  };\n\n  if (connectionType === 'database') {\n    if (connection.validation && connection.validation.passwordPolicy) {\n      result.passwordPolicy = connection.validation.passwordPolicy;\n    }\n\n    result.passwordPolicy = result.passwordPolicy || 'none';\n    result.allowSignup = typeof connection.allowSignup === 'boolean' ? connection.allowSignup : true;\n    result.allowForgot = typeof connection.allowForgot === 'boolean' ? connection.allowForgot : true;\n    result.requireUsername = typeof connection.requiresUsername === 'boolean' ? connection.requiresUsername : false;\n    result.validation = formatConnectionValidation(connection.validation);\n  }\n\n  if (connectionType === 'enterprise') {\n    result.domains = connection.domains;\n  }\n\n  return result;\n}\n\nfunction tenantConnections(m) {\n  return get(m, 'connections', emptyConnections);\n}\n\nfunction defaultDirectory(m) {\n  var name = defaultDirectoryName(m);\n  return name && l.findConnection(m, name);\n}\n\nfunction defaultDirectoryName(m) {\n  return get(m, 'defaultDirectory', null);\n}","map":null,"metadata":{},"sourceType":"script"}