{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.isSSOEnabled = isSSOEnabled;\nexports.matchesEnterpriseConnection = matchesEnterpriseConnection;\nexports.usernameStyle = usernameStyle;\nexports.hasOnlyClassicConnections = hasOnlyClassicConnections;\nexports.useBigSocialButtons = useBigSocialButtons;\n\nvar _index = require('../index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _login = require('./classic/login');\n\nvar _login2 = _interopRequireDefault(_login);\n\nvar _sign_up_screen = require('./classic/sign_up_screen');\n\nvar _sign_up_screen2 = _interopRequireDefault(_sign_up_screen);\n\nvar _mfa_login_screen = require('./classic/mfa_login_screen');\n\nvar _mfa_login_screen2 = _interopRequireDefault(_mfa_login_screen);\n\nvar _reset_password = require('../connection/database/reset_password');\n\nvar _reset_password2 = _interopRequireDefault(_reset_password);\n\nvar _index3 = require('../core/sso/index');\n\nvar sso = _interopRequireWildcard(_index3);\n\nvar _index4 = require('../connection/database/index');\n\nvar _enterprise = require('../connection/enterprise');\n\nvar _tenant = require('../core/tenant');\n\nvar _index5 = require('../connection/social/index');\n\nvar _email = require('../field/email');\n\nvar _username = require('../field/username');\n\nvar _index6 = require('../core/index');\n\nvar l = _interopRequireWildcard(_index6);\n\nvar _kerberos_screen = require('../connection/enterprise/kerberos_screen');\n\nvar _kerberos_screen2 = _interopRequireDefault(_kerberos_screen);\n\nvar _hrd_screen = require('../connection/enterprise/hrd_screen');\n\nvar _hrd_screen2 = _interopRequireDefault(_hrd_screen);\n\nvar _quick_auth_screen = require('../connection/enterprise/quick_auth_screen');\n\nvar _quick_auth_screen2 = _interopRequireDefault(_quick_auth_screen);\n\nvar _quick_auth = require('../quick_auth');\n\nvar _loading_screen = require('../core/loading_screen');\n\nvar _loading_screen2 = _interopRequireDefault(_loading_screen);\n\nvar _error_screen = require('../core/error_screen');\n\nvar _error_screen2 = _interopRequireDefault(_error_screen);\n\nvar _last_login_screen = require('../core/sso/last_login_screen');\n\nvar _last_login_screen2 = _interopRequireDefault(_last_login_screen);\n\nvar _sync = require('../sync');\n\nvar _index7 = require('../field/index');\n\nvar _index8 = require('../store/index');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction isSSOEnabled(m, options) {\n  return matchesEnterpriseConnection(m, (0, _index4.databaseUsernameValue)(m, options));\n}\n\nfunction matchesEnterpriseConnection(m, usernameValue) {\n  return (0, _enterprise.isEnterpriseDomain)(m, usernameValue);\n}\n\nfunction usernameStyle(m) {\n  return (0, _index4.authWithUsername)(m) && !(0, _enterprise.isADEnabled)(m) ? 'username' : 'email';\n}\n\nfunction hasOnlyClassicConnections(m) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  for (var _len = arguments.length, strategies = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    strategies[_key - 2] = arguments[_key];\n  }\n\n  return l.hasOnlyConnections.apply(l, [m, type].concat(strategies)) && !l.hasSomeConnections(m, 'passwordless');\n}\n\nfunction useBigSocialButtons(m) {\n  return (0, _index5.useBigButtons)(m, hasOnlyClassicConnections(m, 'social') ? 5 : 3);\n}\n\nfunction validateAllowedConnections(m) {\n  var anyDBConnection = l.hasSomeConnections(m, 'database');\n  var anySocialConnection = l.hasSomeConnections(m, 'social');\n  var anyEnterpriseConnection = l.hasSomeConnections(m, 'enterprise');\n\n  if (!anyDBConnection && !anySocialConnection && !anyEnterpriseConnection) {\n    var error = new Error('At least one database, enterprise or social connection needs to be available.');\n    error.code = 'no_connection';\n    m = l.stop(m, error);\n  } else if (!anyDBConnection && (0, _index4.hasInitialScreen)(m, 'forgotPassword')) {\n    var _error = new Error('The `initialScreen` option was set to \"forgotPassword\" but no database connection is available.');\n\n    _error.code = 'unavailable_initial_screen';\n    m = l.stop(m, _error);\n  } else if (!anyDBConnection && !anySocialConnection && (0, _index4.hasInitialScreen)(m, 'signUp')) {\n    var _error2 = new Error('The `initialScreen` option was set to \"signUp\" but no database or social connection is available.');\n\n    _error2.code = 'unavailable_initial_screen';\n    m = l.stop(m, _error2);\n  }\n\n  if ((0, _tenant.defaultDirectoryName)(m) && !(0, _tenant.defaultDirectory)(m)) {\n    l.error(m, 'The account\\'s default directory \"' + (0, _tenant.defaultDirectoryName)(m) + '\" is not enabled.');\n  }\n\n  if ((0, _index4.defaultDatabaseConnectionName)(m) && !(0, _index4.defaultDatabaseConnection)(m)) {\n    l.warn(m, 'The provided default database connection \"' + (0, _index4.defaultDatabaseConnectionName)(m) + '\" is not enabled.');\n  }\n\n  if ((0, _enterprise.defaultEnterpriseConnectionName)(m) && !(0, _enterprise.defaultEnterpriseConnection)(m)) {\n    l.warn(m, 'The provided default enterprise connection \"' + (0, _enterprise.defaultEnterpriseConnectionName)(m) + '\" is not enabled or does not allow email/password authentication.');\n  }\n\n  return m;\n}\n\nvar setPrefill = function setPrefill(m) {\n  var _l$prefill$toJS = l.prefill(m).toJS(),\n      email = _l$prefill$toJS.email,\n      username = _l$prefill$toJS.username;\n\n  if (typeof email === 'string') m = (0, _email.setEmail)(m, email);\n  if (typeof username === 'string') m = (0, _username.setUsername)(m, username, 'username', false);\n  return m;\n};\n\nfunction createErrorScreen(m, stopError) {\n  setTimeout(function () {\n    (0, _index8.swap)(_index8.updateEntity, 'lock', l.id(m), l.stop, stopError);\n  }, 0);\n  return new _error_screen2.default();\n}\n\nvar Classic = function () {\n  function Classic() {\n    _classCallCheck(this, Classic);\n  }\n\n  Classic.prototype.didInitialize = function didInitialize(model, options) {\n    model = (0, _index5.initSocial)(model, options);\n    model = (0, _index4.initDatabase)(model, options);\n    model = (0, _enterprise.initEnterprise)(model, options);\n    return model;\n  };\n\n  Classic.prototype.didReceiveClientSettings = function didReceiveClientSettings(m) {\n    m = validateAllowedConnections(m);\n    m = setPrefill(m);\n    return m;\n  };\n\n  Classic.prototype.willShow = function willShow(m, opts) {\n    m = (0, _index4.overrideDatabaseOptions)(m, opts);\n    m = (0, _index4.resolveAdditionalSignUpFields)(m);\n\n    if ((0, _sync.isSuccess)(m, 'client')) {\n      m = validateAllowedConnections(m);\n    }\n\n    return m;\n  };\n\n  Classic.prototype.render = function render(m) {\n    //if there's an error, we should show the error screen no matter what.\n    if (l.hasStopped(m)) {\n      return new _error_screen2.default();\n    } // TODO: remove the detail about the loading pane being pinned,\n    // sticky screens should be handled at the box module.\n\n\n    if (!(0, _sync.isDone)(m) || m.get('isLoadingPanePinned')) {\n      return new _loading_screen2.default();\n    }\n\n    if ((0, _index4.hasScreen)(m, 'login')) {\n      if (!(0, _quick_auth.hasSkippedQuickAuth)(m) && (0, _index4.hasInitialScreen)(m, 'login')) {\n        if ((0, _enterprise.isInCorpNetwork)(m)) {\n          return new _kerberos_screen2.default();\n        }\n\n        if (l.ui.rememberLastLogin(m)) {\n          var lastUsedConnection = sso.lastUsedConnection(m);\n          var lastUsedUsername = sso.lastUsedUsername(m);\n\n          if (lastUsedConnection && (0, _sync.isSuccess)(m, 'sso') && l.hasConnection(m, lastUsedConnection.get('name')) && l.findConnection(m, lastUsedConnection.get('name')).get('type') !== 'passwordless') {\n            return new _last_login_screen2.default();\n          }\n        }\n      }\n\n      if ((0, _enterprise.quickAuthConnection)(m)) {\n        return new _quick_auth_screen2.default();\n      }\n\n      if ((0, _enterprise.isHRDActive)(m)) {\n        return new _hrd_screen2.default();\n      }\n    }\n\n    if (!(0, _index4.hasScreen)(m, 'login') && !(0, _index4.hasScreen)(m, 'signUp') && !(0, _index4.hasScreen)(m, 'forgotPassword')) {\n      var errorMessage = 'No available Screen. You have to allow at least one of those screens: `login`, `signUp`or `forgotPassword`.';\n      var noAvailableScreenError = new Error(errorMessage);\n      noAvailableScreenError.code = 'internal_error';\n      noAvailableScreenError.description = errorMessage;\n      return createErrorScreen(m, noAvailableScreenError);\n    }\n\n    var Screen = Classic.SCREENS[(0, _index4.getScreen)(m)];\n\n    if (Screen) {\n      return new Screen();\n    }\n\n    var noScreenError = new Error('Internal error');\n    noScreenError.code = 'internal_error';\n    noScreenError.description = 'Couldn\\'t find a screen \"' + (0, _index4.getScreen)(m) + '\"';\n    return createErrorScreen(m, noScreenError);\n  };\n\n  return Classic;\n}();\n\nClassic.SCREENS = {\n  login: _login2.default,\n  forgotPassword: _reset_password2.default,\n  signUp: _sign_up_screen2.default,\n  mfaLogin: _mfa_login_screen2.default\n};\nexports.default = new Classic();","map":null,"metadata":{},"sourceType":"script"}