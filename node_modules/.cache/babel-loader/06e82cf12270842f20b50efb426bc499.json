{"ast":null,"code":"var format = require('util').format;\n\nvar PasswordPolicyError = require('./policy_error');\n\nfunction isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\n\nvar defaultRuleset = {\n  length: require('./rules/length'),\n  contains: require('./rules/contains'),\n  containsAtLeast: require('./rules/containsAtLeast'),\n  identicalChars: require('./rules/identicalChars')\n};\n\nfunction flatDescriptions(descriptions, index) {\n  if (!descriptions.length) {\n    return '';\n  }\n\n  function flatSingleDescription(description, index) {\n    var spaces = new Array(index + 1).join(' ');\n    var result = spaces + '* ';\n\n    if (description.format) {\n      result += format.apply(null, [description.message].concat(description.format));\n    } else {\n      result += description.message;\n    }\n\n    if (description.items) {\n      result += '\\n' + spaces + flatDescriptions(description.items, index + 1);\n    }\n\n    return result;\n  }\n\n  var firstDescription = flatSingleDescription(descriptions[0], index);\n  descriptions = descriptions.slice(1).reduce(function (result, description) {\n    result += '\\n' + flatSingleDescription(description, index);\n    return result;\n  }, firstDescription);\n  return descriptions;\n}\n/**\n * Creates a PasswordPolicy which is a set of rules.\n *\n * @class PasswordPolicy\n * @constructor\n */\n\n\nfunction PasswordPolicy(rules, ruleset) {\n  this.rules = rules;\n  this.ruleset = ruleset || defaultRuleset;\n\n  this._reduce(function (result, ruleOptions, rule) {\n    rule.validate(ruleOptions);\n  });\n}\n\nPasswordPolicy.prototype = {};\n\nPasswordPolicy.prototype._reduce = function (fn, value) {\n  var self = this;\n  return Object.keys(this.rules).reduce(function (result, ruleName) {\n    var ruleOptions = self.rules[ruleName];\n    var rule = self.ruleset[ruleName];\n    return fn(result, ruleOptions, rule);\n  }, value);\n};\n\nPasswordPolicy.prototype._applyRules = function (password) {\n  return this._reduce(function (result, ruleOptions, rule) {\n    // If previous result was false as this an &&, then nothing to do here!\n    if (!result) {\n      return false;\n    }\n\n    if (!rule) {\n      return false;\n    }\n\n    return rule.assert(ruleOptions, password);\n  }, true);\n};\n\nPasswordPolicy.prototype.missing = function (password) {\n  return this._reduce(function (result, ruleOptions, rule) {\n    var missingRule = rule.missing(ruleOptions, password);\n    result.rules.push(missingRule);\n    result.verified = result.verified && !!missingRule.verified;\n    return result;\n  }, {\n    rules: [],\n    verified: true\n  });\n};\n\nPasswordPolicy.prototype.explain = function () {\n  return this._reduce(function (result, ruleOptions, rule) {\n    result.push(rule.explain(ruleOptions));\n    return result;\n  }, []);\n};\n\nPasswordPolicy.prototype.missingAsMarkdown = function (password) {\n  return flatDescriptions(this.missing(password), 1);\n};\n\nPasswordPolicy.prototype.toString = function () {\n  var descriptions = this.explain();\n  return flatDescriptions(descriptions, 0);\n};\n\nPasswordPolicy.prototype.check = function (password) {\n  if (!isString(password)) {\n    return false;\n  }\n\n  return this._applyRules(password);\n};\n\nPasswordPolicy.prototype.assert = function (password) {\n  if (!this.check(password)) {\n    throw new PasswordPolicyError('Password does not meet password policy');\n  }\n};\n\nmodule.exports = PasswordPolicy;","map":null,"metadata":{},"sourceType":"script"}