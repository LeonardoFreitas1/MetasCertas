{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _p2_api = require('./web_api/p2_api');\n\nvar _p2_api2 = _interopRequireDefault(_p2_api);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Auth0WebAPI = function () {\n  function Auth0WebAPI() {\n    _classCallCheck(this, Auth0WebAPI);\n\n    this.clients = {};\n  }\n\n  Auth0WebAPI.prototype.setupClient = function setupClient(lockID, clientID, domain, opts) {\n    var hostedLoginPage = window.location.host === domain; // when it is used on on the hosted login page, it shouldn't use popup mode\n\n    opts.redirect = hostedLoginPage ? true : opts.redirect; // for cordova and electron we should force popup without SSO so it uses\n    // /ro or /oauth/token for DB connections\n\n    if (window && (!!window.cordova || !!window.electron)) {\n      opts.redirect = false;\n      opts.sso = false;\n    }\n\n    this.clients[lockID] = new _p2_api2.default(lockID, clientID, domain, opts);\n  };\n\n  Auth0WebAPI.prototype.logIn = function logIn(lockID, options, authParams, cb) {\n    this.clients[lockID].logIn(options, authParams, cb);\n  };\n\n  Auth0WebAPI.prototype.logout = function logout(lockID, query) {\n    this.clients[lockID].logout(query);\n  };\n\n  Auth0WebAPI.prototype.signUp = function signUp(lockID, options, cb) {\n    this.clients[lockID].signUp(options, cb);\n  };\n\n  Auth0WebAPI.prototype.resetPassword = function resetPassword(lockID, options, cb) {\n    this.clients[lockID].resetPassword(options, cb);\n  };\n\n  Auth0WebAPI.prototype.startPasswordless = function startPasswordless(lockID, options, cb) {\n    this.clients[lockID].passwordlessStart(options, cb);\n  };\n\n  Auth0WebAPI.prototype.passwordlessVerify = function passwordlessVerify(lockID, options, cb) {\n    this.clients[lockID].passwordlessVerify(options, cb);\n  };\n\n  Auth0WebAPI.prototype.parseHash = function parseHash(lockID) {\n    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var cb = arguments[2];\n    return this.clients[lockID].parseHash(hash, cb);\n  };\n\n  Auth0WebAPI.prototype.getUserInfo = function getUserInfo(lockID, token, callback) {\n    return this.clients[lockID].getUserInfo(token, callback);\n  };\n\n  Auth0WebAPI.prototype.getProfile = function getProfile(lockID, token, callback) {\n    return this.clients[lockID].getProfile(token, callback);\n  };\n\n  Auth0WebAPI.prototype.getSSOData = function getSSOData(lockID) {\n    var _clients$lockID;\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return (_clients$lockID = this.clients[lockID]).getSSOData.apply(_clients$lockID, args);\n  };\n\n  Auth0WebAPI.prototype.getUserCountry = function getUserCountry(lockID, cb) {\n    return this.clients[lockID].getUserCountry(function (err, data) {\n      return cb(err, data && data.countryCode);\n    });\n  };\n\n  Auth0WebAPI.prototype.checkSession = function checkSession(lockID, options, cb) {\n    return this.clients[lockID].checkSession(options, cb);\n  };\n\n  return Auth0WebAPI;\n}();\n\nexports.default = new Auth0WebAPI();","map":null,"metadata":{},"sourceType":"script"}