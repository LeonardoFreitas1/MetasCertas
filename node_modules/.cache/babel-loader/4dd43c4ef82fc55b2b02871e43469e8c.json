{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getInputHeight;\n/* eslint-disable camelcase */\n\nfunction getPadding(vertical, top, bottom) {\n  var isTopDefined = typeof top === 'number';\n  var isBottomDefined = typeof bottom === 'number';\n  var isVerticalDefined = typeof vertical === 'number';\n\n  if (isTopDefined && isBottomDefined) {\n    return top + bottom;\n  }\n\n  if (isTopDefined && isVerticalDefined) {\n    return top + vertical;\n  }\n\n  if (isTopDefined) {\n    return top;\n  }\n\n  if (isBottomDefined && isVerticalDefined) {\n    return bottom + vertical;\n  }\n\n  if (isBottomDefined) {\n    return bottom;\n  }\n\n  if (isVerticalDefined) {\n    return 2 * vertical;\n  }\n\n  return 0;\n}\n\nfunction getInputHeight(_ref, small) {\n  var _ref$font$input = _ref.font.input,\n      lineHeight = _ref$font$input.lineHeight,\n      lineHeight_small = _ref$font$input.lineHeight_small,\n      _ref$spacing = _ref.spacing,\n      inputPadding = _ref$spacing.inputPadding,\n      displayTextPaddingVertical = _ref$spacing.displayTextPaddingVertical,\n      displayTextPaddingTop = _ref$spacing.displayTextPaddingTop,\n      displayTextPaddingBottom = _ref$spacing.displayTextPaddingBottom,\n      displayTextPaddingVertical_small = _ref$spacing.displayTextPaddingVertical_small,\n      displayTextPaddingTop_small = _ref$spacing.displayTextPaddingTop_small,\n      displayTextPaddingBottom_small = _ref$spacing.displayTextPaddingBottom_small;\n  var calcLineHeight = small ? lineHeight_small : lineHeight;\n  var padding = small ? getPadding(displayTextPaddingVertical_small, displayTextPaddingTop_small, displayTextPaddingBottom_small) : getPadding(displayTextPaddingVertical, displayTextPaddingTop, displayTextPaddingBottom);\n  return parseInt(calcLineHeight, 10) + 2 * inputPadding + padding;\n}","map":null,"metadata":{},"sourceType":"script"}