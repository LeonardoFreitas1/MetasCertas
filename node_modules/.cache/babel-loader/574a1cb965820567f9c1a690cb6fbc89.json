{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.startHRD = startHRD;\nexports.cancelHRD = cancelHRD;\nexports.logIn = logIn;\n\nvar _index = require('../../store/index');\n\nvar _enterprise = require('../enterprise');\n\nvar _index2 = require('../../field/index');\n\nvar _email = require('../../field/email');\n\nvar _actions = require('../../core/actions');\n\nvar _index3 = require('../../core/index');\n\nvar l = _interopRequireWildcard(_index3);\n\nvar _index4 = require('../database/index');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction startHRD(id, email) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _enterprise.toggleHRD, email);\n} // TODO: enterprise connections should not depend on database\n// connections. However, we now allow a username input to contain also\n// an email and this information is in the database module. We should\n// make this information flow from the UI (like we do for the startHRD\n// function). Including this dependency here allows us to do that\n// incrementally.\n\n\nfunction cancelHRD(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n    m = (0, _enterprise.toggleHRD)(m, false);\n    m = (0, _index2.hideInvalidFields)(m);\n    return m;\n  });\n}\n\nfunction logIn(id) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var email = (0, _index2.getFieldValue)(m, (0, _index4.databaseLogInWithEmail)(m) ? 'email' : 'username');\n  var ssoConnection = (0, _enterprise.matchConnection)(m, email);\n\n  if (ssoConnection && !(0, _enterprise.isHRDActive)(m)) {\n    return logInSSO(id, ssoConnection);\n  }\n\n  logInActiveFlow(id);\n}\n\nfunction logInActiveFlow(id) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var usernameField = (0, _enterprise.isHRDActive)(m) || !(0, _index4.databaseLogInWithEmail)(m) ? 'username' : 'email';\n  var originalUsername = (0, _index2.getFieldValue)(m, usernameField);\n  var connection = (0, _enterprise.enterpriseActiveFlowConnection)(m);\n  var username = l.defaultADUsernameFromEmailPrefix(m) ? (0, _email.emailLocalPart)(originalUsername) : originalUsername;\n  (0, _actions.logIn)(id, ['password', usernameField], {\n    connection: connection ? connection.get('name') : null,\n    username: username,\n    password: (0, _index2.getFieldValue)(m, 'password'),\n    login_hint: username\n  });\n}\n\nfunction logInSSO(id, connection) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var field = (0, _index4.databaseLogInWithEmail)(m) ? 'email' : 'username';\n  (0, _actions.logIn)(id, [field], {\n    connection: connection.get('name'),\n    login_hint: (0, _index2.getFieldValue)(m, field)\n  });\n}","map":null,"metadata":{},"sourceType":"script"}