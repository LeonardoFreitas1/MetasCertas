{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.syncRemoteData = syncRemoteData;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _settings = require('./client/settings');\n\nvar _settings2 = require('./tenant/settings');\n\nvar _data = require('./sso/data');\n\nvar _index = require('./index');\n\nvar l = _interopRequireWildcard(_index);\n\nvar _enterprise = require('../connection/enterprise');\n\nvar _sync = require('../sync');\n\nvar _sync2 = _interopRequireDefault(_sync);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction syncRemoteData(m) {\n  if (l.useTenantInfo(m)) {\n    m = (0, _sync2.default)(m, 'client', {\n      syncFn: function syncFn(m, cb) {\n        return (0, _settings2.fetchTenantSettings)(l.tenantBaseUrl(m), cb);\n      },\n      successFn: function successFn(m, result) {\n        return (0, _settings2.syncTenantSettingsSuccess)(m, l.clientID(m), result);\n      }\n    });\n  } else {\n    m = (0, _sync2.default)(m, 'client', {\n      syncFn: function syncFn(m, cb) {\n        return (0, _settings.fetchClientSettings)(l.clientID(m), l.clientBaseUrl(m), cb);\n      },\n      successFn: _settings.syncClientSettingsSuccess\n    });\n  }\n\n  m = (0, _sync2.default)(m, 'sso', {\n    conditionFn: function conditionFn(m) {\n      return l.auth.sso(m) && l.ui.rememberLastLogin(m);\n    },\n    waitFn: function waitFn(m) {\n      return (0, _sync.isSuccess)(m, 'client');\n    },\n    syncFn: function syncFn(m, cb) {\n      return (0, _data.fetchSSOData)(l.id(m), (0, _enterprise.isADEnabled)(m), cb);\n    },\n    successFn: function successFn(m, result) {\n      return m.mergeIn(['sso'], _immutable2.default.fromJS(result));\n    },\n    errorFn: function errorFn(m, error) {\n      if (error.error === 'consent_required') {\n        l.warn(m, error.error_description);\n      } else {\n        // location.origin is not supported in all browsers\n        var origin = location.protocol + '//' + location.hostname;\n\n        if (location.port) {\n          origin += ':' + location.port;\n        }\n\n        var appSettingsUrl = 'https://manage.auth0.com/#/applications/' + l.clientID(m) + '/settings';\n        l.warn(m, 'There was an error fetching the SSO data. This could simply mean that there was a problem with the network. But, if a \"Origin\" error has been logged before this warning, please add \"' + origin + '\" to the \"Allowed Web Origins\" list in the Auth0 dashboard: ' + appSettingsUrl);\n      }\n    }\n  });\n  return m;\n} // shouldn't depend on this","map":null,"metadata":{},"sourceType":"script"}