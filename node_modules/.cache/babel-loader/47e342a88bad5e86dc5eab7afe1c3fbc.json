{"ast":null,"code":"import notification from \"../../components/notification\";\n\nvar getChatRoom = function getChatRoom(chatRooms, receiverId) {\n  var selectedChatroom;\n  chatRooms.forEach(function (chatroom) {\n    if (chatroom.otherUserId === receiverId) {\n      selectedChatroom = chatroom;\n    }\n  });\n  return selectedChatroom;\n};\n\nvar actions = {\n  CHAT_INIT: \"CHAT_INIT\",\n  CHAT_INIT_SAGA: \"CHAT_INIT_SAGA\",\n  CHAT_UPDATE_CHATROOM: \"CHAT_UPDATE_CHATROOM\",\n  CHAT_TOGGLE_COMPOSE: \"CHAT_TOGGLE_COMPOSE\",\n  CHAT_SET_TOGGLE_VIEW_PROFILE: \"CHAT_SET_TOGGLE_VIEW_PROFILE\",\n  CHAT_SET_TOGGLE_COMPOSED_ID: \"CHAT_SET_TOGGLE_COMPOSED_ID\",\n  CHAT_SEND_MESSAGE: \"CHAT_SEND_MESSAGE\",\n  CHAT_UPDATE_CHATROOM_SAGA: \"CHAT_UPDATE_CHATROOM_SAGA\",\n  TOGGLE_MOBILE_LIST: \"TOGGLE_MOBILE_LIST\",\n  TOGGLE_MOBILE_PROFILE: \"TOGGLE_MOBILE_PROFILE\",\n  RESTORE_DEMO_DATA: \"RESTORE_DEMO_DATA\",\n  RESTORE_DEMO_DATA_DONE: \"RESTORE_DEMO_DATA_DONE\",\n  UPDATE_NEW_USER_PROPS: \"UPDATE_NEW_USER_PROPS\",\n  ADD_NEW_USER: \"ADD_NEW_USER\",\n  ADD_NEW_USER_SAGA: \"ADD_NEW_USER_SAGA\",\n  NEW_MESSAGE_SUCCESFULL: \"NEW_MESSAGE_SUCCESFULL\",\n  chatInit: function chatInit(userId) {\n    return {\n      type: actions.CHAT_INIT,\n      payload: {\n        userId: userId\n      }\n    };\n  },\n  toggleCompose: function toggleCompose() {\n    return {\n      type: actions.CHAT_TOGGLE_COMPOSE\n    };\n  },\n  toggleViewProfile: function toggleViewProfile(viewProfile) {\n    return {\n      type: actions.CHAT_SET_TOGGLE_VIEW_PROFILE,\n      viewProfile: viewProfile\n    };\n  },\n  setComposedId: function setComposedId(id) {\n    return {\n      type: actions.CHAT_SET_TOGGLE_COMPOSED_ID,\n      id: id\n    };\n  },\n  setSelectedChatroom: function setSelectedChatroom(chatRoom) {\n    return {\n      type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n      payload: {\n        chatRoom: chatRoom,\n        selected: true\n      }\n    };\n  },\n  sendMessage: function sendMessage(text) {\n    return function (dispatch, getState) {\n      var _getState$Chat = getState().Chat,\n          chatRooms = _getState$Chat.chatRooms,\n          composedId = _getState$Chat.composedId,\n          openCompose = _getState$Chat.openCompose,\n          selectedChatRoom = _getState$Chat.selectedChatRoom;\n      var chatRoom = selectedChatRoom;\n\n      if (openCompose) {\n        if (!composedId) {\n          notification(\"error\", \"Please select receiver\");\n          dispatch({\n            type: \"null\"\n          });\n        } else {\n          chatRoom = getChatRoom(chatRooms, composedId);\n        }\n      }\n\n      dispatch({\n        type: actions.CHAT_SEND_MESSAGE,\n        payload: {\n          chatRoom: chatRoom,\n          text: text,\n          openCompose: openCompose\n        }\n      });\n    };\n  },\n  toggleMobileList: function toggleMobileList(mobileActiveList) {\n    return {\n      type: actions.TOGGLE_MOBILE_LIST,\n      mobileActiveList: mobileActiveList\n    };\n  },\n  toggleMobileProfile: function toggleMobileProfile(mobileActiveProfile) {\n    return {\n      type: actions.TOGGLE_MOBILE_PROFILE,\n      mobileActiveProfile: mobileActiveProfile\n    };\n  },\n  restoreData: function restoreData(demoData) {\n    return {\n      type: actions.RESTORE_DEMO_DATA,\n      demoData: demoData\n    };\n  },\n  updateNewUsersProp: function updateNewUsersProp(addNewUsersProp) {\n    return {\n      type: actions.UPDATE_NEW_USER_PROPS,\n      addNewUsersProp: addNewUsersProp\n    };\n  },\n  addNewUser: function addNewUser(user, addNewUsersProp) {\n    return {\n      type: actions.ADD_NEW_USER,\n      user: user,\n      addNewUsersProp: addNewUsersProp\n    };\n  }\n};\nexport default actions;","map":{"version":3,"sources":["/home/leonardo_freitas/Desktop/Programação/MetasCertas/src/redux/chat/actions.js"],"names":["notification","getChatRoom","chatRooms","receiverId","selectedChatroom","forEach","chatroom","otherUserId","actions","CHAT_INIT","CHAT_INIT_SAGA","CHAT_UPDATE_CHATROOM","CHAT_TOGGLE_COMPOSE","CHAT_SET_TOGGLE_VIEW_PROFILE","CHAT_SET_TOGGLE_COMPOSED_ID","CHAT_SEND_MESSAGE","CHAT_UPDATE_CHATROOM_SAGA","TOGGLE_MOBILE_LIST","TOGGLE_MOBILE_PROFILE","RESTORE_DEMO_DATA","RESTORE_DEMO_DATA_DONE","UPDATE_NEW_USER_PROPS","ADD_NEW_USER","ADD_NEW_USER_SAGA","NEW_MESSAGE_SUCCESFULL","chatInit","userId","type","payload","toggleCompose","toggleViewProfile","viewProfile","setComposedId","id","setSelectedChatroom","chatRoom","selected","sendMessage","text","dispatch","getState","Chat","composedId","openCompose","selectedChatRoom","toggleMobileList","mobileActiveList","toggleMobileProfile","mobileActiveProfile","restoreData","demoData","updateNewUsersProp","addNewUsersProp","addNewUser","user"],"mappings":"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","sourcesContent":["import notification from \"../../components/notification\";\n\nconst getChatRoom = (chatRooms, receiverId) => {\n  let selectedChatroom;\n  chatRooms.forEach(chatroom => {\n    if (chatroom.otherUserId === receiverId) {\n      selectedChatroom = chatroom;\n    }\n  });\n  return selectedChatroom;\n};\nconst actions = {\n  CHAT_INIT: \"CHAT_INIT\",\n  CHAT_INIT_SAGA: \"CHAT_INIT_SAGA\",\n  CHAT_UPDATE_CHATROOM: \"CHAT_UPDATE_CHATROOM\",\n  CHAT_TOGGLE_COMPOSE: \"CHAT_TOGGLE_COMPOSE\",\n  CHAT_SET_TOGGLE_VIEW_PROFILE: \"CHAT_SET_TOGGLE_VIEW_PROFILE\",\n  CHAT_SET_TOGGLE_COMPOSED_ID: \"CHAT_SET_TOGGLE_COMPOSED_ID\",\n  CHAT_SEND_MESSAGE: \"CHAT_SEND_MESSAGE\",\n  CHAT_UPDATE_CHATROOM_SAGA: \"CHAT_UPDATE_CHATROOM_SAGA\",\n  TOGGLE_MOBILE_LIST: \"TOGGLE_MOBILE_LIST\",\n  TOGGLE_MOBILE_PROFILE: \"TOGGLE_MOBILE_PROFILE\",\n  RESTORE_DEMO_DATA: \"RESTORE_DEMO_DATA\",\n  RESTORE_DEMO_DATA_DONE: \"RESTORE_DEMO_DATA_DONE\",\n  UPDATE_NEW_USER_PROPS: \"UPDATE_NEW_USER_PROPS\",\n  ADD_NEW_USER: \"ADD_NEW_USER\",\n  ADD_NEW_USER_SAGA: \"ADD_NEW_USER_SAGA\",\n  NEW_MESSAGE_SUCCESFULL: \"NEW_MESSAGE_SUCCESFULL\",\n  chatInit: userId => ({\n    type: actions.CHAT_INIT,\n    payload: { userId }\n  }),\n  toggleCompose: () => ({ type: actions.CHAT_TOGGLE_COMPOSE }),\n  toggleViewProfile: viewProfile => ({\n    type: actions.CHAT_SET_TOGGLE_VIEW_PROFILE,\n    viewProfile\n  }),\n  setComposedId: id => ({ type: actions.CHAT_SET_TOGGLE_COMPOSED_ID, id }),\n  setSelectedChatroom: chatRoom => ({\n    type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n    payload: { chatRoom, selected: true }\n  }),\n  sendMessage: text => {\n    return (dispatch, getState) => {\n      const {\n        chatRooms,\n        composedId,\n        openCompose,\n        selectedChatRoom\n      } = getState().Chat;\n      let chatRoom = selectedChatRoom;\n      if (openCompose) {\n        if (!composedId) {\n          notification(\"error\", \"Please select receiver\");\n          dispatch({ type: \"null\" });\n        } else {\n          chatRoom = getChatRoom(chatRooms, composedId);\n        }\n      }\n      dispatch({\n        type: actions.CHAT_SEND_MESSAGE,\n        payload: { chatRoom, text, openCompose }\n      });\n    };\n  },\n  toggleMobileList: mobileActiveList => ({\n    type: actions.TOGGLE_MOBILE_LIST,\n    mobileActiveList\n  }),\n  toggleMobileProfile: mobileActiveProfile => ({\n    type: actions.TOGGLE_MOBILE_PROFILE,\n    mobileActiveProfile\n  }),\n  restoreData: demoData => ({\n    type: actions.RESTORE_DEMO_DATA,\n    demoData\n  }),\n  updateNewUsersProp: addNewUsersProp => ({\n    type: actions.UPDATE_NEW_USER_PROPS,\n    addNewUsersProp\n  }),\n  addNewUser: (user, addNewUsersProp) => ({\n    type: actions.ADD_NEW_USER,\n    user,\n    addNewUsersProp\n  })\n};\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}