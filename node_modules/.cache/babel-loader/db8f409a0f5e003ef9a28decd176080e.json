{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.initPasswordless = initPasswordless;\nexports.setResendSuccess = setResendSuccess;\nexports.resendSuccess = resendSuccess;\nexports.setResendFailed = setResendFailed;\nexports.resendFailed = resendFailed;\nexports.resendOngoing = resendOngoing;\nexports.resend = resend;\nexports.resendAvailable = resendAvailable;\nexports.restartPasswordless = restartPasswordless;\nexports.send = send;\nexports.isSendLink = isSendLink;\nexports.setPasswordlessStarted = setPasswordlessStarted;\nexports.passwordlessStarted = passwordlessStarted;\nexports.passwordlessConnection = passwordlessConnection;\nexports.isEmail = isEmail;\nexports.mustAcceptTerms = mustAcceptTerms;\nexports.termsAccepted = termsAccepted;\nexports.toggleTermsAcceptance = toggleTermsAcceptance;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _index = require('../../core/index');\n\nvar l = _interopRequireWildcard(_index);\n\nvar _index2 = require('../../field/index');\n\nvar _phone_number = require('../../field/phone_number');\n\nvar _data_utils = require('../../utils/data_utils');\n\nvar _web_api = require('../../core/web_api');\n\nvar _web_api2 = _interopRequireDefault(_web_api);\n\nvar _sync = require('../../sync');\n\nvar _sync2 = _interopRequireDefault(_sync);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _dataFns = (0, _data_utils.dataFns)(['passwordless']),\n    get = _dataFns.get,\n    initNS = _dataFns.initNS,\n    tget = _dataFns.tget,\n    tremove = _dataFns.tremove,\n    tset = _dataFns.tset;\n\nfunction initPasswordless(m, opts) {\n  // TODO: validate opts\n  var send = opts.passwordlessMethod === 'link' ? 'link' : 'code';\n  var mustAcceptTerms = !!opts.mustAcceptTerms;\n  m = initNS(m, (0, _immutable.Map)({\n    send: send,\n    mustAcceptTerms: mustAcceptTerms\n  }));\n\n  if (opts.defaultLocation && typeof opts.defaultLocation === 'string') {\n    m = (0, _phone_number.initLocation)(m, opts.defaultLocation.toUpperCase());\n  } else {\n    m = (0, _sync2.default)(m, 'location', {\n      recoverResult: 'US',\n      syncFn: function syncFn(m, cb) {\n        return _web_api2.default.getUserCountry(l.id(m), cb);\n      },\n      successFn: function successFn(m, result) {\n        return (0, _phone_number.initLocation)(m, result);\n      }\n    });\n  }\n\n  return m;\n}\n\nfunction setResendStatus(m, value) {\n  // TODO: check value\n  return tset(m, 'resendStatus', value);\n}\n\nfunction setResendSuccess(m) {\n  return setResendStatus(m, 'success');\n}\n\nfunction resendSuccess(m) {\n  return resendStatus(m) == 'success';\n}\n\nfunction setResendFailed(m) {\n  return setResendStatus(m, 'failed');\n}\n\nfunction resendFailed(m) {\n  return resendStatus(m) == 'failed';\n}\n\nfunction resendOngoing(m) {\n  return resendStatus(m) == 'ongoing';\n}\n\nfunction resend(m) {\n  if (resendAvailable(m)) {\n    return setResendStatus(m, 'ongoing');\n  } else {\n    return m;\n  }\n}\n\nfunction resendStatus(m) {\n  return tget(m, 'resendStatus', 'waiting');\n}\n\nfunction resendAvailable(m) {\n  return resendStatus(m) == 'waiting' || resendStatus(m) == 'failed';\n}\n\nfunction restartPasswordless(m) {\n  // TODO: maybe we can take advantage of the transient fields\n  m = tremove(m, 'passwordlessStarted');\n  m = tremove(m, 'resendStatus'); // only for link\n\n  m = (0, _index2.clearFields)(m, ['vcode']); // only for code\n\n  return l.clearGlobalError(m);\n}\n\nfunction send(m) {\n  return get(m, 'send', isEmail(m) ? 'link' : 'code');\n}\n\nfunction isSendLink(m) {\n  return send(m) === 'link';\n}\n\nfunction setPasswordlessStarted(m, value) {\n  return tset(m, 'passwordlessStarted', value);\n}\n\nfunction passwordlessStarted(m) {\n  return tget(m, 'passwordlessStarted', false);\n}\n\nfunction passwordlessConnection(m) {\n  return l.connections(m, 'passwordless', 'email').get(0) || l.connections(m, 'passwordless', 'sms').get(0) || new _immutable.Map();\n}\n\nfunction isEmail(m) {\n  var c = passwordlessConnection(m);\n  return c.isEmpty() ? undefined : c.get('strategy') === 'email';\n}\n\nfunction mustAcceptTerms(m) {\n  return get(m, 'mustAcceptTerms', false);\n}\n\nfunction termsAccepted(m) {\n  return !mustAcceptTerms(m) || tget(m, 'termsAccepted', false);\n}\n\nfunction toggleTermsAcceptance(m) {\n  return tset(m, 'termsAccepted', !termsAccepted(m));\n}","map":null,"metadata":{},"sourceType":"script"}