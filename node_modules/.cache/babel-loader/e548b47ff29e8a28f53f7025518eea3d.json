{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = atom;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Atom = function () {\n  function Atom(state) {\n    _classCallCheck(this, Atom);\n\n    this.state = state;\n    this.watches = {};\n  }\n\n  Atom.prototype.reset = function reset(state) {\n    return this._change(state);\n  };\n\n  Atom.prototype.swap = function swap(f) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return this._change(f.apply(undefined, [this.state].concat(args)));\n  };\n\n  Atom.prototype.deref = function deref() {\n    return this.state;\n  };\n\n  Atom.prototype.addWatch = function addWatch(k, f) {\n    // if (this.watches[key]) {\n    //   console.warn(`adding a watch with an already registered key: ${k}`);\n    // }\n    this.watches[k] = f;\n    return this;\n  };\n\n  Atom.prototype.removeWatch = function removeWatch(k) {\n    // if (!this.watches[key]) {\n    //   console.warn(`removing a watch with an unknown key: ${k}`);\n    // }\n    delete this.watches[k];\n    return this;\n  };\n\n  Atom.prototype._change = function _change(newState) {\n    var state = this.state,\n        watches = this.watches;\n    this.state = newState;\n    Object.keys(watches).forEach(function (k) {\n      return watches[k](k, state, newState);\n    });\n    return this.state;\n  };\n\n  return Atom;\n}();\n\nfunction atom(state) {\n  return new Atom(state);\n}","map":null,"metadata":{},"sourceType":"script"}