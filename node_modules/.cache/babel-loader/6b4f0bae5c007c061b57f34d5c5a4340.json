{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getCalendarMonthWeeks;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction getCalendarMonthWeeks(month, enableOutsideDays) {\n  var firstDayOfWeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _moment[\"default\"].localeData().firstDayOfWeek();\n\n  if (!_moment[\"default\"].isMoment(month) || !month.isValid()) {\n    throw new TypeError('`month` must be a valid moment object');\n  }\n\n  if (_constants.WEEKDAYS.indexOf(firstDayOfWeek) === -1) {\n    throw new TypeError('`firstDayOfWeek` must be an integer between 0 and 6');\n  } // set utc offset to get correct dates in future (when timezone changes)\n\n\n  var firstOfMonth = month.clone().startOf('month').hour(12);\n  var lastOfMonth = month.clone().endOf('month').hour(12); // calculate the exact first and last days to fill the entire matrix\n  // (considering days outside month)\n\n  var prevDays = (firstOfMonth.day() + 7 - firstDayOfWeek) % 7;\n  var nextDays = (firstDayOfWeek + 6 - lastOfMonth.day()) % 7;\n  var firstDay = firstOfMonth.clone().subtract(prevDays, 'day');\n  var lastDay = lastOfMonth.clone().add(nextDays, 'day');\n  var totalDays = lastDay.diff(firstDay, 'days') + 1;\n  var currentDay = firstDay.clone();\n  var weeksInMonth = [];\n\n  for (var i = 0; i < totalDays; i += 1) {\n    if (i % 7 === 0) {\n      weeksInMonth.push([]);\n    }\n\n    var day = null;\n\n    if (i >= prevDays && i < totalDays - nextDays || enableOutsideDays) {\n      day = currentDay.clone();\n    }\n\n    weeksInMonth[weeksInMonth.length - 1].push(day);\n    currentDay.add(1, 'day');\n  }\n\n  return weeksInMonth;\n}","map":null,"metadata":{},"sourceType":"script"}