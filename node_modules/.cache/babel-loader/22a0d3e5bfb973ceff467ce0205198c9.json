{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.logIn = logIn;\nexports.signUp = signUp;\nexports.resetPassword = resetPassword;\nexports.showLoginActivity = showLoginActivity;\nexports.showSignUpActivity = showSignUpActivity;\nexports.showResetPasswordActivity = showResetPasswordActivity;\nexports.cancelResetPassword = cancelResetPassword;\nexports.cancelMFALogin = cancelMFALogin;\nexports.toggleTermsAcceptance = toggleTermsAcceptance;\nexports.showLoginMFAActivity = showLoginMFAActivity;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _index = require('../../store/index');\n\nvar _web_api = require('../../core/web_api');\n\nvar _web_api2 = _interopRequireDefault(_web_api);\n\nvar _actions = require('../../core/actions');\n\nvar _index2 = require('../../core/index');\n\nvar l = _interopRequireWildcard(_index2);\n\nvar _index3 = require('../../field/index');\n\nvar c = _interopRequireWildcard(_index3);\n\nvar _index4 = require('./index');\n\nvar _i18n = require('../../i18n');\n\nvar i18n = _interopRequireWildcard(_i18n);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction logIn(id) {\n  var needsMFA = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var usernameField = (0, _index4.databaseLogInWithEmail)(m) ? 'email' : 'username';\n  var username = c.getFieldValue(m, usernameField);\n  var params = {\n    connection: (0, _index4.databaseConnectionName)(m),\n    username: username,\n    password: c.getFieldValue(m, 'password')\n  };\n  var fields = [usernameField, 'password'];\n  var mfaCode = c.getFieldValue(m, 'mfa_code');\n\n  if (needsMFA) {\n    params['mfa_code'] = mfaCode;\n    fields.push('mfa_code');\n  }\n\n  (0, _actions.logIn)(id, fields, params, function (id, error, fields, next) {\n    if (error.error === 'a0.mfa_required') {\n      return showLoginMFAActivity(id);\n    }\n\n    return next();\n  });\n}\n\nfunction signUp(id) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var fields = ['email', 'password'];\n  if ((0, _index4.databaseConnectionRequiresUsername)(m)) fields.push('username');\n  (0, _index4.additionalSignUpFields)(m).forEach(function (x) {\n    return fields.push(x.get('name'));\n  });\n  (0, _actions.validateAndSubmit)(id, fields, function (m) {\n    var params = {\n      connection: (0, _index4.databaseConnectionName)(m),\n      email: c.getFieldValue(m, 'email'),\n      password: c.getFieldValue(m, 'password'),\n      autoLogin: (0, _index4.shouldAutoLogin)(m)\n    };\n\n    if ((0, _index4.databaseConnectionRequiresUsername)(m)) {\n      params.username = c.getFieldValue(m, 'username');\n    }\n\n    if (!(0, _index4.additionalSignUpFields)(m).isEmpty()) {\n      params.user_metadata = {};\n      (0, _index4.additionalSignUpFields)(m).forEach(function (x) {\n        params.user_metadata[x.get('name')] = c.getFieldValue(m, x.get('name'));\n      });\n    }\n\n    _web_api2.default.signUp(id, params, function (error, result, popupHandler) {\n      for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n\n      if (error) {\n        if (!!popupHandler) {\n          popupHandler._current_popup.kill();\n        }\n\n        setTimeout(function () {\n          return signUpError(id, error);\n        }, 250);\n      } else {\n        signUpSuccess.apply(undefined, [id, result, popupHandler].concat(args));\n      }\n    });\n  });\n}\n\nfunction signUpSuccess(id, result, popupHandler) {\n  var lock = (0, _index.read)(_index.getEntity, 'lock', id);\n\n  if ((0, _index4.shouldAutoLogin)(lock)) {\n    (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n      return m.set('signedUp', true);\n    }); // TODO: check options, redirect is missing\n\n    var options = {\n      connection: (0, _index4.databaseConnectionName)(lock),\n      username: c.email(lock),\n      password: c.password(lock)\n    };\n\n    if (!!popupHandler) {\n      options.popupHandler = popupHandler;\n    }\n\n    return _web_api2.default.logIn(id, options, l.auth.params(lock).toJS(), function (error) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      if (error) {\n        setTimeout(function () {\n          return autoLogInError(id, error);\n        }, 250);\n      } else {\n        _actions.logInSuccess.apply(undefined, [id].concat(args));\n      }\n    });\n  }\n\n  var autoclose = l.ui.autoclose(lock);\n\n  if (!autoclose) {\n    (0, _index.swap)(_index.updateEntity, 'lock', id, function (lock) {\n      return l.setSubmitting(lock, false).set('signedUp', true);\n    });\n  } else {\n    (0, _actions.closeLock)(id, false);\n  }\n}\n\nfunction signUpError(id, error) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var invalidPasswordKeys = {\n    PasswordDictionaryError: 'password_dictionary_error',\n    PasswordNoUserInfoError: 'password_no_user_info_error',\n    PasswordStrengthError: 'password_strength_error'\n  };\n  var errorKey = error.code === 'invalid_password' && invalidPasswordKeys[error.name] || error.code;\n  var errorMessage = i18n.html(m, ['error', 'signUp', errorKey]) || i18n.html(m, ['error', 'signUp', 'lock.fallback']);\n  l.emitEvent(m, 'signup error', error);\n  (0, _index.swap)(_index.updateEntity, 'lock', id, l.setSubmitting, false, errorMessage);\n}\n\nfunction autoLogInError(id, error) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n    var errorMessage = l.loginErrorMessage(m, error);\n\n    if ((0, _index4.hasScreen)(m, 'login')) {\n      return l.setSubmitting((0, _index4.setScreen)(m, 'login'), false, errorMessage);\n    } else {\n      return l.setSubmitting(m, false, errorMessage);\n    }\n  });\n}\n\nfunction resetPassword(id) {\n  (0, _actions.validateAndSubmit)(id, ['email'], function (m) {\n    var params = {\n      connection: (0, _index4.databaseConnectionName)(m),\n      email: c.getFieldValue(m, 'email')\n    };\n\n    _web_api2.default.resetPassword(id, params, function (error) {\n      if (error) {\n        setTimeout(function () {\n          return resetPasswordError(id, error);\n        }, 250);\n      } else {\n        resetPasswordSuccess(id);\n      }\n    });\n  });\n}\n\nfunction resetPasswordSuccess(id) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n\n  if ((0, _index4.hasScreen)(m, 'login')) {\n    (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n      return (0, _index4.setScreen)(l.setSubmitting(m, false), 'login', ['']);\n    } // array with one empty string tells the function to not clear any field\n    ); // TODO: should be handled by box\n\n    setTimeout(function () {\n      var successMessage = i18n.html(m, ['success', 'forgotPassword']);\n      (0, _index.swap)(_index.updateEntity, 'lock', id, l.setGlobalSuccess, successMessage);\n    }, 500);\n  } else {\n    if (l.ui.autoclose(m)) {\n      (0, _actions.closeLock)(id);\n    } else {\n      (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n        return l.setSubmitting(m, false).set('passwordResetted', true);\n      });\n    }\n  }\n}\n\nfunction resetPasswordError(id, error) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var errorMessage = i18n.html(m, ['error', 'forgotPassword', error.code]) || i18n.html(m, ['error', 'forgotPassword', 'lock.fallback']);\n  (0, _index.swap)(_index.updateEntity, 'lock', id, l.setSubmitting, false, errorMessage);\n}\n\nfunction showLoginActivity(id) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['password'];\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.setScreen, 'login', fields);\n}\n\nfunction showSignUpActivity(id) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['password'];\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.setScreen, 'signUp', fields);\n}\n\nfunction showResetPasswordActivity(id) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['password'];\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.setScreen, 'forgotPassword', fields);\n}\n\nfunction cancelResetPassword(id) {\n  return showLoginActivity(id);\n}\n\nfunction cancelMFALogin(id) {\n  return showLoginActivity(id);\n}\n\nfunction toggleTermsAcceptance(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.toggleTermsAcceptance);\n}\n\nfunction showLoginMFAActivity(id) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['mfa_code'];\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.setScreen, 'mfaLogin', fields);\n}","map":null,"metadata":{},"sourceType":"script"}