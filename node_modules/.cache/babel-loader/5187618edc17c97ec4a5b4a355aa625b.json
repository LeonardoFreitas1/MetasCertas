{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Cache = function () {\n  function Cache(fetchFn) {\n    _classCallCheck(this, Cache);\n\n    this.cache = {};\n    this.cbs = {};\n    this.fetchFn = fetchFn;\n  }\n\n  Cache.prototype.get = function get() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var cb = args.pop();\n    var key = JSON.stringify(args);\n    if (this.cache[key]) return cb(null, this.cache[key]);\n    if (this.registerCallback(key, cb) > 1) return;\n    this.fetch(key, args);\n  };\n\n  Cache.prototype.fetch = function fetch(key, args) {\n    var _this = this;\n\n    this.fetchFn.apply(this, args.concat([function (error, result) {\n      if (!error) _this.cache[key] = result;\n\n      _this.execCallbacks(key, error, result);\n    }]));\n  };\n\n  Cache.prototype.registerCallback = function registerCallback(key, cb) {\n    this.cbs[key] = this.cbs[key] || [];\n    this.cbs[key].push(cb);\n    return this.cbs[key].length;\n  };\n\n  Cache.prototype.execCallbacks = function execCallbacks(key) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    this.cbs[key].forEach(function (f) {\n      return f.apply(undefined, args);\n    });\n    delete this.cbs[key];\n  };\n\n  return Cache;\n}();\n\nexports.default = Cache;","map":null,"metadata":{},"sourceType":"script"}