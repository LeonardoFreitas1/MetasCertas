{"ast":null,"code":"'use strict';\n\nvar define = require('define-properties');\n\nvar isSymbol = require('is-symbol');\n\nvar globalKey = '__ global cache key __';\n/* istanbul ignore else */\n// eslint-disable-next-line no-restricted-properties\n\nif (typeof Symbol === 'function' && isSymbol(Symbol('foo')) && typeof Symbol['for'] === 'function') {\n  // eslint-disable-next-line no-restricted-properties\n  globalKey = Symbol['for'](globalKey);\n}\n\nvar trueThunk = function trueThunk() {\n  return true;\n};\n\nvar ensureCache = function ensureCache() {\n  if (!global[globalKey]) {\n    var properties = {};\n    properties[globalKey] = {};\n    var predicates = {};\n    predicates[globalKey] = trueThunk;\n    define(global, properties, predicates);\n  }\n\n  return global[globalKey];\n};\n\nvar cache = ensureCache();\n\nvar isPrimitive = function isPrimitive(val) {\n  return val === null || typeof val !== 'object' && typeof val !== 'function';\n};\n\nvar getPrimitiveKey = function getPrimitiveKey(val) {\n  if (isSymbol(val)) {\n    return Symbol.prototype.valueOf.call(val);\n  }\n\n  return typeof val + ' | ' + String(val);\n};\n\nvar requirePrimitiveKey = function requirePrimitiveKey(val) {\n  if (!isPrimitive(val)) {\n    throw new TypeError('key must not be an object');\n  }\n};\n\nvar globalCache = {\n  clear: function clear() {\n    delete global[globalKey];\n    cache = ensureCache();\n  },\n  'delete': function deleteKey(key) {\n    requirePrimitiveKey(key);\n    delete cache[getPrimitiveKey(key)];\n    return !globalCache.has(key);\n  },\n  get: function get(key) {\n    requirePrimitiveKey(key);\n    return cache[getPrimitiveKey(key)];\n  },\n  has: function has(key) {\n    requirePrimitiveKey(key);\n    return getPrimitiveKey(key) in cache;\n  },\n  set: function set(key, value) {\n    requirePrimitiveKey(key);\n    var primitiveKey = getPrimitiveKey(key);\n    var props = {};\n    props[primitiveKey] = value;\n    var predicates = {};\n    predicates[primitiveKey] = trueThunk;\n    define(cache, props, predicates);\n    return globalCache.has(key);\n  },\n  setIfMissingThenGet: function setIfMissingThenGet(key, valueThunk) {\n    if (globalCache.has(key)) {\n      return globalCache.get(key);\n    }\n\n    var item = valueThunk();\n    globalCache.set(key, item);\n    return item;\n  }\n};\nmodule.exports = globalCache;","map":null,"metadata":{},"sourceType":"script"}