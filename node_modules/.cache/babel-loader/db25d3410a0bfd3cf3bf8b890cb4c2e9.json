{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _dates = _interopRequireDefault(require(\"../../utils/dates\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _Selection = _interopRequireWildcard(require(\"../../Selection\"));\n\nvar _TimeGridEvent = _interopRequireDefault(require(\"../../TimeGridEvent\"));\n\nvar _common = require(\"./common\");\n\nvar _NoopWrapper = _interopRequireDefault(require(\"../../NoopWrapper\"));\n\nvar pointInColumn = function pointInColumn(bounds, _ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  var left = bounds.left,\n      right = bounds.right,\n      top = bounds.top;\n  return x < right + 10 && x > left && y > top;\n};\n\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {} : {};\n\nvar EventContainerWrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(EventContainerWrapper, _React$Component);\n\n  function EventContainerWrapper() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handleMove = function (point, boundaryBox) {\n      var event = _this.context.draggable.dragAndDropAction.event;\n      var _this$props = _this.props,\n          accessors = _this$props.accessors,\n          slotMetrics = _this$props.slotMetrics;\n\n      if (!pointInColumn(boundaryBox, point)) {\n        _this.reset();\n\n        return;\n      }\n\n      var currentSlot = slotMetrics.closestSlotFromPoint({\n        y: point.y - _this.eventOffsetTop,\n        x: point.x\n      }, boundaryBox);\n      var eventStart = accessors.start(event);\n      var eventEnd = accessors.end(event);\n\n      var end = _dates.default.add(currentSlot, _dates.default.diff(eventStart, eventEnd, 'minutes'), 'minutes');\n\n      _this.update(event, slotMetrics.getRange(currentSlot, end));\n    };\n\n    _this._selectable = function () {\n      var node = (0, _reactDom.findDOMNode)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n      var selector = _this._selector = new _Selection.default(function () {\n        return node.closest('.rbc-time-view');\n      });\n      selector.on('beforeSelect', function (point) {\n        var dragAndDropAction = _this.context.draggable.dragAndDropAction;\n        if (!dragAndDropAction.action) return false;\n\n        if (dragAndDropAction.action === 'resize') {\n          return pointInColumn((0, _Selection.getBoundsForNode)(node), point);\n        }\n\n        var eventNode = (0, _Selection.getEventNodeFromPoint)(node, point);\n        if (!eventNode) return false;\n        _this.eventOffsetTop = point.y - (0, _Selection.getBoundsForNode)(eventNode).top;\n      });\n      selector.on('selecting', function (box) {\n        var bounds = (0, _Selection.getBoundsForNode)(node);\n        var dragAndDropAction = _this.context.draggable.dragAndDropAction;\n        if (dragAndDropAction.action === 'move') _this.handleMove(box, bounds);\n        if (dragAndDropAction.action === 'resize') _this.handleResize(box, bounds);\n      });\n      selector.on('selectStart', function () {\n        return _this.context.draggable.onStart();\n      });\n      selector.on('select', function (point) {\n        var bounds = (0, _Selection.getBoundsForNode)(node);\n        if (!_this.state.event || !pointInColumn(bounds, point)) return;\n\n        _this.handleInteractionEnd();\n      });\n      selector.on('click', function () {\n        return _this.context.draggable.onEnd(null);\n      });\n      selector.on('reset', function () {\n        _this.reset();\n\n        _this.context.draggable.onEnd(null);\n      });\n    };\n\n    _this.handleInteractionEnd = function () {\n      var resource = _this.props.resource;\n      var event = _this.state.event;\n\n      _this.reset();\n\n      _this.context.draggable.onEnd({\n        start: event.start,\n        end: event.end,\n        resourceId: resource\n      });\n    };\n\n    _this._teardownSelectable = function () {\n      if (!_this._selector) return;\n\n      _this._selector.teardown();\n\n      _this._selector = null;\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  var _proto = EventContainerWrapper.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._selectable();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this._teardownSelectable();\n  };\n\n  _proto.reset = function reset() {\n    if (this.state.event) this.setState({\n      event: null,\n      top: null,\n      height: null\n    });\n  };\n\n  _proto.update = function update(event, _ref2) {\n    var startDate = _ref2.startDate,\n        endDate = _ref2.endDate,\n        top = _ref2.top,\n        height = _ref2.height;\n    var lastEvent = this.state.event;\n\n    if (lastEvent && startDate === lastEvent.start && endDate === lastEvent.end) {\n      return;\n    }\n\n    this.setState({\n      top: top,\n      height: height,\n      event: (0, _extends2.default)({}, event, {\n        start: startDate,\n        end: endDate\n      })\n    });\n  };\n\n  _proto.handleResize = function handleResize(point, boundaryBox) {\n    var start, end;\n    var _this$props2 = this.props,\n        accessors = _this$props2.accessors,\n        slotMetrics = _this$props2.slotMetrics;\n    var _this$context$draggab = this.context.draggable.dragAndDropAction,\n        event = _this$context$draggab.event,\n        direction = _this$context$draggab.direction;\n    var currentSlot = slotMetrics.closestSlotFromPoint(point, boundaryBox);\n\n    if (direction === 'UP') {\n      end = accessors.end(event);\n      start = _dates.default.min(currentSlot, slotMetrics.closestSlotFromDate(end, -1));\n    } else if (direction === 'DOWN') {\n      start = accessors.start(event);\n      end = _dates.default.max(currentSlot, slotMetrics.closestSlotFromDate(start));\n    }\n\n    this.update(event, slotMetrics.getRange(start, end));\n  };\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        children = _this$props3.children,\n        accessors = _this$props3.accessors,\n        components = _this$props3.components,\n        getters = _this$props3.getters,\n        slotMetrics = _this$props3.slotMetrics,\n        localizer = _this$props3.localizer;\n    var _this$state = this.state,\n        event = _this$state.event,\n        top = _this$state.top,\n        height = _this$state.height;\n    if (!event) return children;\n    var events = children.props.children;\n    var start = event.start,\n        end = event.end;\n    var label;\n    var format = 'eventTimeRangeFormat';\n    var startsBeforeDay = slotMetrics.startsBeforeDay(start);\n    var startsAfterDay = slotMetrics.startsAfterDay(end);\n    if (startsBeforeDay) format = 'eventTimeRangeEndFormat';else if (startsAfterDay) format = 'eventTimeRangeStartFormat';\n    if (startsBeforeDay && startsAfterDay) label = localizer.messages.allDay;else label = localizer.format({\n      start: start,\n      end: end\n    }, format);\n    return _react.default.cloneElement(children, {\n      children: _react.default.createElement(_react.default.Fragment, null, events, event && _react.default.createElement(_TimeGridEvent.default, {\n        event: event,\n        label: label,\n        className: \"rbc-addons-dnd-drag-preview\",\n        style: {\n          top: top,\n          height: height,\n          width: 100\n        },\n        getters: getters,\n        components: (0, _extends2.default)({}, components, {\n          eventWrapper: _NoopWrapper.default\n        }),\n        accessors: (0, _extends2.default)({}, accessors, _common.dragAccessors),\n        continuesEarlier: startsBeforeDay,\n        continuesLater: startsAfterDay\n      }))\n    });\n  };\n\n  return EventContainerWrapper;\n}(_react.default.Component);\n\nEventContainerWrapper.contextTypes = {\n  draggable: _propTypes.default.shape({\n    onStart: _propTypes.default.func,\n    onEnd: _propTypes.default.func,\n    onBeginAction: _propTypes.default.func,\n    dragAndDropAction: _propTypes.default.object\n  })\n};\nEventContainerWrapper.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  accessors: _propTypes.default.object.isRequired,\n  components: _propTypes.default.object.isRequired,\n  getters: _propTypes.default.object.isRequired,\n  localizer: _propTypes.default.object.isRequired,\n  slotMetrics: _propTypes.default.object.isRequired,\n  resource: _propTypes.default.any\n} : {};\nEventContainerWrapper.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nvar _default = EventContainerWrapper;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}