{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.dataFns = dataFns;\n\nvar _immutable = require('immutable');\n\nfunction dataFns(baseNSKeyPath) {\n  function keyPath(nsKeyPath, keyOrKeyPath) {\n    return nsKeyPath.concat((typeof keyOrKeyPath === 'undefined' ? 'undefined' : _typeof(keyOrKeyPath)) === 'object' ? keyOrKeyPath : [keyOrKeyPath]);\n  }\n\n  function getFn(nsKeyPath) {\n    return function (m, keyOrKeyPath) {\n      var notSetValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      return m.getIn(keyPath(nsKeyPath, keyOrKeyPath), notSetValue);\n    };\n  }\n\n  function setFn(nsKeyPath) {\n    return function (m, keyOrKeyPath, value) {\n      return m.setIn(keyPath(nsKeyPath, keyOrKeyPath), value);\n    };\n  }\n\n  function removeFn(nsKeyPath) {\n    return function (m, keyOrKeyPath) {\n      return m.removeIn(keyPath(nsKeyPath, keyOrKeyPath));\n    };\n  }\n\n  var transientNSKeyPath = baseNSKeyPath.concat(['transient']);\n  return {\n    get: getFn(baseNSKeyPath),\n    set: setFn(baseNSKeyPath),\n    remove: removeFn(baseNSKeyPath),\n    tget: getFn(transientNSKeyPath),\n    tset: setFn(transientNSKeyPath),\n    tremove: removeFn(transientNSKeyPath),\n    reset: function reset(m) {\n      return m.map(function (x) {\n        return _immutable.Map.isMap(x) ? x.remove('transient') : x;\n      });\n    },\n    init: function init(id, m) {\n      return new _immutable.Map({\n        id: id\n      }).setIn(baseNSKeyPath, m);\n    },\n    initNS: function initNS(m, ns) {\n      return m.setIn(baseNSKeyPath, ns);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}