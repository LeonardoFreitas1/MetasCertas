{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getCalendarDaySettings;\n\nvar _getPhrase = _interopRequireDefault(require(\"./getPhrase\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction isSelected(modifiers) {\n  return modifiers.has('selected') || modifiers.has('selected-span') || modifiers.has('selected-start') || modifiers.has('selected-end');\n}\n\nfunction shouldUseDefaultCursor(modifiers) {\n  return modifiers.has('blocked-minimum-nights') || modifiers.has('blocked-calendar') || modifiers.has('blocked-out-of-range');\n}\n\nfunction isHoveredSpan(modifiers) {\n  if (isSelected(modifiers)) return false;\n  return modifiers.has('hovered-span') || modifiers.has('after-hovered-start');\n}\n\nfunction getAriaLabel(phrases, modifiers, day, ariaLabelFormat) {\n  var chooseAvailableDate = phrases.chooseAvailableDate,\n      dateIsUnavailable = phrases.dateIsUnavailable,\n      dateIsSelected = phrases.dateIsSelected,\n      dateIsSelectedAsStartDate = phrases.dateIsSelectedAsStartDate,\n      dateIsSelectedAsEndDate = phrases.dateIsSelectedAsEndDate;\n  var formattedDate = {\n    date: day.format(ariaLabelFormat)\n  };\n\n  if (modifiers.has('selected-start') && dateIsSelectedAsStartDate) {\n    return (0, _getPhrase[\"default\"])(dateIsSelectedAsStartDate, formattedDate);\n  }\n\n  if (modifiers.has('selected-end') && dateIsSelectedAsEndDate) {\n    return (0, _getPhrase[\"default\"])(dateIsSelectedAsEndDate, formattedDate);\n  }\n\n  if (isSelected(modifiers) && dateIsSelected) {\n    return (0, _getPhrase[\"default\"])(dateIsSelected, formattedDate);\n  }\n\n  if (modifiers.has(_constants.BLOCKED_MODIFIER)) {\n    return (0, _getPhrase[\"default\"])(dateIsUnavailable, formattedDate);\n  }\n\n  return (0, _getPhrase[\"default\"])(chooseAvailableDate, formattedDate);\n}\n\nfunction getCalendarDaySettings(day, ariaLabelFormat, daySize, modifiers, phrases) {\n  return {\n    ariaLabel: getAriaLabel(phrases, modifiers, day, ariaLabelFormat),\n    hoveredSpan: isHoveredSpan(modifiers),\n    isOutsideRange: modifiers.has('blocked-out-of-range'),\n    selected: isSelected(modifiers),\n    useDefaultCursor: shouldUseDefaultCursor(modifiers),\n    daySizeStyles: {\n      width: daySize,\n      height: daySize - 1\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}