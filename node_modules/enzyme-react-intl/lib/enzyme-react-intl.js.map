{"version":3,"sources":["webpack://enzyme-react-intl/webpack/universalModuleDefinition","webpack://enzyme-react-intl/webpack/bootstrap","webpack://enzyme-react-intl/external \"jsonfile\"","webpack://enzyme-react-intl/external \"path\"","webpack://enzyme-react-intl/external \"enzyme\"","webpack://enzyme-react-intl/external \"react-intl\"","webpack://enzyme-react-intl/external \"react\"","webpack://enzyme-react-intl/./src/index.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","require","_react","_reactIntl","_enzyme","path","locale","messages","enzymeReactIntl","loadTranslation","localeFilePath","fp","join","__dirname","readFileSync","loadTranslationObject","translations","shallowWithIntl","node","options","context","intlProvider","IntlProvider","intl","getChildContext","shallow","React","cloneElement","_objectSpread","mountWithIntl","childContextTypes","mount","assign","intlShape","renderWithIntl","render","setLocale","str","getLocale"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,uBAAAH,GACA,iBAAAC,QACAA,QAAA,qBAAAD,IAEAD,EAAA,qBAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAMA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA8CA,OAzCAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACAkB,OAAAC,eAAAnB,EAAA,cAAiDwB,OAAA,KAIjDlB,EAAAmB,EAAA,SAAAxB,GACA,IAAAe,EAAAf,KAAAyB,WACA,WAA2B,OAAAzB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,GAGAzB,EAAA0B,KAIA1B,IAAA2B,EAAA,mBCzEAhC,EAAAD,QAAAkC,QAAA,2BCAAjC,EAAAD,QAAAkC,QAAA,uBCAAjC,EAAAD,QAAAkC,QAAA,yBCAAjC,EAAAD,QAAAkC,QAAA,6BCAAjC,EAAAD,QAAAkC,QAAA,oDCAA,MAAAC,KAAA7B,EAAA,gCACA8B,EAAA9B,EAAA,GACA+B,EAAA/B,EAAA,+bACA,IAAIgC,EAAOhC,EAAQ,GACfiC,EAAS,KACTC,KAgFJ,IAAIC,GACAC,gBA1EJ,SAAyBC,GACrB,QAA4B,IAAlBA,EAEN,OADAH,KACO,KAEX,IAAII,EAAKN,EAAKO,KAAKC,EAAWH,GAE9B,OADAH,EAAWlC,EAAQ,GAAYyC,aAAa,IAAMH,IAqElDI,sBA5DJ,SAA+BC,GAC3B,YAA4B,IAAjBA,GACPT,KACO,MAGXA,EAAWS,GAuDXC,gBA7CJ,SAAyBC,EAAMC,GAAYC,aACvC,MAAMC,EAAe,IAAIC,gBAAchB,OAAQA,EAAQC,iBACjDgB,KAAEA,GAASF,EAAaG,kBAC9B,OAAO,EAAApB,EAAAqB,SAAQC,UAAMC,aAAaT,GAAQK,SAAnCK,KAAiDT,GAASC,aAAcD,EAAQC,SAASG,aA2ChGM,cAnCJ,SAAwBX,GAAME,QAAEA,EAAFU,kBAAWA,OACrC,MAAMT,EAAe,IAAIC,gBAAchB,OAAQA,EAAQC,iBACjDgB,KAAEA,GAASF,EAAaG,kBAC9B,OAAO,EAAApB,EAAA2B,OAAML,UAAMC,aAAaT,GAAQK,UACpCH,QAASnC,OAAO+C,UAAWZ,GAAUG,SACrCO,kBAAmB7C,OAAO+C,WAAaT,KAAMU,aAAaH,MA+B9DI,eAtBJ,SAAyBhB,GAAME,QAAEA,EAAFU,kBAAWA,OACtC,MAAMT,EAAe,IAAIC,gBAAchB,OAAQA,EAAQC,iBACjDgB,KAAEA,GAASF,EAAaG,kBAC9B,OAAO,EAAApB,EAAA+B,QAAOT,UAAMC,aAAaT,GAAQK,UACrCH,QAASnC,OAAO+C,UAAWZ,GAAUG,SACrCO,kBAAmB7C,OAAO+C,WAAaT,KAAMU,aAAaH,MAkB9DM,UAVJ,SAAmBC,GACf/B,EAAS+B,GAUTC,UAfJ,WACI,OAAOhC,IAgBXtC,EAAOD,QAAUyC","file":"enzyme-react-intl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"enzyme-react-intl\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"enzyme-react-intl\"] = factory();\n\telse\n\t\troot[\"enzyme-react-intl\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = require(\"jsonfile\");","module.exports = require(\"path\");","module.exports = require(\"enzyme\");","module.exports = require(\"react-intl\");","module.exports = require(\"react\");","import React from 'react';\r\nimport { IntlProvider, intlShape } from 'react-intl';\r\nimport { mount, shallow, render } from 'enzyme';\r\nlet path = require('path');\r\nlet locale = 'en';\r\nlet messages = {};\r\n\r\n/**\r\n * Loads translation file.\r\n * @param {string} localeFilePath\r\n * @return {object} messages\r\n */\r\nfunction loadTranslation(localeFilePath) {\r\n    if(typeof localeFilePath == \"undefined\"){\r\n        messages = {};\r\n        return null;\r\n    }\r\n    let fp = path.join(__dirname, localeFilePath);\r\n    messages = require('jsonfile').readFileSync(\".\" + fp);\r\n    return messages;\r\n}\r\n\r\n/**\r\n * Set translations object.\r\n * @param {string} localeFilePath\r\n * @return {object} messages\r\n */\r\nfunction loadTranslationObject(translations) {\r\n    if (typeof translations === \"undefined\") {\r\n        messages = {}\r\n        return null\r\n    }\r\n\r\n    messages = translations;\r\n    return messages;\r\n}\r\n\r\n/**\r\n * Equivalent to enzyme's 'shallow' method.\r\n * @param {string} node React Component that requires react-intl.\r\n * @param {object} options enzyme.shallow options\r\n * @return {object}\r\n */\r\nfunction shallowWithIntl(node, options = { context: {}}) {\r\n    const intlProvider = new IntlProvider({locale: locale, messages }, {});\r\n    const { intl } = intlProvider.getChildContext();\r\n    return shallow(React.cloneElement(node, { intl }), { ...options, context: { ...options.context, intl } });\r\n}\r\n\r\n/**\r\n * Equivalent to enzyme's 'mount' method.\r\n * @param {string} node React Component that requires react-intl.\r\n * @return {object}\r\n */\r\nfunction mountWithIntl (node, { context, childContextTypes } = {}) {\r\n    const intlProvider = new IntlProvider({locale: locale, messages }, {});\r\n    const { intl } = intlProvider.getChildContext();\r\n    return mount(React.cloneElement(node, { intl }), {\r\n        context: Object.assign({}, context, {intl}),\r\n        childContextTypes: Object.assign({}, { intl: intlShape }, childContextTypes)\r\n    });\r\n}\r\n\r\n/**\r\n * Equivalent to enzyme's 'render' method.\r\n * @param {string} node React Component that requires react-intl.\r\n * @return {object}\r\n */\r\nfunction renderWithIntl (node, { context, childContextTypes } = {}) {\r\n    const intlProvider = new IntlProvider({locale: locale, messages }, {});\r\n    const { intl } = intlProvider.getChildContext();\r\n    return render(React.cloneElement(node, { intl }), {\r\n        context: Object.assign({}, context, {intl}),\r\n        childContextTypes: Object.assign({}, { intl: intlShape }, childContextTypes)\r\n    });\r\n}\r\n\r\nfunction getLocale(){\r\n    return locale;\r\n}\r\n\r\nfunction setLocale(str){\r\n    locale = str;\r\n}\r\n\r\nvar enzymeReactIntl = {\r\n    loadTranslation: loadTranslation,\r\n    loadTranslationObject: loadTranslationObject,\r\n    shallowWithIntl: shallowWithIntl,\r\n    mountWithIntl: mountWithIntl,\r\n    renderWithIntl: renderWithIntl,\r\n    setLocale: setLocale,\r\n    getLocale: getLocale\r\n};\r\nmodule.exports = enzymeReactIntl;\r\n"],"sourceRoot":""}