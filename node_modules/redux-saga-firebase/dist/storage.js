"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getRef = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _marked =
/*#__PURE__*/
_regenerator.default.mark(getDownloadURL),
    _marked2 =
/*#__PURE__*/
_regenerator.default.mark(getFileMetadata),
    _marked3 =
/*#__PURE__*/
_regenerator.default.mark(updateFileMetadata),
    _marked4 =
/*#__PURE__*/
_regenerator.default.mark(deleteFile);

var getRef = function getRef(rsf, pathOrRef) {
  return typeof pathOrRef === 'string' ? rsf.app.storage().ref(pathOrRef) : pathOrRef;
};

exports.getRef = getRef;

function uploadFile(pathOrRef, file, metadata) {
  var ref = getRef(this, pathOrRef);
  var task = ref.put(file, metadata);
  return task;
}

function uploadString(pathOrRef, string, format, metadata) {
  var ref = getRef(this, pathOrRef);
  var task = ref.putString(string, format, metadata);
  return task;
}

function getDownloadURL(pathOrRef) {
  var ref, url;
  return _regenerator.default.wrap(function getDownloadURL$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context.next = 3;
          return (0, _effects.call)([ref, ref.getDownloadURL]);

        case 3:
          url = _context.sent;
          return _context.abrupt("return", url);

        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

function getFileMetadata(pathOrRef) {
  var ref, metadata;
  return _regenerator.default.wrap(function getFileMetadata$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context2.next = 3;
          return (0, _effects.call)([ref, ref.getMetadata]);

        case 3:
          metadata = _context2.sent;
          return _context2.abrupt("return", metadata);

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, this);
}

function updateFileMetadata(pathOrRef, newMetadata) {
  var ref, metadata;
  return _regenerator.default.wrap(function updateFileMetadata$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context3.next = 3;
          return (0, _effects.call)([ref, ref.updateMetadata], newMetadata);

        case 3:
          metadata = _context3.sent;
          return _context3.abrupt("return", metadata);

        case 5:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3, this);
}

function deleteFile(pathOrRef) {
  var ref;
  return _regenerator.default.wrap(function deleteFile$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context4.next = 3;
          return (0, _effects.call)([ref, ref.delete]);

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked4, this);
}

var _default = {
  uploadFile: uploadFile,
  uploadString: uploadString,
  getDownloadURL: getDownloadURL,
  getFileMetadata: getFileMetadata,
  updateFileMetadata: updateFileMetadata,
  deleteFile: deleteFile
};
exports.default = _default;