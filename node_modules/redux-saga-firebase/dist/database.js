"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getRef = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _reduxSaga = require("redux-saga");

var _effects = require("redux-saga/effects");

var _utils = require("./utils");

var _marked =
/*#__PURE__*/
_regenerator.default.mark(read),
    _marked2 =
/*#__PURE__*/
_regenerator.default.mark(create),
    _marked3 =
/*#__PURE__*/
_regenerator.default.mark(update),
    _marked4 =
/*#__PURE__*/
_regenerator.default.mark(patch),
    _marked5 =
/*#__PURE__*/
_regenerator.default.mark(_delete),
    _marked6 =
/*#__PURE__*/
_regenerator.default.mark(sync);

var getRef = function getRef(rsf, pathOrRef) {
  return typeof pathOrRef === 'string' ? rsf.app.database().ref(pathOrRef) : pathOrRef;
};

exports.getRef = getRef;

function read(pathOrRef) {
  var ref, result;
  return _regenerator.default.wrap(function read$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context.next = 3;
          return (0, _effects.call)([ref, ref.once], 'value');

        case 3:
          result = _context.sent;
          return _context.abrupt("return", result.val());

        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

function create(pathOrRef, data) {
  var ref, result;
  return _regenerator.default.wrap(function create$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context2.next = 3;
          return (0, _effects.call)([ref, ref.push], data);

        case 3:
          result = _context2.sent;
          return _context2.abrupt("return", result.key);

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, this);
}

function update(pathOrRef, data) {
  var ref;
  return _regenerator.default.wrap(function update$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context3.next = 3;
          return (0, _effects.call)([ref, ref.set], data);

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3, this);
}

function patch(pathOrRef, data) {
  var ref;
  return _regenerator.default.wrap(function patch$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context4.next = 3;
          return (0, _effects.call)([ref, ref.update], data);

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked4, this);
}

function _delete(pathOrRef) {
  var ref;
  return _regenerator.default.wrap(function _delete$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          ref = getRef(this, pathOrRef);
          _context5.next = 3;
          return (0, _effects.call)([ref, ref.remove]);

        case 3:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked5, this);
}

function channel(pathOrRef) {
  var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';
  var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _reduxSaga.buffers.none();
  var ref = getRef(this, pathOrRef);
  var channel = (0, _reduxSaga.eventChannel)(function (emit) {
    var callback = ref.on(event, function (dataSnapshot) {
      return emit({
        snapshot: dataSnapshot,
        value: dataSnapshot.val()
      });
    }); // Returns unsubscribe function

    return function () {
      return ref.off(event, callback);
    };
  }, buffer);
  return channel;
}

var defaultTransform = function defaultTransform(data) {
  return data.value;
};

function sync(pathOrRef, options, event) {
  var channel;
  return _regenerator.default.wrap(function sync$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          _context6.next = 2;
          return (0, _effects.call)(this.database.channel, pathOrRef, event);

        case 2:
          channel = _context6.sent;
          _context6.next = 5;
          return (0, _effects.fork)(_utils.syncChannel, channel, (0, _objectSpread2.default)({
            transform: defaultTransform
          }, options));

        case 5:
        case "end":
          return _context6.stop();
      }
    }
  }, _marked6, this);
}

var _default = {
  read: read,
  create: create,
  update: update,
  patch: patch,
  delete: _delete,
  channel: channel,
  sync: sync
};
exports.default = _default;