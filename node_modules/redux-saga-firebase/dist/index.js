"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _auth = _interopRequireDefault(require("./auth"));

var _database = _interopRequireDefault(require("./database"));

var _firestore = _interopRequireDefault(require("./firestore"));

var _functions = _interopRequireDefault(require("./functions"));

var _messaging = _interopRequireDefault(require("./messaging"));

var _storage = _interopRequireDefault(require("./storage"));

var ReduxSagaFirebase =
/*#__PURE__*/
function () {
  function ReduxSagaFirebase(firebaseApp) {
    (0, _classCallCheck2.default)(this, ReduxSagaFirebase);
    this.app = firebaseApp;
    this.region = 'us-central1'; // Authentication methods

    this.auth = {
      applyActionCode: _auth.default.applyActionCode.bind(this),
      channel: _auth.default.channel.bind(this),
      confirmPasswordReset: _auth.default.confirmPasswordReset.bind(this),
      createUserWithEmailAndPassword: _auth.default.createUserWithEmailAndPassword.bind(this),
      deleteProfile: _auth.default.deleteProfile.bind(this),
      linkWithPopup: _auth.default.linkWithPopup.bind(this),
      linkWithRedirect: _auth.default.linkWithRedirect.bind(this),
      sendEmailVerification: _auth.default.sendEmailVerification.bind(this),
      sendPasswordResetEmail: _auth.default.sendPasswordResetEmail.bind(this),
      signInAndRetrieveDataWithCredential: _auth.default.signInAndRetrieveDataWithCredential.bind(this),
      signInAnonymously: _auth.default.signInAnonymously.bind(this),
      signInWithCredential: _auth.default.signInWithCredential.bind(this),
      signInWithCustomToken: _auth.default.signInWithCustomToken.bind(this),
      signInWithEmailAndPassword: _auth.default.signInWithEmailAndPassword.bind(this),
      signInWithPopup: _auth.default.signInWithPopup.bind(this),
      signInWithPhoneNumber: _auth.default.signInWithPhoneNumber.bind(this),
      signInWithRedirect: _auth.default.signInWithRedirect.bind(this),
      signOut: _auth.default.signOut.bind(this),
      unlink: _auth.default.unlink.bind(this),
      updateEmail: _auth.default.updateEmail.bind(this),
      updatePassword: _auth.default.updatePassword.bind(this),
      updateProfile: _auth.default.updateProfile.bind(this) // Database methods

    };
    this.database = {
      read: _database.default.read.bind(this),
      create: _database.default.create.bind(this),
      update: _database.default.update.bind(this),
      patch: _database.default.patch.bind(this),
      delete: _database.default.delete.bind(this),
      channel: _database.default.channel.bind(this),
      sync: _database.default.sync.bind(this) // Firestore methods

    };
    this.firestore = {
      addDocument: _firestore.default.addDocument.bind(this),
      channel: _firestore.default.channel.bind(this),
      deleteDocument: _firestore.default.deleteDocument.bind(this),
      getCollection: _firestore.default.getCollection.bind(this),
      getDocument: _firestore.default.getDocument.bind(this),
      setDocument: _firestore.default.setDocument.bind(this),
      syncCollection: _firestore.default.syncCollection.bind(this),
      syncDocument: _firestore.default.syncDocument.bind(this),
      updateDocument: _firestore.default.updateDocument.bind(this) // Functions methods

    };
    this.functions = {
      call: _functions.default.call.bind(this) // Messaging methods

    };
    this.messaging = {
      channel: _messaging.default.channel.bind(this),
      syncMessages: _messaging.default.syncMessages.bind(this),
      syncToken: _messaging.default.syncToken.bind(this),
      tokenRefreshChannel: _messaging.default.tokenRefreshChannel.bind(this) // Storage methods

    };
    this.storage = {
      uploadFile: _storage.default.uploadFile.bind(this),
      uploadString: _storage.default.uploadString.bind(this),
      getDownloadURL: _storage.default.getDownloadURL.bind(this),
      getFileMetadata: _storage.default.getFileMetadata.bind(this),
      updateFileMetadata: _storage.default.updateFileMetadata.bind(this),
      deleteFile: _storage.default.deleteFile.bind(this)
    };
  }

  (0, _createClass2.default)(ReduxSagaFirebase, [{
    key: "projectId",
    value: function projectId() {
      if (this._projectId) return this._projectId;
      var regex = /^([a-z0-9-]+)\.firebaseapp\.com$/;
      var projectId = this.app.options.authDomain.match(regex)[1];
      this._projectId = projectId;
      return projectId;
    }
  }]);
  return ReduxSagaFirebase;
}();

var _default = ReduxSagaFirebase;
exports.default = _default;