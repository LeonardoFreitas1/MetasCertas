"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFunctionURL = getFunctionURL;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _marked =
/*#__PURE__*/
_regenerator.default.mark(_call);

function getFunctionURL(functionName) {
  var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // If the function name is already a URL, just return it.
  var baseUrl = /^https?:\/\//.test(functionName) ? functionName : "https://".concat(this.region, "-").concat(this.projectId(), ".cloudfunctions.net/").concat(functionName);
  var query = Object.keys(parameters).map(function (key) {
    return "".concat(key, "=").concat(parameters[key]);
  }).join('&');
  if (query) return "".concat(baseUrl, "?").concat(query);else return baseUrl;
}

function _call(functionName) {
  var queryParams,
      init,
      url,
      response,
      contentType,
      parser,
      data,
      _args = arguments;
  return _regenerator.default.wrap(function _call$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          queryParams = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
          init = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
          url = getFunctionURL.call(this, functionName, queryParams);
          _context.next = 5;
          return (0, _effects.call)(fetch, url, init);

        case 5:
          response = _context.sent;

          if (response.ok) {
            _context.next = 8;
            break;
          }

          throw response;

        case 8:
          contentType = response.headers.get('Content-Type');
          parser = contentType.startsWith('application/json') ? response.json : response.text;
          _context.next = 12;
          return (0, _effects.call)([response, parser]);

        case 12:
          data = _context.sent;
          return _context.abrupt("return", data);

        case 14:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

var _default = {
  call: _call
};
exports.default = _default;