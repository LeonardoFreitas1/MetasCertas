"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PureDateRangePicker = void 0;

var _reactAddonsShallowCompare = _interopRequireDefault(require("react-addons-shallow-compare"));

var _react = _interopRequireDefault(require("react"));

var _moment = _interopRequireDefault(require("moment"));

var _reactWithStyles = require("react-with-styles");

var _reactPortal = require("react-portal");

var _airbnbPropTypes = require("airbnb-prop-types");

var _consolidatedEvents = require("consolidated-events");

var _isTouchDevice = _interopRequireDefault(require("is-touch-device"));

var _reactOutsideClickHandler = _interopRequireDefault(require("react-outside-click-handler"));

var _DateRangePickerShape = _interopRequireDefault(require("../shapes/DateRangePickerShape"));

var _defaultPhrases = require("../defaultPhrases");

var _getResponsiveContainerStyles = _interopRequireDefault(require("../utils/getResponsiveContainerStyles"));

var _getDetachedContainerStyles = _interopRequireDefault(require("../utils/getDetachedContainerStyles"));

var _getInputHeight = _interopRequireDefault(require("../utils/getInputHeight"));

var _isInclusivelyAfterDay = _interopRequireDefault(require("../utils/isInclusivelyAfterDay"));

var _disableScroll2 = _interopRequireDefault(require("../utils/disableScroll"));

var _noflip = _interopRequireDefault(require("../utils/noflip"));

var _DateRangePickerInputController = _interopRequireDefault(require("./DateRangePickerInputController"));

var _DayPickerRangeController = _interopRequireDefault(require("./DayPickerRangeController"));

var _CloseButton = _interopRequireDefault(require("./CloseButton"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function () { function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); } return _getPrototypeOf; }(); return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function () { function _setPrototypeOf(o, p) { o.__proto__ = p; return o; } return _setPrototypeOf; }(); return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var propTypes = process.env.NODE_ENV !== "production" ? (0, _airbnbPropTypes.forbidExtraProps)(_objectSpread({}, _reactWithStyles.withStylesPropTypes, _DateRangePickerShape["default"])) : {};
var defaultProps = {
  // required props for a functional interactive DateRangePicker
  startDate: null,
  endDate: null,
  focusedInput: null,
  // input related props
  startDatePlaceholderText: 'Start Date',
  endDatePlaceholderText: 'End Date',
  startDateOffset: undefined,
  endDateOffset: undefined,
  disabled: false,
  required: false,
  readOnly: false,
  screenReaderInputMessage: '',
  showClearDates: false,
  showDefaultInputIcon: false,
  inputIconPosition: _constants.ICON_BEFORE_POSITION,
  customInputIcon: null,
  customArrowIcon: null,
  customCloseIcon: null,
  noBorder: false,
  block: false,
  small: false,
  regular: false,
  keepFocusOnInput: false,
  // calendar presentation and interaction related props
  renderMonthText: null,
  orientation: _constants.HORIZONTAL_ORIENTATION,
  anchorDirection: _constants.ANCHOR_LEFT,
  openDirection: _constants.OPEN_DOWN,
  horizontalMargin: 0,
  withPortal: false,
  withFullScreenPortal: false,
  appendToBody: false,
  disableScroll: false,
  initialVisibleMonth: null,
  numberOfMonths: 2,
  keepOpenOnDateSelect: false,
  reopenPickerOnClearDates: false,
  renderCalendarInfo: null,
  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,
  hideKeyboardShortcutsPanel: false,
  daySize: _constants.DAY_SIZE,
  isRTL: false,
  firstDayOfWeek: null,
  verticalHeight: null,
  transitionDuration: undefined,
  verticalSpacing: _constants.DEFAULT_VERTICAL_SPACING,
  horizontalMonthPadding: undefined,
  // navigation related props
  navPrev: null,
  navNext: null,
  onPrevMonthClick: function () {
    function onPrevMonthClick() {}

    return onPrevMonthClick;
  }(),
  onNextMonthClick: function () {
    function onNextMonthClick() {}

    return onNextMonthClick;
  }(),
  onClose: function () {
    function onClose() {}

    return onClose;
  }(),
  // day presentation and interaction related props
  renderCalendarDay: undefined,
  renderDayContents: null,
  renderMonthElement: null,
  minimumNights: 1,
  enableOutsideDays: false,
  isDayBlocked: function () {
    function isDayBlocked() {
      return false;
    }

    return isDayBlocked;
  }(),
  isOutsideRange: function () {
    function isOutsideRange(day) {
      return !(0, _isInclusivelyAfterDay["default"])(day, (0, _moment["default"])());
    }

    return isOutsideRange;
  }(),
  isDayHighlighted: function () {
    function isDayHighlighted() {
      return false;
    }

    return isDayHighlighted;
  }(),
  // internationalization
  displayFormat: function () {
    function displayFormat() {
      return _moment["default"].localeData().longDateFormat('L');
    }

    return displayFormat;
  }(),
  monthFormat: 'MMMM YYYY',
  weekDayFormat: 'dd',
  phrases: _defaultPhrases.DateRangePickerPhrases,
  dayAriaLabelFormat: undefined
};

var DateRangePicker =
/*#__PURE__*/
function (_ref) {
  _inherits(DateRangePicker, _ref);

  _createClass(DateRangePicker, [{
    key: !_react["default"].PureComponent && "shouldComponentUpdate",
    value: function () {
      function value(nextProps, nextState) {
        return (0, _reactAddonsShallowCompare["default"])(this, nextProps, nextState);
      }

      return value;
    }()
  }]);

  function DateRangePicker(props) {
    var _this;

    _classCallCheck(this, DateRangePicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateRangePicker).call(this, props));
    _this.state = {
      dayPickerContainerStyles: {},
      isDateRangePickerInputFocused: false,
      isDayPickerFocused: false,
      showKeyboardShortcuts: false
    };
    _this.isTouchDevice = false;
    _this.onOutsideClick = _this.onOutsideClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onDateRangePickerInputFocus = _this.onDateRangePickerInputFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onDayPickerFocus = _this.onDayPickerFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onDayPickerFocusOut = _this.onDayPickerFocusOut.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onDayPickerBlur = _this.onDayPickerBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.showKeyboardShortcutsPanel = _this.showKeyboardShortcutsPanel.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.responsivizePickerPosition = _this.responsivizePickerPosition.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.disableScroll = _this.disableScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.setDayPickerContainerRef = _this.setDayPickerContainerRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.setContainerRef = _this.setContainerRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(DateRangePicker, [{
    key: "componentDidMount",
    value: function () {
      function componentDidMount() {
        this.removeEventListener = (0, _consolidatedEvents.addEventListener)(window, 'resize', this.responsivizePickerPosition, {
          passive: true
        });
        this.responsivizePickerPosition();
        this.disableScroll();
        var focusedInput = this.props.focusedInput;

        if (focusedInput) {
          this.setState({
            isDateRangePickerInputFocused: true
          });
        }

        this.isTouchDevice = (0, _isTouchDevice["default"])();
      }

      return componentDidMount;
    }()
  }, {
    key: "componentDidUpdate",
    value: function () {
      function componentDidUpdate(prevProps) {
        var focusedInput = this.props.focusedInput;

        if (!prevProps.focusedInput && focusedInput && this.isOpened()) {
          // The date picker just changed from being closed to being open.
          this.responsivizePickerPosition();
          this.disableScroll();
        } else if (prevProps.focusedInput && !focusedInput && !this.isOpened()) {
          // The date picker just changed from being open to being closed.
          if (this.enableScroll) this.enableScroll();
        }
      }

      return componentDidUpdate;
    }()
  }, {
    key: "componentWillUnmount",
    value: function () {
      function componentWillUnmount() {
        this.removeDayPickerEventListeners();
        if (this.removeEventListener) this.removeEventListener();
        if (this.enableScroll) this.enableScroll();
      }

      return componentWillUnmount;
    }()
  }, {
    key: "onOutsideClick",
    value: function () {
      function onOutsideClick(event) {
        var _this$props = this.props,
            onFocusChange = _this$props.onFocusChange,
            onClose = _this$props.onClose,
            startDate = _this$props.startDate,
            endDate = _this$props.endDate,
            appendToBody = _this$props.appendToBody;
        if (!this.isOpened()) return;
        if (appendToBody && this.dayPickerContainer.contains(event.target)) return;
        this.setState({
          isDateRangePickerInputFocused: false,
          isDayPickerFocused: false,
          showKeyboardShortcuts: false
        });
        onFocusChange(null);
        onClose({
          startDate: startDate,
          endDate: endDate
        });
      }

      return onOutsideClick;
    }()
  }, {
    key: "onDateRangePickerInputFocus",
    value: function () {
      function onDateRangePickerInputFocus(focusedInput) {
        var _this$props2 = this.props,
            onFocusChange = _this$props2.onFocusChange,
            readOnly = _this$props2.readOnly,
            withPortal = _this$props2.withPortal,
            withFullScreenPortal = _this$props2.withFullScreenPortal,
            keepFocusOnInput = _this$props2.keepFocusOnInput;

        if (focusedInput) {
          var withAnyPortal = withPortal || withFullScreenPortal;
          var moveFocusToDayPicker = withAnyPortal || readOnly && !keepFocusOnInput || this.isTouchDevice && !keepFocusOnInput;

          if (moveFocusToDayPicker) {
            this.onDayPickerFocus();
          } else {
            this.onDayPickerBlur();
          }
        }

        onFocusChange(focusedInput);
      }

      return onDateRangePickerInputFocus;
    }()
  }, {
    key: "onDayPickerFocus",
    value: function () {
      function onDayPickerFocus() {
        var _this$props3 = this.props,
            focusedInput = _this$props3.focusedInput,
            onFocusChange = _this$props3.onFocusChange;
        if (!focusedInput) onFocusChange(_constants.START_DATE);
        this.setState({
          isDateRangePickerInputFocused: false,
          isDayPickerFocused: true,
          showKeyboardShortcuts: false
        });
      }

      return onDayPickerFocus;
    }()
  }, {
    key: "onDayPickerFocusOut",
    value: function () {
      function onDayPickerFocusOut(event) {
        // In cases where **relatedTarget** is not null, it points to the right
        // element here. However, in cases where it is null (such as clicking on a
        // specific day) or it is **document.body** (IE11), the appropriate value is **event.target**.
        //
        // We handle both situations here by using the ` || ` operator to fallback
        // to *event.target** when **relatedTarget** is not provided.
        var relatedTarget = event.relatedTarget === document.body ? event.target : event.relatedTarget || event.target;
        if (this.dayPickerContainer.contains(relatedTarget)) return;
        this.onOutsideClick(event);
      }

      return onDayPickerFocusOut;
    }()
  }, {
    key: "onDayPickerBlur",
    value: function () {
      function onDayPickerBlur() {
        this.setState({
          isDateRangePickerInputFocused: true,
          isDayPickerFocused: false,
          showKeyboardShortcuts: false
        });
      }

      return onDayPickerBlur;
    }()
  }, {
    key: "setDayPickerContainerRef",
    value: function () {
      function setDayPickerContainerRef(ref) {
        if (ref === this.dayPickerContainer) return;
        if (this.dayPickerContainer) this.removeDayPickerEventListeners();
        this.dayPickerContainer = ref;
        if (!ref) return;
        this.addDayPickerEventListeners();
      }

      return setDayPickerContainerRef;
    }()
  }, {
    key: "setContainerRef",
    value: function () {
      function setContainerRef(ref) {
        this.container = ref;
      }

      return setContainerRef;
    }()
  }, {
    key: "addDayPickerEventListeners",
    value: function () {
      function addDayPickerEventListeners() {
        // NOTE: We are using a manual event listener here, because React doesn't
        // provide FocusOut, while blur and keydown don't provide the information
        // needed in order to know whether we have left focus or not.
        //
        // For reference, this issue is further described here:
        // - https://github.com/facebook/react/issues/6410
        this.removeDayPickerFocusOut = (0, _consolidatedEvents.addEventListener)(this.dayPickerContainer, 'focusout', this.onDayPickerFocusOut);
      }

      return addDayPickerEventListeners;
    }()
  }, {
    key: "removeDayPickerEventListeners",
    value: function () {
      function removeDayPickerEventListeners() {
        if (this.removeDayPickerFocusOut) this.removeDayPickerFocusOut();
      }

      return removeDayPickerEventListeners;
    }()
  }, {
    key: "isOpened",
    value: function () {
      function isOpened() {
        var focusedInput = this.props.focusedInput;
        return focusedInput === _constants.START_DATE || focusedInput === _constants.END_DATE;
      }

      return isOpened;
    }()
  }, {
    key: "disableScroll",
    value: function () {
      function disableScroll() {
        var _this$props4 = this.props,
            appendToBody = _this$props4.appendToBody,
            propDisableScroll = _this$props4.disableScroll;
        if (!appendToBody && !propDisableScroll) return;
        if (!this.isOpened()) return; // Disable scroll for every ancestor of this DateRangePicker up to the
        // document level. This ensures the input and the picker never move. Other
        // sibling elements or the picker itself can scroll.

        this.enableScroll = (0, _disableScroll2["default"])(this.container);
      }

      return disableScroll;
    }()
  }, {
    key: "responsivizePickerPosition",
    value: function () {
      function responsivizePickerPosition() {
        // It's possible the portal props have been changed in response to window resizes
        // So let's ensure we reset this back to the base state each time
        this.setState({
          dayPickerContainerStyles: {}
        });

        if (!this.isOpened()) {
          return;
        }

        var _this$props5 = this.props,
            openDirection = _this$props5.openDirection,
            anchorDirection = _this$props5.anchorDirection,
            horizontalMargin = _this$props5.horizontalMargin,
            withPortal = _this$props5.withPortal,
            withFullScreenPortal = _this$props5.withFullScreenPortal,
            appendToBody = _this$props5.appendToBody;
        var dayPickerContainerStyles = this.state.dayPickerContainerStyles;
        var isAnchoredLeft = anchorDirection === _constants.ANCHOR_LEFT;

        if (!withPortal && !withFullScreenPortal) {
          var containerRect = this.dayPickerContainer.getBoundingClientRect();
          var currentOffset = dayPickerContainerStyles[anchorDirection] || 0;
          var containerEdge = isAnchoredLeft ? containerRect[_constants.ANCHOR_RIGHT] : containerRect[_constants.ANCHOR_LEFT];
          this.setState({
            dayPickerContainerStyles: _objectSpread({}, (0, _getResponsiveContainerStyles["default"])(anchorDirection, currentOffset, containerEdge, horizontalMargin), appendToBody && (0, _getDetachedContainerStyles["default"])(openDirection, anchorDirection, this.container))
          });
        }
      }

      return responsivizePickerPosition;
    }()
  }, {
    key: "showKeyboardShortcutsPanel",
    value: function () {
      function showKeyboardShortcutsPanel() {
        this.setState({
          isDateRangePickerInputFocused: false,
          isDayPickerFocused: true,
          showKeyboardShortcuts: true
        });
      }

      return showKeyboardShortcutsPanel;
    }()
  }, {
    key: "maybeRenderDayPickerWithPortal",
    value: function () {
      function maybeRenderDayPickerWithPortal() {
        var _this$props6 = this.props,
            withPortal = _this$props6.withPortal,
            withFullScreenPortal = _this$props6.withFullScreenPortal,
            appendToBody = _this$props6.appendToBody;

        if (!this.isOpened()) {
          return null;
        }

        if (withPortal || withFullScreenPortal || appendToBody) {
          return _react["default"].createElement(_reactPortal.Portal, null, this.renderDayPicker());
        }

        return this.renderDayPicker();
      }

      return maybeRenderDayPickerWithPortal;
    }()
  }, {
    key: "renderDayPicker",
    value: function () {
      function renderDayPicker() {
        var _this$props7 = this.props,
            anchorDirection = _this$props7.anchorDirection,
            openDirection = _this$props7.openDirection,
            isDayBlocked = _this$props7.isDayBlocked,
            isDayHighlighted = _this$props7.isDayHighlighted,
            isOutsideRange = _this$props7.isOutsideRange,
            numberOfMonths = _this$props7.numberOfMonths,
            orientation = _this$props7.orientation,
            monthFormat = _this$props7.monthFormat,
            renderMonthText = _this$props7.renderMonthText,
            navPrev = _this$props7.navPrev,
            navNext = _this$props7.navNext,
            onPrevMonthClick = _this$props7.onPrevMonthClick,
            onNextMonthClick = _this$props7.onNextMonthClick,
            onDatesChange = _this$props7.onDatesChange,
            onFocusChange = _this$props7.onFocusChange,
            withPortal = _this$props7.withPortal,
            withFullScreenPortal = _this$props7.withFullScreenPortal,
            daySize = _this$props7.daySize,
            enableOutsideDays = _this$props7.enableOutsideDays,
            focusedInput = _this$props7.focusedInput,
            startDate = _this$props7.startDate,
            startDateOffset = _this$props7.startDateOffset,
            endDate = _this$props7.endDate,
            endDateOffset = _this$props7.endDateOffset,
            minimumNights = _this$props7.minimumNights,
            keepOpenOnDateSelect = _this$props7.keepOpenOnDateSelect,
            renderCalendarDay = _this$props7.renderCalendarDay,
            renderDayContents = _this$props7.renderDayContents,
            renderCalendarInfo = _this$props7.renderCalendarInfo,
            renderMonthElement = _this$props7.renderMonthElement,
            calendarInfoPosition = _this$props7.calendarInfoPosition,
            firstDayOfWeek = _this$props7.firstDayOfWeek,
            initialVisibleMonth = _this$props7.initialVisibleMonth,
            hideKeyboardShortcutsPanel = _this$props7.hideKeyboardShortcutsPanel,
            customCloseIcon = _this$props7.customCloseIcon,
            onClose = _this$props7.onClose,
            phrases = _this$props7.phrases,
            dayAriaLabelFormat = _this$props7.dayAriaLabelFormat,
            isRTL = _this$props7.isRTL,
            weekDayFormat = _this$props7.weekDayFormat,
            styles = _this$props7.styles,
            verticalHeight = _this$props7.verticalHeight,
            transitionDuration = _this$props7.transitionDuration,
            verticalSpacing = _this$props7.verticalSpacing,
            horizontalMonthPadding = _this$props7.horizontalMonthPadding,
            small = _this$props7.small,
            disabled = _this$props7.disabled,
            reactDates = _this$props7.theme.reactDates;
        var _this$state = this.state,
            dayPickerContainerStyles = _this$state.dayPickerContainerStyles,
            isDayPickerFocused = _this$state.isDayPickerFocused,
            showKeyboardShortcuts = _this$state.showKeyboardShortcuts;
        var onOutsideClick = !withFullScreenPortal && withPortal ? this.onOutsideClick : undefined;

        var initialVisibleMonthThunk = initialVisibleMonth || function () {
          return startDate || endDate || (0, _moment["default"])();
        };

        var closeIcon = customCloseIcon || _react["default"].createElement(_CloseButton["default"], (0, _reactWithStyles.css)(styles.DateRangePicker_closeButton_svg));

        var inputHeight = (0, _getInputHeight["default"])(reactDates, small);
        var withAnyPortal = withPortal || withFullScreenPortal;
        return _react["default"].createElement("div", _extends({
          // eslint-disable-line jsx-a11y/no-static-element-interactions
          ref: this.setDayPickerContainerRef
        }, (0, _reactWithStyles.css)(styles.DateRangePicker_picker, anchorDirection === _constants.ANCHOR_LEFT && styles.DateRangePicker_picker__directionLeft, anchorDirection === _constants.ANCHOR_RIGHT && styles.DateRangePicker_picker__directionRight, orientation === _constants.HORIZONTAL_ORIENTATION && styles.DateRangePicker_picker__horizontal, orientation === _constants.VERTICAL_ORIENTATION && styles.DateRangePicker_picker__vertical, !withAnyPortal && openDirection === _constants.OPEN_DOWN && {
          top: inputHeight + verticalSpacing
        }, !withAnyPortal && openDirection === _constants.OPEN_UP && {
          bottom: inputHeight + verticalSpacing
        }, withAnyPortal && styles.DateRangePicker_picker__portal, withFullScreenPortal && styles.DateRangePicker_picker__fullScreenPortal, isRTL && styles.DateRangePicker_picker__rtl, dayPickerContainerStyles), {
          onClick: onOutsideClick
        }), _react["default"].createElement(_DayPickerRangeController["default"], {
          orientation: orientation,
          enableOutsideDays: enableOutsideDays,
          numberOfMonths: numberOfMonths,
          onPrevMonthClick: onPrevMonthClick,
          onNextMonthClick: onNextMonthClick,
          onDatesChange: onDatesChange,
          onFocusChange: onFocusChange,
          onClose: onClose,
          focusedInput: focusedInput,
          startDate: startDate,
          startDateOffset: startDateOffset,
          endDate: endDate,
          endDateOffset: endDateOffset,
          monthFormat: monthFormat,
          renderMonthText: renderMonthText,
          withPortal: withAnyPortal,
          daySize: daySize,
          initialVisibleMonth: initialVisibleMonthThunk,
          hideKeyboardShortcutsPanel: hideKeyboardShortcutsPanel,
          navPrev: navPrev,
          navNext: navNext,
          minimumNights: minimumNights,
          isOutsideRange: isOutsideRange,
          isDayHighlighted: isDayHighlighted,
          isDayBlocked: isDayBlocked,
          keepOpenOnDateSelect: keepOpenOnDateSelect,
          renderCalendarDay: renderCalendarDay,
          renderDayContents: renderDayContents,
          renderCalendarInfo: renderCalendarInfo,
          renderMonthElement: renderMonthElement,
          calendarInfoPosition: calendarInfoPosition,
          isFocused: isDayPickerFocused,
          showKeyboardShortcuts: showKeyboardShortcuts,
          onBlur: this.onDayPickerBlur,
          phrases: phrases,
          dayAriaLabelFormat: dayAriaLabelFormat,
          isRTL: isRTL,
          firstDayOfWeek: firstDayOfWeek,
          weekDayFormat: weekDayFormat,
          verticalHeight: verticalHeight,
          transitionDuration: transitionDuration,
          disabled: disabled,
          horizontalMonthPadding: horizontalMonthPadding
        }), withFullScreenPortal && _react["default"].createElement("button", _extends({}, (0, _reactWithStyles.css)(styles.DateRangePicker_closeButton), {
          type: "button",
          onClick: this.onOutsideClick,
          "aria-label": phrases.closeDatePicker
        }), closeIcon));
      }

      return renderDayPicker;
    }()
  }, {
    key: "render",
    value: function () {
      function render() {
        var _this$props8 = this.props,
            startDate = _this$props8.startDate,
            startDateId = _this$props8.startDateId,
            startDatePlaceholderText = _this$props8.startDatePlaceholderText,
            endDate = _this$props8.endDate,
            endDateId = _this$props8.endDateId,
            endDatePlaceholderText = _this$props8.endDatePlaceholderText,
            focusedInput = _this$props8.focusedInput,
            screenReaderInputMessage = _this$props8.screenReaderInputMessage,
            showClearDates = _this$props8.showClearDates,
            showDefaultInputIcon = _this$props8.showDefaultInputIcon,
            inputIconPosition = _this$props8.inputIconPosition,
            customInputIcon = _this$props8.customInputIcon,
            customArrowIcon = _this$props8.customArrowIcon,
            customCloseIcon = _this$props8.customCloseIcon,
            disabled = _this$props8.disabled,
            required = _this$props8.required,
            readOnly = _this$props8.readOnly,
            openDirection = _this$props8.openDirection,
            phrases = _this$props8.phrases,
            isOutsideRange = _this$props8.isOutsideRange,
            minimumNights = _this$props8.minimumNights,
            withPortal = _this$props8.withPortal,
            withFullScreenPortal = _this$props8.withFullScreenPortal,
            displayFormat = _this$props8.displayFormat,
            reopenPickerOnClearDates = _this$props8.reopenPickerOnClearDates,
            keepOpenOnDateSelect = _this$props8.keepOpenOnDateSelect,
            onDatesChange = _this$props8.onDatesChange,
            onClose = _this$props8.onClose,
            isRTL = _this$props8.isRTL,
            noBorder = _this$props8.noBorder,
            block = _this$props8.block,
            verticalSpacing = _this$props8.verticalSpacing,
            small = _this$props8.small,
            regular = _this$props8.regular,
            styles = _this$props8.styles;
        var isDateRangePickerInputFocused = this.state.isDateRangePickerInputFocused;
        var enableOutsideClick = !withPortal && !withFullScreenPortal;
        var hideFang = verticalSpacing < _constants.FANG_HEIGHT_PX;

        var input = _react["default"].createElement(_DateRangePickerInputController["default"], {
          startDate: startDate,
          startDateId: startDateId,
          startDatePlaceholderText: startDatePlaceholderText,
          isStartDateFocused: focusedInput === _constants.START_DATE,
          endDate: endDate,
          endDateId: endDateId,
          endDatePlaceholderText: endDatePlaceholderText,
          isEndDateFocused: focusedInput === _constants.END_DATE,
          displayFormat: displayFormat,
          showClearDates: showClearDates,
          showCaret: !withPortal && !withFullScreenPortal && !hideFang,
          showDefaultInputIcon: showDefaultInputIcon,
          inputIconPosition: inputIconPosition,
          customInputIcon: customInputIcon,
          customArrowIcon: customArrowIcon,
          customCloseIcon: customCloseIcon,
          disabled: disabled,
          required: required,
          readOnly: readOnly,
          openDirection: openDirection,
          reopenPickerOnClearDates: reopenPickerOnClearDates,
          keepOpenOnDateSelect: keepOpenOnDateSelect,
          isOutsideRange: isOutsideRange,
          minimumNights: minimumNights,
          withFullScreenPortal: withFullScreenPortal,
          onDatesChange: onDatesChange,
          onFocusChange: this.onDateRangePickerInputFocus,
          onKeyDownArrowDown: this.onDayPickerFocus,
          onKeyDownQuestionMark: this.showKeyboardShortcutsPanel,
          onClose: onClose,
          phrases: phrases,
          screenReaderMessage: screenReaderInputMessage,
          isFocused: isDateRangePickerInputFocused,
          isRTL: isRTL,
          noBorder: noBorder,
          block: block,
          small: small,
          regular: regular,
          verticalSpacing: verticalSpacing
        }, this.maybeRenderDayPickerWithPortal());

        return _react["default"].createElement("div", _extends({
          ref: this.setContainerRef
        }, (0, _reactWithStyles.css)(styles.DateRangePicker, block && styles.DateRangePicker__block)), enableOutsideClick && _react["default"].createElement(_reactOutsideClickHandler["default"], {
          onOutsideClick: this.onOutsideClick
        }, input), enableOutsideClick || input);
      }

      return render;
    }()
  }]);

  return DateRangePicker;
}(_react["default"].PureComponent || _react["default"].Component);

exports.PureDateRangePicker = DateRangePicker;
DateRangePicker.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
DateRangePicker.defaultProps = defaultProps;

var _default = (0, _reactWithStyles.withStyles)(function (_ref2) {
  var _ref2$reactDates = _ref2.reactDates,
      color = _ref2$reactDates.color,
      zIndex = _ref2$reactDates.zIndex;
  return {
    DateRangePicker: {
      position: 'relative',
      display: 'inline-block'
    },
    DateRangePicker__block: {
      display: 'block'
    },
    DateRangePicker_picker: {
      zIndex: zIndex + 1,
      backgroundColor: color.background,
      position: 'absolute'
    },
    DateRangePicker_picker__rtl: {
      direction: (0, _noflip["default"])('rtl')
    },
    DateRangePicker_picker__directionLeft: {
      left: (0, _noflip["default"])(0)
    },
    DateRangePicker_picker__directionRight: {
      right: (0, _noflip["default"])(0)
    },
    DateRangePicker_picker__portal: {
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      position: 'fixed',
      top: 0,
      left: (0, _noflip["default"])(0),
      height: '100%',
      width: '100%'
    },
    DateRangePicker_picker__fullScreenPortal: {
      backgroundColor: color.background
    },
    DateRangePicker_closeButton: {
      background: 'none',
      border: 0,
      color: 'inherit',
      font: 'inherit',
      lineHeight: 'normal',
      overflow: 'visible',
      cursor: 'pointer',
      position: 'absolute',
      top: 0,
      right: (0, _noflip["default"])(0),
      padding: 15,
      zIndex: zIndex + 2,
      ':hover': {
        color: "darken(".concat(color.core.grayLighter, ", 10%)"),
        textDecoration: 'none'
      },
      ':focus': {
        color: "darken(".concat(color.core.grayLighter, ", 10%)"),
        textDecoration: 'none'
      }
    },
    DateRangePicker_closeButton_svg: {
      height: 15,
      width: 15,
      fill: color.core.grayLighter
    }
  };
}, {
  pureComponent: typeof _react["default"].PureComponent !== 'undefined'
})(DateRangePicker);

exports["default"] = _default;