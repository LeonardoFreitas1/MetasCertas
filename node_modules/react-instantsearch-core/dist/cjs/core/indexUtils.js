"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIndexId = getIndexId;
exports.getResults = getResults;
exports.hasMultipleIndices = hasMultipleIndices;
exports.refineValue = refineValue;
exports.getCurrentRefinementValue = getCurrentRefinementValue;
exports.cleanUpValue = cleanUpValue;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread12 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _has2 = _interopRequireDefault(require("lodash/has"));

function getIndexId(context) {
  return context && context.multiIndexContext ? context.multiIndexContext.targetedIndex : context.ais.mainTargetedIndex;
}

function getResults(searchResults, context) {
  if (searchResults.results && !searchResults.results.hits) {
    return searchResults.results[getIndexId(context)] ? searchResults.results[getIndexId(context)] : null;
  } else {
    return searchResults.results ? searchResults.results : null;
  }
}

function hasMultipleIndices(context) {
  return context && context.multiIndexContext;
} // eslint-disable-next-line max-params


function refineValue(searchState, nextRefinement, context, resetPage, namespace) {
  if (hasMultipleIndices(context)) {
    return namespace ? refineMultiIndexWithNamespace(searchState, nextRefinement, context, resetPage, namespace) : refineMultiIndex(searchState, nextRefinement, context, resetPage);
  } else {
    // When we have a multi index page with shared widgets we should also
    // reset their page to 1 if the resetPage is provided. Otherwise the
    // indices will always be reset
    // see: https://github.com/algolia/react-instantsearch/issues/310
    // see: https://github.com/algolia/react-instantsearch/issues/637
    if (searchState.indices && resetPage) {
      Object.keys(searchState.indices).forEach(function (targetedIndex) {
        searchState = refineValue(searchState, {
          page: 1
        }, {
          multiIndexContext: {
            targetedIndex: targetedIndex
          }
        }, true, namespace);
      });
    }

    return namespace ? refineSingleIndexWithNamespace(searchState, nextRefinement, resetPage, namespace) : refineSingleIndex(searchState, nextRefinement, resetPage);
  }
}

function refineMultiIndex(searchState, nextRefinement, context, resetPage) {
  var page = resetPage ? {
    page: 1
  } : undefined;
  var indexId = getIndexId(context);
  var state = (0, _has2.default)(searchState, "indices.".concat(indexId)) ? (0, _objectSpread12.default)({}, searchState.indices, (0, _defineProperty2.default)({}, indexId, (0, _objectSpread12.default)({}, searchState.indices[indexId], nextRefinement, page))) : (0, _objectSpread12.default)({}, searchState.indices, (0, _defineProperty2.default)({}, indexId, (0, _objectSpread12.default)({}, nextRefinement, page)));
  return (0, _objectSpread12.default)({}, searchState, {
    indices: state
  });
}

function refineSingleIndex(searchState, nextRefinement, resetPage) {
  var page = resetPage ? {
    page: 1
  } : undefined;
  return (0, _objectSpread12.default)({}, searchState, nextRefinement, page);
} // eslint-disable-next-line max-params


function refineMultiIndexWithNamespace(searchState, nextRefinement, context, resetPage, namespace) {
  var _objectSpread4;

  var indexId = getIndexId(context);
  var page = resetPage ? {
    page: 1
  } : undefined;
  var state = (0, _has2.default)(searchState, "indices.".concat(indexId)) ? (0, _objectSpread12.default)({}, searchState.indices, (0, _defineProperty2.default)({}, indexId, (0, _objectSpread12.default)({}, searchState.indices[indexId], (_objectSpread4 = {}, (0, _defineProperty2.default)(_objectSpread4, namespace, (0, _objectSpread12.default)({}, searchState.indices[indexId][namespace], nextRefinement)), (0, _defineProperty2.default)(_objectSpread4, "page", 1), _objectSpread4)))) : (0, _objectSpread12.default)({}, searchState.indices, (0, _defineProperty2.default)({}, indexId, (0, _objectSpread12.default)((0, _defineProperty2.default)({}, namespace, nextRefinement), page)));
  return (0, _objectSpread12.default)({}, searchState, {
    indices: state
  });
}

function refineSingleIndexWithNamespace(searchState, nextRefinement, resetPage, namespace) {
  var page = resetPage ? {
    page: 1
  } : undefined;
  return (0, _objectSpread12.default)({}, searchState, (0, _defineProperty2.default)({}, namespace, (0, _objectSpread12.default)({}, searchState[namespace], nextRefinement)), page);
}

function getNamespaceAndAttributeName(id) {
  var parts = id.match(/^([^.]*)\.(.*)/);
  var namespace = parts && parts[1];
  var attributeName = parts && parts[2];
  return {
    namespace: namespace,
    attributeName: attributeName
  };
} // eslint-disable-next-line max-params


function getCurrentRefinementValue(props, searchState, context, id, defaultValue) {
  var refinementsCallback = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function (x) {
    return x;
  };
  var indexId = getIndexId(context);

  var _getNamespaceAndAttri = getNamespaceAndAttributeName(id),
      namespace = _getNamespaceAndAttri.namespace,
      attributeName = _getNamespaceAndAttri.attributeName;

  var refinements = hasMultipleIndices(context) && searchState.indices && namespace && searchState.indices["".concat(indexId)] && (0, _has2.default)(searchState.indices["".concat(indexId)][namespace], "".concat(attributeName)) || hasMultipleIndices(context) && searchState.indices && (0, _has2.default)(searchState, "indices.".concat(indexId, ".").concat(id)) || !hasMultipleIndices(context) && namespace && (0, _has2.default)(searchState[namespace], attributeName) || !hasMultipleIndices(context) && (0, _has2.default)(searchState, id);

  if (refinements) {
    var currentRefinement;

    if (hasMultipleIndices(context)) {
      currentRefinement = namespace ? (0, _get2.default)(searchState.indices["".concat(indexId)][namespace], attributeName) : (0, _get2.default)(searchState.indices[indexId], id);
    } else {
      currentRefinement = namespace ? (0, _get2.default)(searchState[namespace], attributeName) : (0, _get2.default)(searchState, id);
    }

    return refinementsCallback(currentRefinement);
  }

  if (props.defaultRefinement) {
    return props.defaultRefinement;
  }

  return defaultValue;
}

function cleanUpValue(searchState, context, id) {
  var indexId = getIndexId(context);

  var _getNamespaceAndAttri2 = getNamespaceAndAttributeName(id),
      namespace = _getNamespaceAndAttri2.namespace,
      attributeName = _getNamespaceAndAttri2.attributeName;

  if (hasMultipleIndices(context) && Boolean(searchState.indices)) {
    return cleanUpValueWithMutliIndex({
      attribute: attributeName,
      searchState: searchState,
      indexId: indexId,
      id: id,
      namespace: namespace
    });
  }

  return cleanUpValueWithSingleIndex({
    attribute: attributeName,
    searchState: searchState,
    id: id,
    namespace: namespace
  });
}

function cleanUpValueWithSingleIndex(_ref) {
  var searchState = _ref.searchState,
      id = _ref.id,
      namespace = _ref.namespace,
      attribute = _ref.attribute;

  if (namespace) {
    return (0, _objectSpread12.default)({}, searchState, (0, _defineProperty2.default)({}, namespace, (0, _omit2.default)(searchState[namespace], attribute)));
  }

  return (0, _omit2.default)(searchState, id);
}

function cleanUpValueWithMutliIndex(_ref2) {
  var searchState = _ref2.searchState,
      indexId = _ref2.indexId,
      id = _ref2.id,
      namespace = _ref2.namespace,
      attribute = _ref2.attribute;
  var indexSearchState = searchState.indices[indexId];

  if (namespace && indexSearchState) {
    return (0, _objectSpread12.default)({}, searchState, {
      indices: (0, _objectSpread12.default)({}, searchState.indices, (0, _defineProperty2.default)({}, indexId, (0, _objectSpread12.default)({}, indexSearchState, (0, _defineProperty2.default)({}, namespace, (0, _omit2.default)(indexSearchState[namespace], attribute)))))
    });
  }

  return (0, _omit2.default)(searchState, "indices.".concat(indexId, ".").concat(id));
}