'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Throttler = require('../classes/processors/Throttler');

var _Throttler2 = _interopRequireDefault(_Throttler);

var _Base2 = require('./Base');

var _Base3 = _interopRequireDefault(_Base2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Throttle = function (_Base) {
  _inherits(Throttle, _Base);

  function Throttle(props) {
    _classCallCheck(this, Throttle);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Throttle).call(this, props));

    _this._throttler = new _Throttler2.default(props.children, _this.handlersToWrap, props.time);
    return _this;
  }

  return Throttle;
}(_Base3.default);

Throttle.defaultProps = {
  handler: '',
  handlers: [],
  time: 100
};
exports.default = Throttle;