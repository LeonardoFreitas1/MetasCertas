'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactElementResize = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window */

var iframeStyle = {
  display: 'block',
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  overflow: 'hidden',
  border: 'none',
  background: 'transparent',
  pointerEvents: 'none',
  zIndex: -1
};

var ReactElementResize = exports.ReactElementResize = function (_React$Component) {
  _inherits(ReactElementResize, _React$Component);

  function ReactElementResize() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactElementResize);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactElementResize.__proto__ || Object.getPrototypeOf(ReactElementResize)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      width: -1,
      height: -1,
      offsetLeft: -1,
      offsetTop: -1,
      scrollLeft: -1,
      scrollTop: -1
    }, _this.onContainerRef = function (ref) {
      _this.container = ref;
    }, _this.onResize = function () {
      var _this$sensor$contentW = _this.sensor.contentWindow,
          width = _this$sensor$contentW.innerWidth,
          height = _this$sensor$contentW.innerHeight;
      var onResize = _this.props.onResize;

      onResize({ width: width, height: height });
      _this.setState({ width: width, height: height });
    }, _this.onScroll = function () {
      var _this$container = _this.container,
          offsetLeft = _this$container.offsetLeft,
          offsetTop = _this$container.offsetTop,
          scrollLeft = _this$container.scrollLeft,
          scrollTop = _this$container.scrollTop;
      var onScroll = _this.props.onScroll;

      onScroll({ offsetLeft: offsetLeft, offsetTop: offsetTop, scrollLeft: scrollLeft, scrollTop: scrollTop });
      _this.setState({ offsetLeft: offsetLeft, offsetTop: offsetTop, scrollLeft: scrollLeft, scrollTop: scrollTop });
    }, _this.onSensorRef = function (ref) {
      _this.sensor = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReactElementResize, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props,
          debounceTimeout = _props.debounceTimeout,
          debounceOptions = _props.debounceOptions,
          onResize = _props.onResize,
          onScroll = _props.onScroll;


      if (onResize) {
        this.onResizeDebounced = debounceTimeout > -1 ? (0, _lodash2.default)(this.onResize, debounceTimeout, debounceOptions) : this.onResize;
      }

      if (onScroll) {
        this.onScrollDebounced = debounceTimeout > -1 ? (0, _lodash2.default)(this.onScroll, debounceTimeout, debounceOptions) : this.onScroll;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props2 = this.props,
          onResize = _props2.onResize,
          onScroll = _props2.onScroll;


      if (onResize) {
        this.sensor.contentWindow.addEventListener('resize', this.onResizeDebounced, false);
        this.rafOnResize = window.requestAnimationFrame(this.onResize);
      }

      if (onScroll) {
        this.container.addEventListener('scroll', this.onScrollDebounced, false);
        this.rafOnScroll = window.requestAnimationFrame(this.onScroll);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var _props3 = this.props,
          onResize = _props3.onResize,
          onScroll = _props3.onScroll;


      if (onResize) {
        window.cancelAnimationFrame(this.rafOnResize);
        this.sensor.contentWindow.removeEventListener('resize', this.onResizeDebounced, false);
        if (this.onResizeDebounced.cancel) {
          this.onResizeDebounced.cancel();
        }
      }

      if (onScroll) {
        window.cancelAnimationFrame(this.rafOnScroll);
        this.container.removeEventListener('scroll', this.onScrollDebounced, false);
        if (this.onScrollDebounced.cancel) {
          this.onScrollDebounced.cancel();
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          onResize = _props4.onResize,
          onScroll = _props4.onScroll,
          _debounceTimeout = _props4.debounceTimeout,
          _debounceOptions = _props4.debounceOptions,
          style = _props4.style,
          render = _props4.children,
          props = _objectWithoutProperties(_props4, ['onResize', 'onScroll', 'debounceTimeout', 'debounceOptions', 'style', 'children']);

      var _state = this.state,
          width = _state.width,
          height = _state.height,
          offsetLeft = _state.offsetLeft,
          offsetTop = _state.offsetTop,
          scrollLeft = _state.scrollLeft,
          scrollTop = _state.scrollTop;

      var shouldRender = onResize && width > -1 && height > -1 || onScroll && offsetLeft > -1 && offsetTop > -1 && scrollLeft > -1 && scrollTop > -1;

      return _react2.default.createElement(
        'div',
        _extends({ ref: this.onContainerRef, style: _extends({ position: 'relative' }, style) }, props),
        onResize ? _react2.default.createElement('iframe', { ref: this.onSensorRef, title: 'Element resize sensor', style: iframeStyle }) : null,
        shouldRender ? render({ width: width, height: height, offsetLeft: offsetLeft, offsetTop: offsetTop, scrollLeft: scrollLeft, scrollTop: scrollTop }) : null
      );
    }
  }]);

  return ReactElementResize;
}(_react2.default.Component);

ReactElementResize.defaultProps = {
  onResize: undefined,
  onScroll: undefined,
  debounceTimeout: -1,
  debounceOptions: undefined,
  style: {},
  children: function children() {
    return null;
  }
};